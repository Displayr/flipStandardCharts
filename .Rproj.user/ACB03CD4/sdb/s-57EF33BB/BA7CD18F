{
    "collab_server" : "",
    "contents" : "# 'AsChartMatrix' checks if data is in the appropriate format and attempts to coerce it to the appropriate\n# format if so required.\n\n# A 'ChartMatrix' is/has\n# - A 'matrix' of type 'integer' or 'numeric'\n# - Columns represent the X-axis\n# - Column names\n# - Row names if there are more than one rows\n\n# textPeriodsFromDate <- function(x, period = \"month\")\n# {\n#     year.two.digits <- strftime(x, \"%y\")\n#\n#     df <- cbind(strftime(x, \"%Y\"), quarters(x), paste(strftime(x, \"%Y\"), quarters(x), sep = \"\"), substr(months(x), 1, 3), strftime(x,\"%m\"), strftime(x,\"%Y%m\"))\n#\n#     return(df)\n# }\n\naggregatePeriodFromDate <- function(x, period = \"month\")\n{\n    year.two.digits <- strftime(x, \"%y\")\n\n    if (period == \"month\")\n        return(strftime(x,\"%Y%m\"))\n        #\n\n    if (period == \"quarter\")\n        return(paste(strftime(x, \"%Y\"), quarters(x), sep = \"\"))\n        # return(paste(quarters(x), year.two.digits, sep = \"-\"))\n\n    if (period == \"year\")\n        return(strftime(x, \"%Y\"))\n}\n\ndateLabelling <- function(y, period = \"month\")\n{\n    year.two.digits <- substr(y[, 1], 3,4)\n\n    mth <- c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\")\n\n    if (period == \"month\")\n        y[, 1] <- paste(mth[as.integer(substr(y[, 1], 5, 6))], year.two.digits, sep = \"-\")\n\n    if (period == \"quarter\")\n        y[, 1] <- paste(substr(y[, 1], 5, 6), year.two.digits, sep = \"-\")\n\n    y\n}\n\nformatDateRowNames <- function(y, period = \"month\")\n{\n    format.names <- rownames(y)\n\n    year.two.digits <- substr(format.names, 3,4)\n\n    mth <- c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\")\n\n    if (period == \"month\")\n        format.names <- paste(mth[as.integer(substr(format.names, 5, 6))], year.two.digits, sep = \"-\")\n\n    if (period == \"quarter\")\n        format.names <- paste(substr(format.names, 5, 6), year.two.digits, sep = \"-\")\n\n    rownames(y) <- format.names\n    y\n}\n\nisNumericOrInteger <- function(y)\n{\n    if (!is.integer(y) && !is.numeric(y))\n    {\n        vector.class <- class(y)\n        vector.mode <- mode(y)\n        stop(paste(\"Vectors passed to the y-parameter and/or weights must be of the mode numeric or integer.  The entity passed is a\",vector.class,\"of mode: \",vector.mode))\n    }\n    TRUE\n}\n\nnumberOfRows <- function(x)\n{\n    if (!is.matrix(x) && !is.data.frame(x) && !is.list(x))\n        attributes(x) <- NULL\n\n    if (is.vector(x) | inherits(x, \"POSIXct\"))\n        return(length(x))\n    nrow(x)\n}\n\nequalNumberOfRows <- function(y, x) {numberOfRows(y) == numberOfRows(x)}\n\n\n#' Test if a matrix is appropriate for charting.\n#'\n#' \\code{IsChartMatrix} returns TRUE if the given matrix is suitable for charting, else FALSE.\n#'\n#' @param x A matrix.\n#' @param n.rows The number of rows in the matrix.\n#' @param n.columns The number of columns in the matrix.\n#' @return Logical; if matrix is a chart matrix.\n#' @examples\n#' data(\"z\")\n#' IsChartMatrix(z, nrow(z), ncol(z))\n#' @export\nIsChartMatrix <- function(x, n.rows, n.columns)\n{\n    if (nrow(x) != n.rows)\n        return(FALSE)\n    if (ncol(x) != n.columns)\n        return(FALSE)\n    if (is.null(colnames(x)))\n        return(FALSE)\n    if (is.null(rownames(x)) & n.rows > 1)\n        return(FALSE)\n    isNumericOrInteger(x)\n}\n\n#' Converts one or more objects to a chart matrix.\n#'\n#' \\code{AsChartMatrix} checks if data is in the appropriate format and\n#' attempts to coerce it to the appropriate format if so required.\n#'\n#' @param y A vector, matrix, list of vectors, data frame, or table.\n#' @param x A vector over which y will be aggregated. Must have the same\n#' number of elements as y.\n#' @param transpose Logical; should the final output be transposed?\n#' @param aggregate.period Period over which date varaibles passed to the x\n#' argument will be aggregated. Defaults to \"month\", and can also be \"quarter\"\n#' or \"year\".\n#' @return A chart matrix with named rows and columns.\n#' @examples\n#' data(\"y.data\")\n#' data(\"x.data\")\n#' data(\"var1\")\n#' data(\"x.dates\")\n#' AsChartMatrix(y = y.data, x = x.data, transpose = FALSE)\n#' AsChartMatrix(y = var1, x = x.dates, transpose = TRUE, aggregate.period = \"year\")\n#' @export\nAsChartMatrix <- function(y,\n                          x = NULL,\n                          # weights = NULL,\n                          # subset = NULL,\n                          transpose = FALSE,\n                          aggregate.period = \"month\")  ## can be m(onth), q(uarter), y(ear)\n{\n    if (is.logical(x) && length(x) == 1)\n        x <- NULL\n\n    if (is.null(x)) # Aggregating data over X.\n    {\n        if (!is.vector(y) && !is.table(y) && !is.matrix(y))\n            stop(paste(\"Y must be a vector\"))\n\n        y <- t(as.matrix(y))\n\n        if(transpose)\n            return(t(y))\n\n        return(y)\n    }\n\n    if (is.logical(x))\n        stop(paste(\"X cannot be a logical vector\"))\n\n    if (is.list(x) | is.data.frame(x))\n        stop(paste(\"X cannot take data frames or lists. You have passed a \",class(x), sep=\"\"))\n\n    if (is.list(y))\n        y <- as.data.frame(y)\n\n    if (!equalNumberOfRows(y, x))\n        stop(\"The length of all the elements in a list must be the same, but your Y input is \",\n             numberOfRows(y), \" and your X input is \", numberOfRows(x))\n\n    ## Set dates to numeric values before aggregating to ensure correct sort order\n    date.labelling <- FALSE\n    if (inherits(x, \"POSIXct\"))\n    {\n        x <- aggregatePeriodFromDate(x, period = aggregate.period)\n        date.labelling <- TRUE\n    }\n\n    if (is.factor(y) | is.character(y))\n    {\n        y <- xtabs(~ x + y)\n\n        if (date.labelling <- TRUE)\n        {\n            y <- formatDateRowNames(y, period = aggregate.period)\n            y <- t(y)\n        }\n\n        if (transpose)\n            return(t(y))\n\n        return(y)\n    }\n\n    ## Aggregate (all cases)\n    y <- aggregate(y, list(x), mean)\n\n    rownames(y) <- y[, 1]\n\n    ## Fix up labelling for aggregated dates\n    if (date.labelling == TRUE)\n        y <- formatDateRowNames(y, period = aggregate.period)\n\n    y <- y[, -1, drop = FALSE]\n\n    if (ncol(y) == 1)\n        transpose <- TRUE\n\n    if (!transpose)\n        return(y)\n\n    return(t(y))\n}\n",
    "created" : 1463535281350.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3304330686",
    "id" : "BA7CD18F",
    "lastKnownWriteTime" : 1463535396,
    "last_content_update" : 1463535396106,
    "path" : "~/GitHub/flipStandardCharts/R/aschartmatrix.R",
    "project_path" : "R/aschartmatrix.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}