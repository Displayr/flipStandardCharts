{
    "collab_server" : "",
    "contents" : "# 'AsChartMatrix' checks if data is in the appropriate format and attempts to coerce it to the appropriate\n# format if so required.\n\n# A 'ChartMatrix' is/has\n# - A 'matrix' of type 'integer' or 'numeric'\n# - Columns represent the X-axis\n# - Column names\n# - Row names if there are more than one rows\n\ntextPeriodFromDate <- function(x, period = \"m\")\n{\n    year.two.digits <- strftime(x, \"%y\")\n\n    if (period == \"m\")\n        return(paste(substr(months(x), 1, 3), year.two.digits, sep = \"-\"))\n\n    if (period == \"q\")\n        return(paste(quarters(x), year.two.digits, sep = \"-\"))\n\n    if (period == \"y\")\n        return(strftime(x, \"%y\"))\n}\n\nisNumericOrInteger <- function(y)\n{\n    if (!is.integer(y) && !is.numeric(y))\n    {\n        vector.class <- class(y)\n        vector.mode <- mode(y)\n        stop(paste(\"Vectors passed to the y-parameter and/or weights must be of the mode numeric or integer.  The entity passed is a\",vector.class,\"of mode: \",vector.mode))\n    }\n    TRUE\n}\n\nnumberOfRows <- function(x)\n{\n    if (is.vector(x) | is.factor(x))\n        return(length(x))\n    nrow(x)\n}\n\nequalNumberOfRows <- function(y, x) {numberOfRows(y) == numberOfRows(x)}\n\n#' @export\nIsChartMatrix <- function(x, n.rows, n.columns)\n{\n    if (nrow(x) != n.rows)\n        return(FALSE)\n    if (ncol(x) != n.columns)\n        return(FALSE)\n    if (is.null(colnames(x)))\n        return(FALSE)\n    if (is.null(rownames(x)) & n.rows > 1)\n        return(FALSE)\n    isNumericOrInteger(x)\n}\n\n#' @export\nAsChartMatrix <- function(y,\n                          x = NULL,\n                          weights = NULL,\n                          # subset = NULL,\n                          transpose = FALSE,\n                          date.aggregation = \"m\")  ## can be m(onth), q(uarter), y(ear)\n{\n    # Weight application\n    if (!is.null(weights))\n    {\n        if (!isNumericOrInteger(weights) | !isNumericOrInteger(y) | !equalNumberOfRows(y, weights))\n            stop(\"Either or both of your weights or y inputs is not numeric, or they have mismatched lengths\")\n\n        y <- y * weights\n    }\n\n    if (!is.null(x)) # Aggregating data over X.\n    {\n        if (inherits(x, \"POSIXct\"))\n            x <- textPeriodFromDate(x,date.aggregation)\n\n        if (is.logical(x))\n            stop(paste(\"X cannot be a logical vector\"))\n\n        if (is.list(y))\n            y <- as.data.frame(y)\n\n        if (is.list(x) | is.data.frame(x))\n            stop(paste(\"X cannot take data frames or lists. You have passed a \",class(x), sep=\"\"))\n\n        if (!equalNumberOfRows(y, x))\n            stop(\"The length of all the elements in a list must be the same, but your Y input is \",\n                 numberOfRows(y), \" and your X input is \", numberOfRows(x))\n\n        if (is.factor(y) | is.character(y))\n            return(xtabs(~ x + y))\n\n        y <- aggregate(y, list(x), mean)\n        rownames(y) <- y[, 1]\n        return(t(y[, -1, drop = FALSE]))\n    }\n    else # Manipulating aggregated data\n    {\n        if (is.vector(y))\n            y <- t(as.matrix(y))\n    }\n\n    if(transpose)\n        return(t(y))\n    y\n}\n",
    "created" : 1461281620805.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1944784680",
    "id" : "F86DD580",
    "lastKnownWriteTime" : 1461637434,
    "last_content_update" : 1461649582615,
    "path" : "~/GitHub/flipStandardCharts/R/aschartmatrix.R",
    "project_path" : "R/aschartmatrix.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}