{
    "collab_server" : "",
    "contents" : "context(\"AsChartMatrix\")\n#  rm(list=ls())\n\nx.data = c(\"A\",\"B\",\"B\",\"C\",\"C\")\ny.data = c(0, 0, 0, 0, 0)\nvar1 <- c(1,2,3,4,5)\nvar2 <- c(5,4,3,2,1)\nvar3 <- c(3,3,3,3,3)\nalpha.five <- LETTERS[1:5]\nlogic.vector <- c(TRUE, FALSE, TRUE, TRUE, FALSE)\nlogic.vector.named <- c(A = TRUE, B = FALSE, C = TRUE, D = TRUE, E = FALSE)\nnamed.vector.a <- c(\"A\" = 1, \"B\" = 2, \"C\" = 3)\nnamed.vector.b <- c(\"D\" = 3, \"E\" = 2, \"F\" = 1)\nfactor.a <- factor(x.data)\nfactor.b <- factor(y.data)\nx.dates <- c(1450236400000,1450236400000,1450332800000,1460332800000,1460419200000)\nx.dates <- as.POSIXct(x.dates/1000, origin = \"1970-01-01\")\n\n\n##### GOOD CASES ######\ntest_that(\"A named vector becomes a ChartMatrix\", {\n    X = c(\"A\" = 1, \"B\" = 2, \"C\" = 3)\n    my.chart.matrix <- AsChartMatrix(X)\n    expect_true(IsChartMatrix(my.chart.matrix, 1, 3))\n})\n\ntest_that(\"A single column table becomes a chart matrix\", {\n    Y <- table(x.data, y.data)\n    colnames(Y) <- \"Series 1\"\n\n    my.chart.matrix <- AsChartMatrix(Y)\n    expect_true(IsChartMatrix(my.chart.matrix, 3, 1))\n})\n\ntest_that(\"A numeric matrix with one column becomes a chart matrix\", {\n    Y <- matrix(1:3, ncol = 1, dimnames = list(x = LETTERS[1:3], series = \"Series 1\"))\n\n    my.chart.matrix <- AsChartMatrix(Y)\n    expect_true(IsChartMatrix(my.chart.matrix, 3, 1))\n})\n\ntest_that(\"A table with one row becomes a chart matrix\", {\n    Y <- table(y.data, x.data)\n    rownames(Y) <- \"Series 1\"\n\n    my.chart.matrix <- AsChartMatrix(Y)\n    expect_true(IsChartMatrix(my.chart.matrix, 1, 3))\n})\n\ntest_that(\"One numeric or integer vector and one character vector become a chart matrix\", {\n    my.chart.matrix <- AsChartMatrix(y.data, x.data)\n    expect_true(IsChartMatrix(my.chart.matrix, 1, 3))\n})\n\ntest_that(\"One numeric or integer vector and one factor vector become a chart matrix\", {\n    my.chart.matrix <- AsChartMatrix(y.data, factor(x.data))\n    expect_true(IsChartMatrix(my.chart.matrix, 1, 3))\n})\n\ntest_that(\"One numeric or integer vector and one ordered factor vector become a chart matrix\", {\n    my.chart.matrix <- AsChartMatrix(y.data, as.ordered(x.data))\n    expect_true(IsChartMatrix(my.chart.matrix, 1, 3))\n})\n\ntest_that(\"One or more numeric or integer vector(s) in a list and one character vector become a chart matrix\", {\n    Y <- list(A = var1, B = var2, C = var3)\n    X <- alpha.five\n\n    my.chart.matrix <- AsChartMatrix(Y, alpha.five)\n    expect_true(IsChartMatrix(my.chart.matrix, 3, 5))\n})\n\ntest_that(\"One or more numeric or integer vector(s) in a data frame and one character vector become a chart matrix\", {\n    Y <- cbind(var1, var2, var3)\n    X <- alpha.five\n\n    my.chart.matrix <- AsChartMatrix(Y, alpha.five)\n    expect_true(IsChartMatrix(my.chart.matrix, 3, 5))\n})\n\ntest_that(\"One or more factors with the same levels in a data frame become a chart matrix\", {\n    my.chart.matrix <- AsChartMatrix(factor.a, factor.a)\n    expect_true(IsChartMatrix(my.chart.matrix, 3, 3))\n})\n\ntest_that(\"One numeric or integer variable and one date variable become a chart matrix\", {\n    my.chart.matrix <- AsChartMatrix(var2, x.dates)\n    expect_true(IsChartMatrix(my.chart.matrix, nrow(my.chart.matrix), ncol(my.chart.matrix)))\n})\n\ntest_that(\"A numeric weight vector applied over integer Y before aggregation\", {\n    my.chart.matrix <- AsChartMatrix(y = var3, x.data, weights = var1)\n    expect_true(IsChartMatrix(my.chart.matrix, 1, 3))\n})\n\n## What about lists of weights to be passed over a list of Y-vectors?  If, e.g. each entity in the Y-list\n## contained values that should be weighted differently?\n\n\n\n##### BAD CASES ######\n\n## Y bad cases are:\ntest_that(\"Y cannot take an unnamed numeric vector without an X input\", {\n    my.chart.matrix <- AsChartMatrix(y.data)\n    expect_false(IsChartMatrix(my.chart.matrix, 1, 5))\n})\n\ntest_that(\"Y cannot take an unnamed logic vector regardless of X-value\", {\n    my.chart.matrix <- AsChartMatrix(logic.vector)\n    expect_false(IsChartMatrix(my.chart.matrix, 1, 5))\n})\n\ntest_that(\"Y cannot take a named logic vector\", {\n    my.chart.matrix <- AsChartMatrix(logic.vector.named)\n    expect_error(IsChartMatrix(my.chart.matrix, 1, 5))\n})\n\ntest_that(\"Y cannot take a list of logic vectors (unnamed)\", {\n    Y <- list(logic.vector, logic.vector, logic.vector)\n\n    my.chart.matrix <- AsChartMatrix(Y)\n    expect_false(IsChartMatrix(my.chart.matrix, 1, 3))\n})\n\ntest_that(\"Y cannot take a list of logic vectors (named)\", {\n    Y <- list(logic.vector.named, logic.vector.named, logic.vector.named)\n\n    my.chart.matrix <- AsChartMatrix(Y)\n    expect_false(IsChartMatrix(my.chart.matrix, 1, 3))\n})\n\ntest_that(\"Y cannot take a data frame of logic vectors (unnamed)\", {\n    Y <- data.frame(cbind(logic.vector, logic.vector, logic.vector))\n\n    my.chart.matrix <- AsChartMatrix(Y)\n    expect_error(IsChartMatrix(my.chart.matrix, 5, 3))\n})\n\ntest_that(\"Y cannot take a data frame of logic vectors (named)\", {\n    Y <- data.frame(cbind(logic.vector.named, logic.vector.named, logic.vector.named))\n\n    my.chart.matrix <- AsChartMatrix(Y)\n    expect_error(IsChartMatrix(my.chart.matrix, 5, 3))\n})\n\ntest_that(\"Y cannot take a list of differently named vectors\", {\n    Y <- list(named.vector.a, named.vector.b)\n\n    my.chart.matrix <- AsChartMatrix(Y)\n    expect_false(IsChartMatrix(my.chart.matrix, 1, 2))\n})\n\ntest_that(\"Y cannot take a data frame of differently named vectors\", {\n    Y <- data.frame(cbind(named.vector.a, named.vector.b))\n\n    my.chart.matrix <- AsChartMatrix(Y)\n    expect_error(IsChartMatrix(my.chart.matrix, 3, 2))\n})\n\ntest_that(\"Y cannot take a list of character and integer vectors\", {\n    Y <- list(var1, x.data)\n\n    my.chart.matrix <- AsChartMatrix(Y)\n    expect_false(IsChartMatrix(my.chart.matrix, 1, 2))\n})\n\ntest_that(\"Y cannot take a data frame of mixed character and integer vectors\", {\n    Y <- cbind(var1, x.data)\n\n    my.chart.matrix <- AsChartMatrix(Y)\n    expect_false(IsChartMatrix(my.chart.matrix, 5, 2))\n})\n\ntest_that(\"Y cannot take a list of multiple factors\", {\n    Y <- list(factor.a, factor.b)\n\n    my.chart.matrix <- AsChartMatrix(Y)\n    expect_false(IsChartMatrix(my.chart.matrix, 1, 2))\n})\n\ntest_that(\"Y cannot take a data frame of multiple factors\", {\n    Y <- data.frame(factor.a, factor.b)\n\n    my.chart.matrix <- AsChartMatrix(Y)\n    expect_error(IsChartMatrix(my.chart.matrix, 5, 2))\n})\n\ntest_that(\"Y cannot take a list of mixed integer vectors and factors\", {\n    Y <- list(factor.a, y.data)\n\n    my.chart.matrix <- AsChartMatrix(Y)\n    expect_false(IsChartMatrix(my.chart.matrix, 1, 2))\n})\n\ntest_that(\"Y cannot take a list of mixed character vectors and factors\", {\n    Y <- list(factor.a, x.data)\n\n    my.chart.matrix <- AsChartMatrix(Y)\n    expect_false(IsChartMatrix(my.chart.matrix, 1, 2))\n})\n\ntest_that(\"Y cannot take a data frame of mixed integer vectors and factors\", {\n    Y <- data.frame(cbind(factor.a, y.data))\n\n    my.chart.matrix <- AsChartMatrix(Y)\n    expect_error(IsChartMatrix(my.chart.matrix, 5, 2))\n})\n\ntest_that(\"Y cannot take a data frame of mixed integer vectors and factors\", {\n    Y <- data.frame(cbind(factor.a, x.data))\n\n    my.chart.matrix <- AsChartMatrix(Y)\n    expect_error(IsChartMatrix(my.chart.matrix, 5, 2))\n})\n\ntest_that(\"Y cannot take a character matrix\", {\n    Y <- matrix(LETTERS[1:3])\n\n    my.chart.matrix <- AsChartMatrix(Y)\n    expect_false(IsChartMatrix(my.chart.matrix, 3, 1))\n})\n\ntest_that(\"Y cannot take a logic matrix\", {\n    Y <- matrix(rep(c(TRUE,FALSE),3))\n\n    my.chart.matrix <- AsChartMatrix(Y)\n    expect_false(IsChartMatrix(my.chart.matrix, 6, 1))\n})\n\ntest_that(\"Y cannot take a character vector\", {\n    Y <- LETTERS[1:5]\n\n    my.chart.matrix <- AsChartMatrix(Y)\n    expect_false(IsChartMatrix(my.chart.matrix, 1, 5))\n})\n\ntest_that(\"Y cannot take a list of multiple character vectors\", {\n    Y <- list(LETTERS[1:5], LETTERS[6:10], LETTERS[11:15])\n\n    my.chart.matrix <- AsChartMatrix(Y)\n    expect_false(IsChartMatrix(my.chart.matrix, 1, 3))\n})\n\ntest_that(\"Y cannot take a data frame of multiple character vectors\", {\n    Y <- data.frame(cbind(LETTERS[1:5], LETTERS[6:10], LETTERS[11:15]))\n\n    my.chart.matrix <- AsChartMatrix(Y)\n    expect_error(IsChartMatrix(my.chart.matrix, 5, 3))\n})\n\n## X bad cases are:\ntest_that(\"X cannot take a logic vector\", {\n    expect_error(AsChartMatrix(var1, logic.vector))\n})\n\ntest_that(\"X cannot take a data frame\", {\n    X <- data.frame(cbind(var1, var2, var3))\n\n    expect_error(AsChartMatrix(var1, X))\n})\n\ntest_that(\"X cannot take a list\", {\n    X <- list(var1, var2, var3)\n\n    expect_error(AsChartMatrix(var1, X))\n})\n\n## Bad weights\ntest_that(\"A weight cannot be logical\", {\n    expect_error(AsChartMatrix(y = var3, x.data, weights = logic.vector))\n})\n\ntest_that(\"A weight cannot be characters\", {\n    expect_error(AsChartMatrix(y = var3, x.data, weights = alpha.five))\n})\n\ntest_that(\"A weight cannot be a factor\", {\n    expect_error(AsChartMatrix(y = var3, x.data, weights = factor.a))\n})\n\ntest_that(\"A weight cannot be a date\", {\n    expect_error(AsChartMatrix(y = var3, x.data, weights = x.dates))\n})\n",
    "created" : 1461283096531.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4264661370",
    "id" : "520C74E5",
    "lastKnownWriteTime" : 1461641077,
    "last_content_update" : 1461641077863,
    "path" : "~/GitHub/flipStandardCharts/tests/testthat/test-aschartmatrix.R",
    "project_path" : "tests/testthat/test-aschartmatrix.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}