{
    "collab_server" : "",
    "contents" : "# 'AsChartMatrix' checks if data is in the appropriate format and attempts to coerce it to the appropriate\n# format if so required.\n\n# A 'ChartMatrix' is/has\n# - A 'matrix' of type 'integer' or 'numeric'\n# - Columns represent the X-axis\n# - Column names\n# - Row names if there are more than one rows\n\n\n\nisNumericOrInteger <- function(y)\n{\n    if (!is.integer(y) && !is.numeric(y))\n    {\n        vector.class <- class(y)\n        vector.mode <- mode(y)\n        stop(paste(\"Vectors passed to the y-parameter must be of the mode numeric or integer.  The vector passed is a\",vector.class,\"of mode: \",vector.mode))\n    }\n    TRUE\n}\n\nnumberOfRows <- function(x)\n{\n    if (is.vector(x) | is.factor(x))\n        return(length(x))\n    nrow(x)\n}\n\nequalNumberOfRows <- function(y, x) {numberOfRows(y) == numberOfRows(x)}\n\n#' @export\nIsChartMatrix <- function(x, n.rows, n.columns)\n{\n    if (nrow(x) != n.rows)\n        return(FALSE)\n    if (ncol(x) != n.columns)\n        return(FALSE)\n    if (is.null(colnames(x)))\n        return(FALSE)\n    if (is.null(rownames(x)) & n.rows > 1)\n        return(FALSE)\n    isNumericOrInteger(x)\n}\n\n#' @export\nAsChartMatrix <- function(y,\n                          x = NULL,\n                          # weights = NULL,\n                          # subset = NULL,\n                          transpose = FALSE)\n{\n    if (!is.null(x)) # Aggregating data over X.\n    {\n        if (is.list(y))\n            y <- as.data.frame(y)\n\n        if (!equalNumberOfRows(y, x))\n            stop(\"The length of all the elements in a list must be the same, but your Y input is \",\n                 numberOfRows(y), \" and your X input is \", numberOfRows(x))\n\n        if (is.factor(y) | is.character(y))\n            return(xtabs(~ x + y))\n\n        y <- aggregate(y, list(x), mean)\n        rownames(y) <- y[, 1]\n        return(t(y[, -1, drop = FALSE]))\n    }\n    else # Manipulating aggregated data\n    {\n        if (is.vector(y))\n            y <- t(as.matrix(y))\n    }\n    if(transpose)\n        return(t(y))\n    y\n}\n\n\n\n\n\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#     # 1. Work out what data format y is.\n#     ## Is y a named vector?\n#     if (is.vector(y) && is.null(names(y)) && !is.list(y))\n#     {\n#         data.type <- \"Named vector\"\n#         y.length <- length(y)\n#     }\n#\n#     ## Is y an unnamed vector?\n#     # if (is.vector(y) && length(names(y)) == 0) data.type <- \"Unnamed vector\"\n#\n#     ## Is y a table with one (or more) rows?  Well, if it's a table, then it's a df or a matrix...\n#     if (is.data.frame(y))\n#     {\n#         data.type <- \"Data frame\"\n#         y.length <- nrows(y)\n#     }\n#\n#     if (is.matrix(y))\n#     {\n#         data.type <- \"Matrix\"\n#         y.length <- nrows(y)\n#     }\n#\n#     ## Is y a list?\n#     if (is.list(y) && !is.data.frame(y))\n#     {\n#         data.type <- \"List\"\n#         y.length <- length(y[[1]])\n#     }\n#\n#     ## Is y a factor?\n#     if (is.factor(y))\n#     {\n#         data.type <- \"Factor\"\n#         acceptable.input <- TRUE\n#         y.length <- length(y)\n#     }\n#\n#     # 2. Check for numeric and integer types in vectors, matrices, data frames and lists.\n#     ## If y is a vector, then make sure it is either an integer or numeric vector\n#     if (data.type == \"Named vector\" || data.type == \"Matrix\")\n#     {\n#\n#     }\n#\n#     # 3. If it's a data frame or a list then all columns/list elements must be either integer or numeric\n#     if (data.type == \"Data frame\" || data.type == \"List\")\n#     {\n#         temp.list.element.length <- integer()\n#         for (i in 1:length(y))\n#         {\n#             if (data.type == \"List\") temp.mode <- mode(y[[i]])\n#             # Store lengths of list elements\n#             temp.list.element.length <- c(temp.list.element.length, length(y[[i]]))\n#\n#             if (data.type == \"Data frame\") temp.mode <- mode(y[,i])\n#\n#             if (temp.mode != \"numeric\" && temp.mode != \"integer\")\n#             {\n#                 stop(\"List and data frame elements must all be integer or numeric vectors.\")\n#             }\n#         }\n#         # If the list elements have variable lengths, then stop.\n#         if (length(unique(temp.list.element.length) != 1))\n#         {\n#             stop(\"The length of all the elements in a list must be the same.\")\n#         }\n#         acceptable.input <- TRUE\n#     }\n#\n#     # A. Check if there is an x.  If there isn't, go to 6(?), else 8.\n#     if (x != NULL) x.length <- length(x)\n#\n#\n#     # 4. Check what data type x is.  Can be date, character, (Factor?  If it's numeric factor???); what if it's people's age? 0 to 100?\n#\n#     # 5. Check length of x vs. y\n#\n#     # 6. Check length of weights vs x/y\n#\n#     # 7. If tabluated data, would we weight it?  Else weight raw data.\n#\n#     # 8. Tabulate data that isn't already in a table (vectors, factors, vectors in lists)\n#\n#     # 9. How do we identify if a table needs to be transposed or not?\n#\n#     # 10. Transpose tables that need to be transposed\n#\n#     # 11. Double-check that our tables are matrices with named rows and columns.\n#\n#     # 12. Return the matrix to AreaCharts()\n#\n#     return(data.type)\n# }\n",
    "created" : 1461281620805.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "351485068",
    "id" : "F86DD580",
    "lastKnownWriteTime" : 1461310461,
    "last_content_update" : 1461310461191,
    "path" : "~/GitHub/flipStandardCharts/R/aschartmatrix.R",
    "project_path" : "R/aschartmatrix.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}