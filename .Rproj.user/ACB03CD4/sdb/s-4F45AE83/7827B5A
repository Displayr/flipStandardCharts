{
    "collab_server" : "",
    "contents" : "#' Generates an interactive area chart based on the plotly library.\n#'\n#' \\code{StandardChart} generates standard charts from plotly library.\n#'\n#' @param y A vector, matrix, list of vectors, data frame, or table.\n#' @param x A vector over which y will be aggregated. Must have the same\n#' number of elements as y.\n#' @param transpose Logical; should the final output be transposed?\n#' @param aggregate.period Character; can be \"month\", \"quarter\", \"year\".\n#' Only relevant when x is a vector of mode date.\n#' @param y.labels Character vector, overrides chart matrix row names.\n#' @param y.values Integer vector, optiona, for manually specifying the points\n#' along the y-axis where the y.labels should appear.\n#' @param x.labels Character vector, overrides chart matrix column names.\n#' @param x.values Integer vector, optiona, for manually specifying the points\n#' along the x-axis where the x.labels should appear.\n#' @param type Character; type of chart. Can be \"Area\", \"Stacked Area\",\n#' or \"100\\% Stacked Area\".\n#' @param title Character; chart title.\n#' @param title.font.family Character; title font family.  Can be \"Arial\n#' Black\", \"Arial\", \"Comic Sans MS\", \"Courier New\", \"Georgia\", \"Impact\",\n#' \"Lucida Console\", \"Lucida Sans Unicode\", \"Marlett\", \"Symbol\", \"Tahoma\",\n#' \"Times New Roman\", \"Trebuchet MS\", \"Verdana\", \"Webdings\"\n#' @param title.font.color Title font color as a named color in character\n#' format (e.g. \"black\") or an rgb value (e.g. rgb(0, 0, 0, maxColorValue = 255)).\n#' @param title.font.size Title font size; default = 10.\n#' @param colors Vector of colors in RGB format.\n#' @param transparency Transparency of area fill colors as an alpha value\n#' (0 to 1).\n#' @param chart.fill.color Chart (borders around plot) background color as\n#' a named color in character format (e.g. \"black\") or an rgb value (e.g.\n#' rgb(0, 0, 0, maxColorValue = 255)).\n#' @param chart.fill.transparency Chart (borders around plot) background\n#' transparency as an alpha value (0 to 1).\n#' @param plot.fill.color Plot (the plot area proper) background color as\n#' a named color in character format (e.g. \"black\") or an rgb value (e.g.\n#' rgb(0, 0, 0, maxColorValue = 255)).\n#' @param plot.fill.transparency Plot (the plot area proper) background\n#' transparency as an alpha value (0 to 1).\n#' @param legend.show Logical; show the legend.\n#' @param legend.fill Legend fill color as a named color in character format\n#' (e.g. \"black\") or an rgb value (e.g. rgb(0, 0, 0, maxColorValue = 255)).\n#' @param legend.border.color Legend border color as a named color in character\n#' format (e.g. \"black\") or an rgb value (e.g. rgb(0, 0, 0, maxColorValue = 255)).\n#' @param legend.border.line.width Integer; width in pixels of the border\n#' around the legend.  0 = no border.\n#' @param legend.font.color Legend font color as a named color in character\n#' format (e.g. \"black\") or an rgb value (e.g. rgb(0, 0, 0, maxColorValue = 255)).\n#' @param legend.font.family Character; legend font family.\n#' @param legend.font.size Integer; legend font size.\n#' @param legend.position Where the legend will be placed; can be \"left\" or\n#' \"right\" of plot.\n#' @param legend.sort.order Character; can be \"normal\" or \"reversed\" (see\n#' also grouping options, currently excluded from this function)\n#' @param margin.top Integer; margin between plot area and the top of the\n#' graphic in pixels\n#' @param margin.bottom Integer; margin between plot area and the top of the\n#' graphic in pixels\n#' @param margin.left Integer; margin between plot area and the top of the\n#' graphic in pixels\n#' @param margin.right Integer; margin between plot area and the top of the\n#' graphic in pixels\n#' @param margin.inner.pad Integer; padding in pixels between plot proper\n#' and axis lines\n#' @param y.title Character, y-axis title\n#' @param y.title.font.color Y-axis title font color as a named color in\n#' character format (e.g. \"black\") or an rgb value (e.g. rgb(0, 0, 0,\n#' max = 255)).\n#' @param y.title.font.family Character; Y-axis title font family\n#' @param y.title.font.size Integer; y-axis title font size\n#' @param y.line.width Integer; y-axis line in pixels, 0 = no line\n#' @param y.line.color Y-axis line color as a named color in character format\n#' (e.g. \"black\") or an rgb value (e.g. rgb(0, 0, 0, maxColorValue = 255)).\n#' @param y.tick.marks Character; whether and where to show tick marks on the\n#' y axis.  Can be \"outside\", \"inside\", \"none\"\n#' @param y.tick.length Integer; length of tick marks in pixels.\n#' @param y.bounds.minimum Integer or NULL; set minimum of range for plotting;\n#' NULL = no manual range set.  Must be less than y.bounds.maximum\n#' @param y.bounds.maximum = Integer or NULL; set maximum of range for\n#' plotting; NULL = no manual range set.  Must be greater than y.bounds.minimum\n#' @param y.bounds.units.major Ingeger or NULL; set tick mark distance in\n#' y-axis units between minimum and maximum for plotting; NULL = no manual\n#' range set.\n#' @param y.zero.line.width Width in pixels of zero line; 0 = no zero line\n#' shown\n#' @param y.zero.line.color Color of horizontal zero (origo) line as a named\n#' color in character format (e.g. \"black\") or an rgb value (e.g.\n#' rgb(0, 0, 0, maxColorValue = 255)).\n#' @param y.position Character; set y-axis position; can be \"left\" or \"right\"\n#' @param y.mirror Logical; mirror y-axis on other side?\n#' @param y.grid.width Integer; width of y-grid lines in pixels; 0 = no line\n#' @param y.grid.color Color of y-grid lines as a named color in character\n#' format (e.g. \"black\") or an rgb value (e.g. rgb(0, 0, 0, maxColorValue = 255)).\n#' @param y.tick.suffix Y-axis tick label suffix\n#' @param y.tick.prefix Y-axis tick label prefix\n#' @param y.tick.decimals Y-axis tick label decimal places\n#' @param y.tick.format.manual Overrides tick.prefix, suffix and decimals;\n#' See https://github.com/mbostock/d3/wiki/Formatting#numbers or\n#' https://docs.python.org/release/3.1.3/library/string.html#formatspec\n#' @param y.hovertext.suffix Y-axis hover text number suffix\n#' @param y.hovertext.prefix Y-axis hover text number prefix\n#' @param y.hovertext.decimals Y-axis hover text decimal places\n#' @param y.hovertext.manual Overrides hovertext.prefix, suffix and decimals;\n#' See https://github.com/mbostock/d3/wiki/Formatting#numbers or\n#' https://docs.python.org/release/3.1.3/library/string.html#formatspec\n#' @param y.tick.angle Integer, y-axis tick label angle in degrees.\n#' 90 = vertical; 0 = horizontal\n#' @param y.tick.font.color Y-axis tick label font color as a named color\n#' in character format (e.g. \"black\") or an rgb value (e.g.\n#' rgb(0, 0, 0, maxColorValue = 255)).\n#' @param y.tick.font.family Character; y-axis tick label font family\n#' @param y.tick.font.size Integer; y-axis tick label font size\n#' @param x.title Character, x-axis title\n#' @param x.title.font.color x-axis title font color as a named color in\n#' character format (e.g. \"black\") or an rgb value (e.g.\n#' rgb(0, 0, 0, maxColorValue = 255)).\n#' @param x.title.font.family Character; x-axis title font family\n#' @param x.title.font.size Integer; x-axis title font size\n#' @param x.line.width Integer; x-axis line in pixels, 0 = no line\n#' @param x.line.color X-axis line color as a named color in character format\n#' (e.g. \"black\") or an rgb value (e.g. rgb(0, 0, 0, maxColorValue = 255)).\n#' @param x.tick.marks Character; whether and where to show tick marks on the\n#' y axis.  Can be \"outside\", \"inside\", \"none\"\n#' @param x.tick.length Integer; length of tick marks in pixels.\n#' @param x.bounds.minimum Integer or NULL; set minimum of range for plotting;\n#' NULL = no manual range set.  Must be less than x.bounds.maximum\n#' @param x.bounds.maximum = Integer or NULL; set maximum of range for\n#' plotting; NULL = no manual range set.  Must be greater than x.bounds.minimum\n#' @param x.bounds.units.major Ingeger or NULL; set tick mark distance in\n#' x-axis units between minimum and maximum for plotting; NULL = no manual\n#' range set.\n#' @param x.number.ticks Integer; number of ticks to show on x-axis.\n#' @param x.zero.line.width Width in pixels of zero line; 0 = no zero line\n#' shown\n#' @param x.zero.line.color Color of horizontal zero (origo) line as a named\n#' color in character format (e.g. \"black\") or an rgb value (e.g.\n#' rgb(0, 0, 0, maxColorValue = 255)).\n#' @param x.position Character; set x-axis position; can be \"left\" or \"right\"\n#' @param x.mirror Logical; mirror x-axis on other side?\n#' @param x.grid.width Integer; width of y-grid lines in pixels; 0 = no line\n#' @param x.grid.color Color of y-grid lines as a named color in character\n#' format (e.g. \"black\") or an rgb value (e.g. rgb(0, 0, 0, maxColorValue = 255)).\n#' @param x.tick.suffix X.axis tick label suffix\n#' @param x.tick.prefix X.axis tick label prefix\n#' @param x.tick.decimals X.axis tick label decimal places\n#' @param x.tick.format.manual Overrides tick.prefix, suffix and decimals;\n#' See https://github.com/mbostock/d3/wiki/Formatting#numbers or\n#' https://docs.px.hon.org/release/3.1.3/librarx.string.html#formatspec\n#' @param x.hovertext.suffix X.axis hover text number suffix\n#' @param x.hovertext.prefix X.axis hover text number prefix\n#' @param x.hovertext.decimals X.axis hover text decimal places\n#' @param x.hovertext.manual Overrides hovertext.prefix, suffix and decimals;\n#' See https://github.com/mbostock/d3/wiki/Formatting#numbers or\n#' https://docs.px.hon.org/release/3.1.3/librarx.string.html#formatspec\n#' @param x.tick.angle Integer, x-axis tick label angle in degrees.\n#' 90 = vertical; 0 = horizontal\n#' @param x.tick.font.color X-axis tick label font color as a named color in\n#' character format (e.g. \"black\") or an rgb value (e.g.\n#' rgb(0, 0, 0, maxColorValue = 255)).\n#' @param x.tick.font.family Character; x-axis tick label font family\n#' @param x.tick.font.size Integer; x-axis tick label font size\n#' @param x.tick.label.autoformat Logical; whether to apply built-in auto-\n#' formatting of long (> 15 characters) text labels on the x-axis\n#' @param series.marker.show Can be \"none\", \"automatic\" or a vector referencing\n#' the plotly symbol dictionary using either numerics or strings.\n#' @param series.marker.color Vector of colors in RGB format to use for the\n#' markers\n#' @param series.marker.transparency Integer; transparency for series markers\n#' as an alpha value (0 to 1)\n#' @param series.marker.size Integer; size in pixels of marker\n#' @param series.marker.border.width Integer; width in pixels of border/line\n#' around series markers; 0 is no line\n#' @param series.marker.border.color Vector of colors in RGB format for\n#' border/line around series markers\n#' @param series.marker.border.transparency Integer; transparency of\n#' border/line around series markers as an alpha value (0 to 1)\n#' @param series.marker.text Logical; whether to include data point with the\n#' markers on line chart series.\n#' @param series.marker.text.position Character; where to place the source data\n#' value in relation to the marker icon.  Can be \"top left\", \"top center\", \"top\n#' right\", \"middle left\", \"middle center\", \"middle right\", \"bottom left\",\n#' \"bottom center\", \"bottom right\"\n#' @param series.marker.text.color Vector of colors in RGB format for source\n#' data label\n#' @param series.marker.text.family Character; the font family of the source\n#' data label\n#' @param series.marker.text.size Integer; font size of the source data label\n#' @param series.marker.text.percent Logical; if the source value should be\n#' multiplied by 100.\n#' @param series.line.width Integer; thickness, in pixels, of the series line\n#' @param series.line.color Vector of colors in RGB format for series the lines\n#' @param series.line.transparency Integer; transparency for series lines as an\n#' alpha value (0 to 1)\n#' @param hover.mode Character or logic; can be FALSE for no hover text, \"x\" to\n#' show all x-values for the hover point, \"y\" to show all y-values for the\n#' hover point, or \"closest\" to show the single, nearest, value.\n#' @param hover.include.source.value Logical; Include source data point value\n#' in the hover text.\n#' @param hover.include.source.value.prefix Character; prefix for source data\n#' point value in hover text.\n#' @param hover.include.source.value.suffix Character; suffix for source data\n#' point value in hover text.\n#' @param hover.include.source.value.percent Logical; multiplies source data\n#' point value by 100.\n#' @param show.modebar Logical; whether to show the zoom menu buttons or not.\n#' @examples\n#' data(\"y.data\")\n#' data(\"x.data\")\n#' StandardChart(y = y.data, x = x.data, type = \"Area\", transpose = TRUE)\n#' @param subtitle.text Character; text string to appear as a sub-title\n#' @param subtitle.border.width Numeric; width in pixels of border around\n#' sub-title.\n#' @param subtitle.border.color Sub-title border color as a named color in\n#' character format (e.g. \"black\") or an rgb value (e.g.\n#' rgb(0, 0, 0, maxColorValue = 255)).\n#' @param subtitle.background.color Sub-title background color as a named\n#' color in character format (e.g. \"black\") or an rgb value (e.g.\n#' rgb(0, 0, 0, maxColorValue = 255)).\n#' @param subtitle.font.family Character; Sub-title font family\n#' @param subtitle.font.size Integer; Sub-title font size\n#' @param subtitle.font.color Sub-title font color as a named color\n#' in character format (e.g. \"black\") or an rgb value (e.g.\n#' rgb(0, 0, 0, maxColorValue = 255)).\n#' @param global.font.family.override Character; font family to override\n#' all occurrences of any font attribute for the chart instead of specifying\n#' font for all font attributes individually\n#' @param global.font.color.override Global font color as a named color\n#' in character format (e.g. \"black\") or an rgb value (e.g.\n#' rgb(0, 0, 0, maxColorValue = 255)).  Will only work if global.font.family.override\n#' is also set.\n#' @param orientation Character; \"v\" or \"h\" for vertical or horizontal bars\n#' @param rows.to.ignore Character; comma separated string of row headings to\n#' exclude from the charting.\n#' @param cols.to.ignore Character; comma separated string of column headings to\n#' exclude from the charting.\n#' @export\nStandardChart <-   function(y,\n                        x = NULL,\n                        # weights = NULL,                                 ## Gets passed to AsChartMatrix <- add to that function first!\n                        # subset = NULL,                                  ## Gets passed to AsChartMatrix <- add to that function first!\n                        transpose = FALSE,                                ## Should the inputs be transposed; TRUE or FALSE\n                        aggregate.period = \"month\",\n                        y.labels = NULL,\n                        y.values = NULL,\n                        x.labels = NULL,\n                        x.values = NULL,\n                        type = \"Area\",\n                        title = \"\",\n                        title.font.family = \"Arial\",\n                        title.font.color = rgb(44, 44, 44, maxColorValue = 255),\n                        title.font.size = 16,\n                        colors = qColors,\n                        transparency = 0.4,\n                        chart.fill.color = rgb(255, 255, 255, maxColorValue = 255),\n                        chart.fill.transparency = 1,\n                        plot.fill.color = rgb(255, 255, 255, maxColorValue = 255),\n                        plot.fill.transparency = 1,\n                        legend.show = TRUE,\n                        legend.fill = rgb(255, 255, 255, maxColorValue = 255),\n                        legend.border.color = rgb(44, 44, 44, maxColorValue = 255),\n                        legend.border.line.width = 0,\n                        legend.font.color = rgb(44, 44, 44, maxColorValue = 255),\n                        legend.font.family = \"Arial\",\n                        legend.font.size = 10,\n                        legend.position = \"right\",\n                        legend.sort.order = \"normal\",\n                        margin.top = 80,\n                        margin.bottom = 80,\n                        margin.left = 80,\n                        margin.right = 80,\n                        margin.inner.pad = 0,\n                        y.title = \"\",\n                        y.title.font.color = rgb(44, 44, 44, maxColorValue = 255),\n                        y.title.font.family = \"Arial\",\n                        y.title.font.size = 12,\n                        y.line.width = 1,\n                        y.line.color = rgb(0, 0, 0, maxColorValue = 255),\n                        y.tick.marks = \"\",\n                        y.tick.length = 5,\n                        y.bounds.minimum = NULL,\n                        y.bounds.maximum = NULL,\n                        y.bounds.units.major = NULL,\n                        y.zero.line.width = 1,\n                        y.zero.line.color = rgb(44, 44, 44, maxColorValue = 255),\n                        y.position = \"left\",\n                        y.mirror = FALSE,\n                        #y.values.reversed = FALSE,                       ## T/F - involves autorange and may be too complicated.\n                        y.grid.width = 1,\n                        y.grid.color = rgb(225, 225, 225, maxColorValue = 255),\n                        y.tick.suffix = \"\",\n                        y.tick.prefix = \"\",\n                        y.tick.decimals = 0,\n                        y.tick.format.manual = \"\",\n                        y.hovertext.suffix = \"\",\n                        y.hovertext.prefix = \"\",\n                        y.hovertext.decimals = 2,\n                        y.hovertext.manual = \"\",\n                        y.tick.angle = 0,\n                        y.tick.font.color = rgb(0, 0, 0, maxColorValue = 255),\n                        y.tick.font.family = \"Arial\",\n                        y.tick.font.size = 10,\n                        x.title = \"\",\n                        x.title.font.color = rgb(44, 44, 44, maxColorValue = 255),\n                        x.title.font.family = \"Arial\",\n                        x.title.font.size = 12,\n                        x.line.width = 1,\n                        x.line.color = rgb(0, 0, 0, maxColorValue = 255),\n                        x.tick.marks = \"\",\n                        x.tick.length = 5,\n                        x.bounds.minimum = NULL,\n                        x.bounds.maximum = NULL,\n                        x.bounds.units.major = NULL,\n                        x.number.ticks = NULL,\n                        x.zero.line.width = 1,\n                        x.zero.line.color = rgb(44, 44, 44, maxColorValue = 255),\n                        x.position = \"bottom\",\n                        x.mirror = FALSE,\n                        #x.values.reversed = FALSE,                       ## T/F - involves autorange and may be too complicated.\n                        x.grid.width = 0,\n                        x.grid.color = rgb(225, 225, 225, maxColorValue = 255),\n                        x.tick.suffix = \"\",\n                        x.tick.prefix = \"\",\n                        x.tick.decimals = 0,\n                        x.tick.format.manual = \"\",\n                        x.hovertext.suffix = \"\",\n                        x.hovertext.prefix = \"\",\n                        x.hovertext.decimals = 2,\n                        x.hovertext.manual = \"\",\n                        x.tick.angle = 0,\n                        x.tick.font.color = rgb(0, 0, 0, maxColorValue = 255),\n                        x.tick.font.family = \"Arial\",\n                        x.tick.font.size = 10,\n                        x.tick.label.autoformat = TRUE,\n                        series.marker.show = \"none\",\n                        series.marker.color = qColors,\n                        series.marker.transparency = 1,\n                        series.marker.size = 6,\n                        series.marker.border.width = 1,\n                        series.marker.border.color = qColors,\n                        series.marker.border.transparency = 1,\n                        series.marker.text = FALSE,\n                        series.marker.text.position = \"top middle\",\n                        series.marker.text.color = rgb(0, 0, 0, maxColorValue = 255),\n                        series.marker.text.family = \"Arial\",\n                        series.marker.text.size = 10,\n                        series.marker.text.percent = FALSE,\n                        series.line.width = 0,\n                        series.line.color = qColors,\n                        series.line.transparency = 1,\n                        hover.mode = \"closest\",\n                        hover.include.source.value = FALSE,\n                        hover.include.source.value.prefix = \"\",\n                        hover.include.source.value.suffix = \"\",\n                        hover.include.source.value.percent = FALSE,\n                        show.modebar = FALSE,\n                        subtitle.text = \"\",\n                        subtitle.border.width = 0,\n                        subtitle.border.color = \"white\",\n                        subtitle.background.color = \"white\",\n                        subtitle.font.family = \"Arial\",\n                        subtitle.font.color = rgb(0, 0, 0, maxColorValue=255),\n                        subtitle.font.size = 10,\n                        global.font.family.override = \"\",\n                        global.font.color.override = rgb(0, 0, 0, maxColorValue=255),\n                        orientation = NULL,\n                        rows.to.ignore = \"\",\n                        cols.to.ignore = \"\"\n)\n{\n    ## Make a chart matrix\n    chart.matrix <- AsChartMatrix(y, x, transpose = transpose, aggregate.period = aggregate.period)\n\n    ## Check that the chart matrix is a success\n    if (!IsChartMatrix(chart.matrix, n.rows = nrow(chart.matrix), n.columns = ncol(chart.matrix)))\n        stop(paste(\"Input data is not in a chart matrix format\"))\n\n    ## Ignore rows or columns\n    if (rows.to.ignore != \"\" | cols.to.ignore != \"\")\n        chart.matrix <- removeRowsAndColumns(chart.matrix, rows.to.ignore, cols.to.ignore)\n\n    ## Set defaults for chart specific items\n    fill.bound <- \"\"\n    legend.group <- \"\"\n\n    ## Settings specific to Area Charts\n    if (type == \"Area\" | type == \"Stacked Area\" | type == \"100% Stacked Area\")\n    {\n        chart.type.outputs <- areaChart(chart.matrix = chart.matrix,\n                                        transparency = transparency,\n                                        type = type,\n                                        y.tick.format.manual = y.tick.format.manual,\n                                        y.tick.suffix = y.tick.suffix,\n                                        y.tick.decimals = y.tick.decimals,\n                                        series.line.width = series.line.width,\n                                        series.marker.show = series.marker.show\n                                        )\n\n        chart.matrix <- chart.type.outputs$chart.matrix\n        fill.bound <- chart.type.outputs$fill.bound\n        legend.group <- chart.type.outputs$legend.group\n        y.tickformat <- chart.type.outputs$y.tickformat\n        series.mode <- chart.type.outputs$series.mode\n        transparency <- chart.type.outputs$transparency\n    }\n\n    ## Settings specific to Line Charts\n    if (type == \"Line\")\n    {\n        chart.type.outputs <- lineChart(chart.matrix = chart.matrix,\n                                        transpose = transpose,\n                                        series.line.width = series.line.width,\n                                        series.marker.show = series.marker.show,\n                                        series.marker.text = series.marker.text)\n\n        series.mode <- chart.type.outputs$series.mode\n        series.line.width <- chart.type.outputs$series.line.width\n        y.tickformat <- \"\"\n        transpose <- chart.type.outputs$transpose\n    }\n\n    ## Settings specific to Column Charts\n    if (type == \"Column\" | type == \"Stacked Column\" | type == \"100% Stacked Column\")\n    {\n        chart.type.outputs <- columnChart(chart.matrix = chart.matrix,\n                                        type = type,\n                                        y.tick.format.manual = y.tick.format.manual,\n                                        y.tick.suffix = y.tick.format.manual,\n                                        y.tick.decimals = y.tick.format.manual\n        )\n\n        chart.matrix <- chart.type.outputs$chart.matrix\n        legend.group <- chart.type.outputs$legend.group\n        y.tickformat <- chart.type.outputs$y.tickformat\n        series.mode <- chart.type.outputs$series.mode\n        orientation <- chart.type.outputs$orientation\n        type <- chart.type.outputs$type\n    }\n\n    ## Settings specific to Bar Charts\n\n    ## Scatterplot / bubbles\n\n    ## ... Any other chart types...\n\n\n\n    ## Common settings across all charts\n\n\n    # Set all fonts to global font override if required\n    if (global.font.family.override != \"\")\n    {\n        title.font.family <- global.font.family.override\n        legend.font.family <- global.font.family.override\n        y.title.font.family <- global.font.family.override\n        y.title.font.family <- global.font.family.override\n        y.tick.font.family <- global.font.family.override\n        x.title.font.family <- global.font.family.override\n        x.tick.font.family <- global.font.family.override\n        series.marker.text.family <- global.font.family.override\n        subtitle.font.family <- global.font.family.override\n\n        title.font.color <- global.font.color.override\n        legend.font.color <- global.font.color.override\n        y.title.font.color <- global.font.color.override\n        y.title.font.color <- global.font.color.override\n        y.tick.font.color <- global.font.color.override\n        x.title.font.color <- global.font.color.override\n        x.tick.font.color <- global.font.color.override\n        series.marker.text.color <- global.font.color.override\n        subtitle.font.color <- global.font.color.override\n    }\n\n    # Sort out the sub-title\n    if (subtitle.text != \"\")\n    {\n        # Allow some extra margin space\n        subtitle.text <- as.vector(subtitle.text)\n\n        if (margin.top < 81)\n            margin.top <- ifelse(length(unlist(regmatches(subtitle.text, gregexpr(\"<br>\", subtitle.text)))) > 1, (margin.top + length(unlist(regmatches(subtitle.text, gregexpr(\"<br>\", subtitle.text)))) * subtitle.font.size), margin.top)\n\n        subtitle <- list(y = 1.15,\n                         x = 0.5,\n                         text = subtitle.text,\n                         xref = \"paper\",\n                         yref = \"paper\",\n                         showarrow = FALSE,\n                         borderwidth = subtitle.border.width,\n                         bordercolor = subtitle.border.color,\n                         bgcolor = subtitle.background.color,\n                         font = list(\n                             color = subtitle.font.color,\n                             size = subtitle.font.size,\n                             family = subtitle.font.family\n                         )\n        )\n    }\n    else\n        subtitle <- list()\n\n    # Create text matrix of source data if required for hover\n    source.matrix <- chart.matrix\n    if (hover.include.source.value.percent | series.marker.text.percent)\n        source.matrix <- source.matrix * 100\n\n    if (hover.include.source.value.percent)\n        source.matrix <- matrix(paste(hover.include.source.value.prefix, \" \", source.matrix, hover.include.source.value.suffix, sep = \"\"), nrow = nrow(chart.matrix), ncol = ncol(chart.matrix))\n\n    ## Get axes labels from the matrix labels if none manually specified\n    if (is.null(x.labels))\n        x.labels <- colnames(chart.matrix)\n\n    if (is.null(y.labels))\n        y.labels <- rownames(chart.matrix)\n\n    ## If no angle set for x.tick.angle and x.labels are > 15 characters,\n    tally <- sapply(x.labels, function(x) nchar(x))\n    if (max(tally) > 15 && x.tick.label.autoformat == TRUE)\n    {\n        x.tick.angle <- 315\n        x.labels <- autoFormatLongLabels(x.labels)\n        if (margin.bottom == 80)\n            margin.bottom <- 100\n    }\n    else if (sum(tally) > 100 && x.tick.label.autoformat == TRUE)\n        x.tick.angle <- 315\n\n    ## Position legend\n    legend.x.anchor <- \"left\"\n    legend.y.anchor <- \"auto\"\n    legend.y <- 1\n    legend.x <- 1.02\n\n    ### If legend on right and there's a y-axis on the right too:\n    y2 = \"\"\n    if (legend.position == \"right\" && (y.mirror == TRUE || y2 != \"\" || y.position == \"right\"))\n        legend.x = 1.15\n\n    ### If legend on the left, and there's no y-axis on the left:\n    if (legend.position == \"left\" && y.position == \"right\" && y.mirror == FALSE && y2 != \"\")\n    {\n        legend.x.anchor <- \"right\"\n        legend.x <- -.02\n    }\n    else if (legend.position == \"left\")\n    {\n        legend.x.anchor <- \"right\"\n        legend.x <- -.15\n        margin.r <- 80\n    }\n\n    ## If line thickness is zero, then we shouldn't show a line; ticks only shown if there's a line (same as Excel)\n    ## Tick labels only shown if there's a line too - makes no sense either.\n    y.showline <- FALSE\n    y.showticklabels <- FALSE\n    y.showticks <- FALSE\n    if (y.line.width >= 1)\n    {\n        y.showline <- TRUE\n        y.showticklabels <- TRUE\n        # Default to outer tick marks if they are to be shown, but have not been specified\n        if (y.tick.marks == \"\")\n        {\n            y.showticks <- TRUE\n            y.tick.marks <- \"outside\"\n        }\n    }\n    else\n        y.tick.marks <- \"\"\n\n    # If specified no tick marks, then make sure they have no tick length, as this overrides showticks.\n    if (y.tick.marks == \"none\" | y.tick.length > 0)\n    {\n        y.showticks <- FALSE\n        y.tick.length <- 0\n    }\n\n    x.showline <- FALSE\n    x.showticklabels <- FALSE\n    x.showticks <- FALSE\n    if (x.line.width >= 1)\n    {\n        x.showline <- TRUE\n        x.showticklabels <- TRUE\n        # Default to outer tick marks if they are to be shown, but have not been specified\n        if (x.tick.marks == \"\")\n        {\n            x.showticks <- TRUE\n            x.tick.marks <- \"outside\"\n        }\n    }\n    else if (x.tick.marks != \"\")\n        x.showticks <- TRUE\n    else\n        x.tick.marks <- \"\"\n\n    # If specified no tick marks, then make sure they have no tick length, as this overrides showticks.\n    if (x.tick.marks == \"none\" | x.tick.length == 0)\n    {\n        x.showticks <- FALSE\n        x.tick.length <- 0\n    }\n\n    ## Set tick and hover formats\n    ifelse((y.tick.format.manual == \"\" && is.null(y.tickformat)), y.tickformat <- paste(\".\", y.tick.decimals, \"f\", sep=\"\"), y.tickformat <- y.tick.format.manual)\n\n    ifelse(x.tick.format.manual == \"\", x.tickformat <- paste(\".\", x.tick.decimals, \"f\", sep=\"\"), x.tickformat <- x.tick.format.manual)\n\n    ifelse(y.hovertext.manual == \"\", y.hoverformat <- paste(\".\", y.hovertext.decimals, \"f\", sep=\"\"), y.hoverformat <- y.hovertext.manual)\n\n    ifelse(x.hovertext.manual == \"\", x.hoverformat <- paste(\".\", x.hovertext.decimals, \"f\", sep=\"\"), x.hoverformat <- x.hovertext.manual)\n\n    ## Resolve numeric tick values based on y.bounds.minimum and y.bounds.maximum, and y.bounds.units.major\n    y.tickmode = \"auto\"\n    y.tickvals = integer()\n    y.ticktext = character()\n    y.range = integer()\n    y.autorange = TRUE\n    y.rangemode = \"tozero\"\n\n    if (is.null(y.bounds.minimum) | is.null(y.bounds.maximum) | is.null(y.bounds.units.major))\n        y.bounds.manual <- FALSE\n    else\n    {\n        y.bounds.manual <- TRUE\n        y.range <- c(y.bounds.minimum, y.bounds.maximum)\n        y.autorange = FALSE\n        y.tickmode <- \"array\"\n        for (a in seq(y.bounds.minimum, y.bounds.maximum, by = y.bounds.units.major))\n        {\n            y.tickvals <- c(y.tickvals, a)\n        }\n\n        if (y.tickformat == \"%\")\n            y.ticktext <- sapply(y.tickvals, function(x) paste(round(x * 100, y.tick.decimals), \"%\", sep = \"\"))\n        else\n            y.ticktext <- sapply(y.tickvals, function(x) paste(round(x, y.tick.decimals)))\n    }\n\n    x.tickmode <- \"auto\"\n    x.tickvals <- integer()\n    x.ticktext <- character()\n    x.range <- integer()\n    x.autorange <- TRUE\n    x.nticks <- length(x.labels)\n\n    if (!is.null(x.bounds.minimum) && !is.null(x.bounds.maximum) && !is.null(x.bounds.units.major))\n    {\n        x.tickmode <- \"array\"\n        x.autorange <- FALSE\n        x.range <- c(x.bounds.minimum, x.bounds.maximum)\n\n        for (a in seq(x.bounds.minimum, x.bounds.maximum, by = x.bounds.units.major))\n        {\n            x.tickvals <- c(x.tickvals, a)\n            x.ticktext <- x.labels[seq(1, length(x.labels), a)]\n        }\n    }\n    else if (!is.null(x.values) && !is.null(x.labels))\n    {\n        x.tickmode <- \"array\"\n        # x.autorange <- TRUE\n        x.tickvals <- x.values\n        x.ticktext <- x.labels\n        # x.range <- c(x.values[1], x.values[ncol(chart.matrix)])\n    }\n    else\n    {\n        x.tickmode <- \"auto\"\n        x.autorange <- TRUE\n        if (is.null(x.number.ticks))\n            x.nticks <- length(x.labels)\n        else\n            x.nticks <- x.number.ticks\n    }\n\n    ## Should we draw a zero line\n    y.zero.line <- FALSE\n    if (y.zero.line.width > 0)\n        y.zero.line <- TRUE\n\n    x.zero.line <- FALSE\n    if (x.zero.line.width > 0)\n        x.zero.line <- TRUE\n\n    ## Mirror settings\n    if (y.mirror == TRUE)\n        y.mirror <- \"allticks\"\n\n    if (x.mirror == TRUE)\n        x.mirror <- \"allticks\"\n\n    ## Show plot grid?\n    y.grid.show <- FALSE\n    if (y.grid.width > 0)\n        y.grid.show <- TRUE\n\n    x.grid.show <- FALSE\n    if (x.grid.width > 0)\n        x.grid.show <- TRUE\n\n    ## Which markers to show?\n    if (series.marker.show == \"automatic\" || series.marker.show == \"none\")\n        series.marker.symbols <- plotlySymbols\n    else if (series.marker.show != \"none\" && series.marker.show != \"automatic\")\n    {\n        if (length(series.marker.show) < 100)\n            series.marker.symbols <- rep(series.marker.show, 100)\n    }\n\n    ## Show source data points in hover text, or along series markers\n    if (series.marker.text)\n        series.mode <- paste(series.mode, \"+text\", sep = \"\")\n\n    if (hover.include.source.value)\n        hoverinfo = \"y+name+text\"\n    else\n        hoverinfo = \"y+name\"\n\n    ## Increase number of colors in color vectors such that a max of 100 are stored, in case insufficient numbers have been specified\n    colors <- rep(colors, 100/length(colors))\n    series.marker.color <- rep(series.marker.color, 100/length(series.marker.color))\n    series.marker.border.color <- rep(series.marker.border.color, 100/length(series.marker.border.color))\n    series.line.color <- rep(series.line.color, 100/length(series.line.color))\n\n    ## Initiate plotly object\n    p <- plotly::plot_ly()\n\n    ## Config options\n    p <- plotly::config(displayModeBar = show.modebar)\n\n    ## Add a trace for each row of data in the matrix\n    for (a in 1:nrow(chart.matrix))\n    {\n        y <- as.numeric(chart.matrix[a, ])\n        x <- as.character(colnames(chart.matrix))\n\n        source.text <- source.matrix[a, ]\n\n        p <- plotly::add_trace(p,\n                               type = type,\n                               x = x,\n                               y = y,\n                               evaluate = TRUE,\n                               orientation = orientation,\n                               fill = fill.bound,\n                               fillcolor = plotly::toRGB(colors[a], alpha = transparency),\n                               line = list(\n                                   width = series.line.width,\n                                   color = plotly::toRGB(series.line.color[a], alpha = series.line.transparency)\n                               ),\n                               name = y.labels[a],\n                               legendgroup = legend.group,\n                               text = source.text,\n                               textposition = series.marker.text.position,\n                               textfont = list(\n                                   family = series.marker.text.family,\n                                   color = plotly::toRGB(series.marker.text.color, alpha = 1),\n                                   size = series.marker.text.size\n                               ),\n                               ## MARKERS\n                               mode = series.mode,\n                               marker = list(\n                                   size = series.marker.size,\n                                   color = plotly::toRGB(series.marker.color[a], alpha = series.marker.transparency),\n                                   symbol = series.marker.symbols[a],\n                                   line = list(\n                                       color = plotly::toRGB(series.marker.border.color[a], alpha = series.marker.border.transparency),\n                                       width = series.marker.border.width\n                                   )\n                               ),\n                               hoverinfo = hoverinfo\n        )\n    }\n\n    ## Set plotly layout styles\n    p <- plotly::layout(\n        title = title,\n        ## LEGEND\n        showlegend = legend.show,\n        legend = list(\n            bgcolor = legend.fill,\n            bordercolor = legend.border.color,\n            borderwidth = legend.border.line.width,\n            font = list(\n                color = legend.font.color,\n                family = legend.font.family,\n                size = legend.font.size\n            ),\n            xanchor = legend.x.anchor,\n            yanchor = legend.y.anchor,\n            y = legend.y,\n            x = legend.x,\n            traceorder = legend.sort.order\n        ),\n        ## Y-AXIS\n        yaxis = list(\n            title = y.title,\n            titlefont = list(\n                color = y.title.font.color,\n                family = y.title.font.family,\n                size = y.title.font.size\n            ),\n            tickfont = list(\n                color = y.tick.font.color,\n                family = y.tick.font.family,\n                size = y.tick.font.size\n            ),\n            showline = y.showline,\n            linecolor = y.line.color,\n            linewidth = y.line.width,\n            tickmode = y.tickmode,\n            tickvals = y.tickvals,\n            ticktext = y.ticktext,\n            showticklabels = y.showticklabels,\n            range = y.range,\n            rangemode = y.rangemode,\n            ticks = y.tick.marks,\n            tickangle = y.tick.angle,\n            ticklen = y.tick.length,\n            tickcolor = y.line.color,\n            zeroline = y.zero.line,\n            zerolinewidth = y.zero.line.width,\n            zerolinecolor = y.zero.line.color,\n            tickformat = y.tickformat,\n            tickprefix = y.tick.prefix,\n            ticksuffix = y.tick.suffix,\n            autorange = y.autorange,\n            side = y.position,\n            mirror = y.mirror,\n            gridwidth = y.grid.width,\n            gridcolor = y.grid.color,\n            showgrid = y.grid.show,\n            hoverformat = y.hoverformat,\n            showexponent = \"all\",\n            showtickprefix = TRUE,\n            showticksuffix = TRUE\n        ),\n        ## X-AXIS\n        xaxis = list(\n            title = x.title,\n            titlefont = list(\n                color = x.title.font.color,\n                family = x.title.font.family,\n                size = x.title.font.size\n            ),\n            tickfont = list(\n                color = x.tick.font.color,\n                family = x.tick.font.family,\n                size = x.tick.font.size\n            ),\n            showline = x.showline,\n            linecolor = x.line.color,\n            linewidth = x.line.width,\n            tickmode = x.tickmode,\n            tickvals = x.tickvals,\n            ticktext = x.ticktext,\n            showticklabels = x.showticklabels,\n            range = x.range,\n            ticks = x.tick.marks,\n            tickangle = x.tick.angle,\n            ticklen = x.tick.length,\n            tickcolor = x.line.color,\n            nticks = x.nticks,\n            zeroline = x.zero.line,\n            zerolinewidth = x.zero.line.width,\n            zerolinecolor = x.zero.line.color,\n            tickformat = x.tickformat,\n            tickprefix = x.tick.prefix,\n            ticksuffix = x.tick.suffix,\n            autorange = x.autorange,\n            side = x.position,\n            mirror = x.mirror,\n            gridwidth = x.grid.width,\n            gridcolor = x.grid.color,\n            showgrid = x.grid.show,\n            hoverformat = x.hoverformat,\n            showexponent = \"all\",\n            showtickprefix = TRUE,\n            showticksuffix = TRUE\n        ),\n        ## MARGINS\n        margin = list(\n            t = margin.top,\n            b = margin.bottom,\n            l = margin.left,\n            r = margin.right,\n            pad = margin.inner.pad\n        ),\n        plot_bgcolor = plotly::toRGB(plot.fill.color, alpha = plot.fill.transparency),\n        paper_bgcolor = plotly::toRGB(chart.fill.color, alpha = chart.fill.transparency),\n        hovermode = hover.mode,\n        font = list(\n            family = title.font.family ,\n            color = title.font.color,\n            size = title.font.size\n        ),\n        annotations = subtitle\n    )\n\n    ## Return the chart\n    p\n}\n\n",
    "created" : 1463095645096.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2882279092",
    "id" : "7827B5A",
    "lastKnownWriteTime" : 1463639511,
    "last_content_update" : 1463639511582,
    "path" : "~/GitHub/flipStandardCharts/R/standardchart.R",
    "project_path" : "R/standardchart.R",
    "properties" : {
        "tempName" : "Untitled2"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}