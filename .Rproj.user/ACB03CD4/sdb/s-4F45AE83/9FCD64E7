{
    "collab_server" : "",
    "contents" : "context(\"columnChart\")\n#  rm(list=ls())\n\nfor (i in 1:length(good.examples))\n{\n    print(StandardChart(y = good.examples[[i]]$Y, x = good.examples[[i]]$X, type = \"Column\", transpose = good.examples[[i]]$transpose, title = names(good.examples)[i]), hover.include.source.value = TRUE)\n\n    # cat(paste(\"Press [enter] to continue (test \", i, \"/\", length(good.examples), \").\", sep = \"\"))\n    # line <- readline()\n}\n\n\n\n\n\n#############################################################################\n#############################################################################\n##                         COLUMN CHART EXAMPLES                           ##\n#############################################################################\n#############################################################################\n\n# ##### BASIC STYLE\n# a.matrix <- rbind(c(0.2,0.3,0.3,0.5,0.3,0.6,0.4,0.8,0.2,0.5,0.1,0.3),c(0.3,0.5,0.1,0.3,0.1,0.2,0.1,0.4,0.1,0.2,0.1,0.4))\n# rownames(a.matrix) <- c(\"Series1\",\"Series2\")\n# colnames(a.matrix) <- c(\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\")\n#\n# myCols <- c(rgb(0,176,240, max=255), rgb(197,90,17, max=255))\n# myLineCols <- c(rgb(31,78,121, max=255), rgb(244, 177, 131, max=255))\n#\n# StandardChart(a.matrix, type = \"Column\",\n#           title.font.size = 12,\n#           transpose = TRUE,\n#           series.marker.color = myLineCols,\n#           series.marker.border.width = 0,\n#           title = \"Column chart - BASIC style\",\n#           y.bounds.minimum = 0,\n#           y.bounds.maximum = 1.01,\n#           y.bounds.units.major = 0.1,\n#           y.tick.format.manual = \"%\",\n#           y.tick.font.color = rgb(88, 88, 88, max = 255),\n#           x.tick.font.color = rgb(88, 88, 88, max = 255),\n#           x.line.color = rgb(188, 188, 188, max = 255),\n#           y.line.color = rgb(188, 188, 188, max = 255))\n\n\n\n# ##### JUNK STYLE\n# a.matrix <- rbind(c(50,70,70,100,80,90,90), c(50,50,30,40,70,70,90), c(30,30,50,70,40,50,50), c(0,10,10,30,20,30,10))\n# colnames(a.matrix) <- c(\"D0\",\"D1\",\"D2\",\"D3\",\"D4\",\"D5\",\"D6\")\n# rownames(a.matrix) <- c(\"pink\",\"green\",\"orange\",\"blue\")\n# markerCols <- c(rgb(245,56,177, max=255),rgb(56,193,55, max=255),rgb(245,163,65, max=255),rgb(61,108,255, max=255))\n#\n# StandardChart(a.matrix,\n#           legend.show = FALSE,\n#           type = \"Area\",\n#           transparency = 0.4,\n#           transpose = TRUE,\n#           colors = rgb(255, 255, 255, max=255),\n#           plot.fill.color = rgb(176, 191, 214, max = 255),\n#           chart.fill.color = rgb(176, 191, 214, max = 255),\n#           series.line.width = 2,\n#           series.line.color = rgb(255, 255, 255, max = 255),\n#           series.marker.color = markerCols,\n#           series.marker.transparency = 0.7,\n#           series.marker.show = c(100),\n#           series.marker.size = 10,\n#           series.marker.border.width = 3,\n#           y.bounds.minimum = 0,\n#           y.bounds.maximum = 100,\n#           y.bounds.units.major = 10,\n#           y.line.width = 2,\n#           y.line.color = rgb(141, 159, 183, max = 255),\n#           y.grid.width = 0,\n#           y.tick.font.color = rgb(141, 159, 183, max = 255),\n#           y.tick.font.size = 14,\n#           y.tick.font.family = \"PT Sans Narrow, sans-serif\",\n#           x.tick.font.color = rgb(255, 255, 255, max = 255),\n#           x.tick.font.size = 20,\n#           x.tick.font.family = \"PT Sans Narrow, sans-serif\")\n#\n# ##### Clean style\n# a.matrix <- rbind(c(0.841470985,0.89120736,0.932039086,0.963558185,0.98544973,0.997494987,0.999573603,0.99166481,0.973847631,0.946300088,0.909297427,0.863209367,0.808496404,0.745705212,0.675463181,0.598472144,0.515501372,0.42737988,0.33498815,0.239249329,0.141120008,0.041580662,0.058374143,0.157745694,0.255541102,0.350783228,0.442520443,0.529836141,0.611857891,0.687766159,0.756802495,0.818277111,0.871575772,0.916165937,0.951602074,0.977530118,0.993691004,0.999923258,0.996164609,0.982452613,0.958924275,0.925814682,0.883454656,0.832267442,0.772764488,0.705540326,0.631266638,0.550685543,0.464602179,0.373876665,0.279415498,0.182162504,0.083089403,0.0168139,0.116549205,0.215119988,0.311541364,0.404849921,0.494113351,0.578439764,0.656986599,0.72896904,0.793667864,0.850436621,0.898708096,0.937999977,0.967919672,0.988168234,0.998543345,0.998941342,0.989358247,0.969889811,0.940730557,0.902171834,0.854598908,0.798487113,0.734397098),\n#                   c(0.540302306,0.453596121,0.362357754,0.267498829,0.169967143,0.070737202,0.029199522,0.128844494,0.227202095,0.323289567,0.416146837,0.504846105,0.588501117,0.666276021,0.737393716,0.801143616,0.856888753,0.904072142,0.942222341,0.970958165,0.989992497,0.99913515,0.998294776,0.98747977,0.966798193,0.936456687,0.896758416,0.848100032,0.790967712,0.725932304,0.653643621,0.574823947,0.490260821,0.400799172,0.30733287,0.210795799,0.112152527,0.012388663,0.087498983,0.186512369,0.283662185,0.377977743,0.468516671,0.554374336,0.634692876,0.708669774,0.775565879,0.834712785,0.885519517,0.927478431,0.960170287,0.983268438,0.996542097,0.999858636,0.993184919,0.976587626,0.950232592,0.914383148,0.86939749,0.8157251,0.753902254,0.684546666,0.608351315,0.526077517,0.438547328,0.346635318,0.251259843,0.153373862,0.053955421,0.046002126,0.145500034,0.243544154,0.339154861,0.431376845,0.519288654,0.602011903,0.678720047),\n#                   c(0.324921345,0.279916494,0.227856881,0.170456593,0.109251961,0.045678943,0.018870567,0.083017584,0.145378206,0.204540087,0.259017159,0.307179239,0.347172513,0.37686789,0.393889282,0.395774144,0.380296607,0.345936803,0.29241662,0.221162939,0.135533951,0.040677919,0.057009965,0.150737164,0.234264983,0.302718644,0.353065915,0.38419087,0.396616833,0.392019506,0.372694029,0.341106472,0.299598458,0.250251887,0.194878007,0.135077103,0.072318523,0.008007389,0.056474473,0.11974729,0.180414543,0.237028067,0.288027375,0.331660601,0.365915574,0.388508069,0.396981824,0.38896283,0.362573713,0.316955771,0.252782003,0.172601307,0.08086104,0.016472917,0.112658058,0.201113541,0.276317022,0.334437658,0.373578553,0.393632114,0.395860367,0.382362426,0.355578701,0.317927724,0.27160674,0.218535104,0.160391304,0.098689763,0.03485583,0.029722376,0.093666196,0.155589031,0.214070037,0.267604404,0.314529716,0.352948003,0.380683664))\n# colnames(a.matrix) <- c(\"Jan-10\",\"Feb-10\",\"Mar-10\",\"Apr-10\",\"May-10\",\"Jun-10\",\"Jul-10\",\"Aug-10\",\"Sep-10\",\"Oct-10\",\"Nov-10\",\"Dec-10\",\"Jan-11\",\"Feb-11\",\"Mar-11\",\"Apr-11\",\"May-11\",\"Jun-11\",\"Jul-11\",\"Aug-11\",\"Sep-11\",\"Oct-11\",\"Nov-11\",\"Dec-11\",\"Jan-12\",\"Feb-12\",\"Mar-12\",\"Apr-12\",\"May-12\",\"Jun-12\",\"Jul-12\",\"Aug-12\",\"Sep-12\",\"Oct-12\",\"Nov-12\",\"Dec-12\",\"Jan-13\",\"Feb-13\",\"Mar-13\",\"Apr-13\",\"May-13\",\"Jun-13\",\"Jul-13\",\"Aug-13\",\"Sep-13\",\"Oct-13\",\"Nov-13\",\"Dec-13\",\"Jan-14\",\"Feb-14\",\"Mar-14\",\"Apr-14\",\"May-14\",\"Jun-14\",\"Jul-14\",\"Aug-14\",\"Sep-14\",\"Oct-14\",\"Nov-14\",\"Dec-14\",\"Jan-15\",\"Feb-15\",\"Mar-15\",\"Apr-15\",\"May-15\",\"Jun-15\",\"Jul-15\",\"Aug-15\",\"Sep-15\",\"Oct-15\",\"Nov-15\",\"Dec-15\",\"Jan-16\",\"Feb-16\",\"Mar-16\",\"Apr-16\",\"May-16\")\n# rownames(a.matrix) <- c(\"Factory A\", \"Factory B\", \"Factory C\")\n# itemCols <- c(rgb(46,117,182, max=255),rgb(248,203,173, max=255),rgb(79,190,70, max=255))\n#\n# StandardChart(a.matrix,\n#           legend.show = TRUE,\n#           type = \"Area\",\n#           transparency = 0.4,\n#           transpose = TRUE,\n#           colors = itemCols,\n#           series.line.width = 0,\n#           x.tick.angle = -45,\n#           # x.bounds.minimum = 0,\n#           # x.bounds.maximum = 1,\n#           # x.bounds.units.major = .1,\n#           y.tick.format.manual = \"%\",\n#           y.hovertext.manual = \"%\",\n#           x.number.ticks = 10,\n#           hover.mode = \"x\")\n#\n# #### 100% Stacked area chart example\n# # Read in data\n# a.matrix <- as.matrix(read.csv(\"C:/R/consumerspending.csv\", header = TRUE, row.names = 1))\n# ## Figure out colours\n# col.scheme <- MakeColorGradient(a.matrix,112,48,160)\n# ## Sort alphabetically descending\n# a.matrix <- AlphabeticRowNames(a.matrix)\n#\n# StandardChart(a.matrix,\n#           legend.show = TRUE,\n#           type = \"100% Stacked Area\",\n#           colors = col.scheme,\n#           transpose = TRUE,\n#           transparency = 1,\n#           legend.sort.order = \"reverse\",\n#           y.position = \"right\",\n#           y.hovertext.manual = \"%\",\n#           y.tick.format.manual = \"%\")\n#\n# # Excel equivalent \"Stacked AC\"\n# a.matrix <- as.matrix(read.csv(\"C:/R/resources.csv\", header = TRUE, row.names = 1))\n#\n# StandardChart(a.matrix,\n#           legend.show = TRUE,\n#           type = \"Stacked Area\",\n#           transpose = TRUE,\n#           transparency = 1,\n#           legend.sort.order = \"reverse\",\n#           hover.mode = \"x\",\n#           y.tick.decimals = 2,\n#           hover.include.source.value = TRUE,\n#           hover.include.source.value.prefix = \"Staff count:\",\n#           x.hovertext.decimals = 0,\n#           y.hovertext.decimals = 0)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#\n# ######################## AS LINE CHARTS\n#\n# ##### BASIC STYLE\n# a.matrix <- rbind(c(0.2,0.3,0.3,0.5,0.3,0.6,0.4,0.8,0.2,0.5,0.1,0.3),c(0.3,0.5,0.1,0.3,0.1,0.2,0.1,0.4,0.1,0.2,0.1,0.4))\n# rownames(a.matrix) <- c(\"Series1\",\"Series2\")\n# colnames(a.matrix) <- c(\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\")\n#\n# myCols <- c(rgb(0,176,240, max=255), rgb(197,90,17, max=255))\n# myLineCols <- c(rgb(31,78,121, max=255),rgb(192,0,0, max=255))\n#\n# StandardChart(a.matrix, type = \"Line\",\n#           transparency = 0.4,\n#           colors = myCols,\n#           y.tick.format = c(\"%\",\"2\"),\n#           series.line.width = 1,\n#           series.line.color = myLineCols,\n#           series.marker.show = \"none\",\n#           y.grid.show = TRUE,\n#           title = \"Area chart - BASIC style\",\n#           y.bounds.manual = TRUE,\n#           y.bounds.minimum = 0,\n#           y.bounds.maximum = 1.01,\n#           y.bounds.units.major = 0.1)\n#\n# ##### JUNK STYLE\n# a.matrix <- rbind(c(50,70,70,100,80,90,90), c(50,50,30,40,70,70,90), c(30,30,50,70,40,50,50), c(0,10,10,30,20,30,10))\n# colnames(a.matrix) <- c(\"D0\",\"D1\",\"D2\",\"D3\",\"D4\",\"D5\",\"D6\")\n# rownames(a.matrix) <- c(\"pink\",\"green\",\"orange\",\"blue\")\n# markerCols <- c(rgb(245,56,177, max=255),rgb(56,193,55, max=255),rgb(245,163,65, max=255),rgb(61,108,255, max=255))\n#\n# StandardChart(a.matrix,\n#           legend.show = FALSE,\n#           type = \"Line\",\n#           transparency = 0.4,\n#           colors = rgb(255, 255, 255, max=255),\n#           plot.background.color = rgb(176, 191, 214, max = 255),\n#           background.color = rgb(176, 191, 214, max = 255),\n#           series.line.width = 2,\n#           series.line.color = markerCols,\n#           series.marker.color = markerCols,\n#           series.marker.transparency = 0.7,\n#           series.marker.show = c(100),\n#           series.marker.size = 10,\n#           series.marker.border.width = 3,\n#           y.bounds.manual = TRUE,\n#           y.bounds.minimum = 0,\n#           y.bounds.maximum = 100,\n#           y.bounds.units.major = 10,\n#           y.line.width = 2,\n#           y.line.color = rgb(141, 159, 183, max = 255),\n#           y.tick.font.color = rgb(141, 159, 183, max = 255),\n#           y.tick.font.size = 14,\n#           y.tick.font.family = \"PT Sans Narrow, sans-serif\",\n#           x.tick.font.color = rgb(255, 255, 255, max = 255),\n#           x.tick.font.size = 20,\n#           x.tick.font.family = \"PT Sans Narrow, sans-serif\")\n#\n# ##### Clean style\n# a.matrix <- rbind(c(0.841470985,0.89120736,0.932039086,0.963558185,0.98544973,0.997494987,0.999573603,0.99166481,0.973847631,0.946300088,0.909297427,0.863209367,0.808496404,0.745705212,0.675463181,0.598472144,0.515501372,0.42737988,0.33498815,0.239249329,0.141120008,0.041580662,0.058374143,0.157745694,0.255541102,0.350783228,0.442520443,0.529836141,0.611857891,0.687766159,0.756802495,0.818277111,0.871575772,0.916165937,0.951602074,0.977530118,0.993691004,0.999923258,0.996164609,0.982452613,0.958924275,0.925814682,0.883454656,0.832267442,0.772764488,0.705540326,0.631266638,0.550685543,0.464602179,0.373876665,0.279415498,0.182162504,0.083089403,0.0168139,0.116549205,0.215119988,0.311541364,0.404849921,0.494113351,0.578439764,0.656986599,0.72896904,0.793667864,0.850436621,0.898708096,0.937999977,0.967919672,0.988168234,0.998543345,0.998941342,0.989358247,0.969889811,0.940730557,0.902171834,0.854598908,0.798487113,0.734397098),\n#                   c(0.540302306,0.453596121,0.362357754,0.267498829,0.169967143,0.070737202,0.029199522,0.128844494,0.227202095,0.323289567,0.416146837,0.504846105,0.588501117,0.666276021,0.737393716,0.801143616,0.856888753,0.904072142,0.942222341,0.970958165,0.989992497,0.99913515,0.998294776,0.98747977,0.966798193,0.936456687,0.896758416,0.848100032,0.790967712,0.725932304,0.653643621,0.574823947,0.490260821,0.400799172,0.30733287,0.210795799,0.112152527,0.012388663,0.087498983,0.186512369,0.283662185,0.377977743,0.468516671,0.554374336,0.634692876,0.708669774,0.775565879,0.834712785,0.885519517,0.927478431,0.960170287,0.983268438,0.996542097,0.999858636,0.993184919,0.976587626,0.950232592,0.914383148,0.86939749,0.8157251,0.753902254,0.684546666,0.608351315,0.526077517,0.438547328,0.346635318,0.251259843,0.153373862,0.053955421,0.046002126,0.145500034,0.243544154,0.339154861,0.431376845,0.519288654,0.602011903,0.678720047),\n#                   c(0.324921345,0.279916494,0.227856881,0.170456593,0.109251961,0.045678943,0.018870567,0.083017584,0.145378206,0.204540087,0.259017159,0.307179239,0.347172513,0.37686789,0.393889282,0.395774144,0.380296607,0.345936803,0.29241662,0.221162939,0.135533951,0.040677919,0.057009965,0.150737164,0.234264983,0.302718644,0.353065915,0.38419087,0.396616833,0.392019506,0.372694029,0.341106472,0.299598458,0.250251887,0.194878007,0.135077103,0.072318523,0.008007389,0.056474473,0.11974729,0.180414543,0.237028067,0.288027375,0.331660601,0.365915574,0.388508069,0.396981824,0.38896283,0.362573713,0.316955771,0.252782003,0.172601307,0.08086104,0.016472917,0.112658058,0.201113541,0.276317022,0.334437658,0.373578553,0.393632114,0.395860367,0.382362426,0.355578701,0.317927724,0.27160674,0.218535104,0.160391304,0.098689763,0.03485583,0.029722376,0.093666196,0.155589031,0.214070037,0.267604404,0.314529716,0.352948003,0.380683664))\n# colnames(a.matrix) <- c(\"Jan-10\",\"Feb-10\",\"Mar-10\",\"Apr-10\",\"May-10\",\"Jun-10\",\"Jul-10\",\"Aug-10\",\"Sep-10\",\"Oct-10\",\"Nov-10\",\"Dec-10\",\"Jan-11\",\"Feb-11\",\"Mar-11\",\"Apr-11\",\"May-11\",\"Jun-11\",\"Jul-11\",\"Aug-11\",\"Sep-11\",\"Oct-11\",\"Nov-11\",\"Dec-11\",\"Jan-12\",\"Feb-12\",\"Mar-12\",\"Apr-12\",\"May-12\",\"Jun-12\",\"Jul-12\",\"Aug-12\",\"Sep-12\",\"Oct-12\",\"Nov-12\",\"Dec-12\",\"Jan-13\",\"Feb-13\",\"Mar-13\",\"Apr-13\",\"May-13\",\"Jun-13\",\"Jul-13\",\"Aug-13\",\"Sep-13\",\"Oct-13\",\"Nov-13\",\"Dec-13\",\"Jan-14\",\"Feb-14\",\"Mar-14\",\"Apr-14\",\"May-14\",\"Jun-14\",\"Jul-14\",\"Aug-14\",\"Sep-14\",\"Oct-14\",\"Nov-14\",\"Dec-14\",\"Jan-15\",\"Feb-15\",\"Mar-15\",\"Apr-15\",\"May-15\",\"Jun-15\",\"Jul-15\",\"Aug-15\",\"Sep-15\",\"Oct-15\",\"Nov-15\",\"Dec-15\",\"Jan-16\",\"Feb-16\",\"Mar-16\",\"Apr-16\",\"May-16\")\n# rownames(a.matrix) <- c(\"Factory 1\", \"Factory 2\", \"Factory 3\")\n# itemCols <- c(rgb(46,117,182, max=255),rgb(248,203,173, max=255),rgb(79,190,70, max=255))\n#\n# StandardChart(a.matrix,\n#           legend.show = TRUE,\n#           type = \"Line\",\n#           transparency = 0.4,\n#           series.line.color = itemCols,\n#           series.line.width = 2,\n#           x.tick.angle = -45,\n#           y.tick.format = c(\"%\",1))\n#\n# ##### 100% Stacked area chart example\n# ## Read in data\n# a.matrix <- as.matrix(read.csv(\"consumerspending.csv\", header = TRUE, row.names = 1))\n# ## Figure out colours\n# col.scheme <- make.color.gradient(a.matrix,112,48,160)\n# ## Sort alphabetically descending\n# a.matrix <- alphabetic.row.names(a.matrix)\n#\n# StandardChart(a.matrix,\n#           legend.show = TRUE,\n#           type = \"100% Stacked Line\",\n#           series.line.color = col.scheme,\n#           series.line.width = 2,\n#           y.tick.format = c(\"%\",1),\n#           legend.sort.order = \"reverse\")\n#\n# ## Excel equivalent \"Stacked AC\"\n# a.matrix <- as.matrix(read.csv(\"resources.csv\", header = TRUE, row.names = 1))\n# a.matrix <- alphabetic.row.names(a.matrix)\n#\n# StandardChart(a.matrix,\n#           legend.show = TRUE,\n#           type = \"Line\",\n#           series.line.width = 2,\n#           y.tick.format = c(\"n\",1),\n#           legend.sort.order = \"reverse\")\n#\n#\n#\n#\n#\n# ######################## AS COLUMN CHARTS\n#\n# ##### BASIC STYLE\n# a.matrix <- rbind(c(0.2,0.3,0.3,0.5,0.3,0.6,0.4,0.8,0.2,0.5,0.1,0.3),c(0.3,0.5,0.1,0.3,0.1,0.2,0.1,0.4,0.1,0.2,0.1,0.4))\n# rownames(a.matrix) <- c(\"Series1\",\"Series2\")\n# colnames(a.matrix) <- c(\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\")\n#\n# myCols <- c(rgb(0,176,240, max=255), rgb(197,90,17, max=255))\n# myLineCols <- c(rgb(31,78,121, max=255),rgb(192,0,0, max=255))\n#\n# StandardChart(a.matrix, type = \"Clustered Column\",\n#           transparency = 0.4,\n#           colors = myCols,\n#           y.tick.format = c(\"%\",\"2\"),\n#           y.grid.show = TRUE,\n#           title = \"Area chart - BASIC style\",\n#           y.bounds.manual = TRUE,\n#           y.bounds.minimum = 0,\n#           y.bounds.maximum = 1.01,\n#           y.bounds.units.major = 0.1)\n#\n# ##### JUNK STYLE\n# a.matrix <- rbind(c(50,70,70,100,80,90,90), c(50,50,30,40,70,70,90), c(30,30,50,70,40,50,50), c(0,10,10,30,20,30,10))\n# colnames(a.matrix) <- c(\"D0\",\"D1\",\"D2\",\"D3\",\"D4\",\"D5\",\"D6\")\n# rownames(a.matrix) <- c(\"pink\",\"green\",\"orange\",\"blue\")\n# markerCols <- c(rgb(245,56,177, max=255),rgb(56,193,55, max=255),rgb(245,163,65, max=255),rgb(61,108,255, max=255))\n#\n# StandardChart(a.matrix,\n#           legend.show = FALSE,\n#           type = \"Clustered Bar\",\n#           transparency = 0.4,\n#           colors = rgb(255, 255, 255, max=255),\n#           plot.background.color = rgb(176, 191, 214, max = 255),\n#           background.color = rgb(176, 191, 214, max = 255),\n#           series.marker.color = markerCols,\n#           series.marker.border.width = 1,\n#           series.marker.border.color = rgb(255, 255, 255, max = 255),\n#           y.line.width = 2,\n#           y.line.color = rgb(141, 159, 183, max = 255),\n#           y.tick.font.color = rgb(141, 159, 183, max = 255),\n#           y.tick.font.size = 14,\n#           y.tick.font.family = \"PT Sans Narrow, sans-serif\",\n#           x.tick.font.color = rgb(255, 255, 255, max = 255),\n#           x.tick.font.size = 20,\n#           x.tick.font.family = \"PT Sans Narrow, sans-serif\")\n#\n# ##### Clean style\n# a.matrix <- rbind(c(0.841470985,0.89120736,0.932039086,0.963558185,0.98544973,0.997494987,0.999573603,0.99166481,0.973847631,0.946300088,0.909297427,0.863209367,0.808496404,0.745705212,0.675463181,0.598472144,0.515501372,0.42737988,0.33498815,0.239249329,0.141120008,0.041580662,0.058374143,0.157745694,0.255541102,0.350783228,0.442520443,0.529836141,0.611857891,0.687766159,0.756802495,0.818277111,0.871575772,0.916165937,0.951602074,0.977530118,0.993691004,0.999923258,0.996164609,0.982452613,0.958924275,0.925814682,0.883454656,0.832267442,0.772764488,0.705540326,0.631266638,0.550685543,0.464602179,0.373876665,0.279415498,0.182162504,0.083089403,0.0168139,0.116549205,0.215119988,0.311541364,0.404849921,0.494113351,0.578439764,0.656986599,0.72896904,0.793667864,0.850436621,0.898708096,0.937999977,0.967919672,0.988168234,0.998543345,0.998941342,0.989358247,0.969889811,0.940730557,0.902171834,0.854598908,0.798487113,0.734397098),\n#                   c(0.540302306,0.453596121,0.362357754,0.267498829,0.169967143,0.070737202,0.029199522,0.128844494,0.227202095,0.323289567,0.416146837,0.504846105,0.588501117,0.666276021,0.737393716,0.801143616,0.856888753,0.904072142,0.942222341,0.970958165,0.989992497,0.99913515,0.998294776,0.98747977,0.966798193,0.936456687,0.896758416,0.848100032,0.790967712,0.725932304,0.653643621,0.574823947,0.490260821,0.400799172,0.30733287,0.210795799,0.112152527,0.012388663,0.087498983,0.186512369,0.283662185,0.377977743,0.468516671,0.554374336,0.634692876,0.708669774,0.775565879,0.834712785,0.885519517,0.927478431,0.960170287,0.983268438,0.996542097,0.999858636,0.993184919,0.976587626,0.950232592,0.914383148,0.86939749,0.8157251,0.753902254,0.684546666,0.608351315,0.526077517,0.438547328,0.346635318,0.251259843,0.153373862,0.053955421,0.046002126,0.145500034,0.243544154,0.339154861,0.431376845,0.519288654,0.602011903,0.678720047),\n#                   c(0.324921345,0.279916494,0.227856881,0.170456593,0.109251961,0.045678943,0.018870567,0.083017584,0.145378206,0.204540087,0.259017159,0.307179239,0.347172513,0.37686789,0.393889282,0.395774144,0.380296607,0.345936803,0.29241662,0.221162939,0.135533951,0.040677919,0.057009965,0.150737164,0.234264983,0.302718644,0.353065915,0.38419087,0.396616833,0.392019506,0.372694029,0.341106472,0.299598458,0.250251887,0.194878007,0.135077103,0.072318523,0.008007389,0.056474473,0.11974729,0.180414543,0.237028067,0.288027375,0.331660601,0.365915574,0.388508069,0.396981824,0.38896283,0.362573713,0.316955771,0.252782003,0.172601307,0.08086104,0.016472917,0.112658058,0.201113541,0.276317022,0.334437658,0.373578553,0.393632114,0.395860367,0.382362426,0.355578701,0.317927724,0.27160674,0.218535104,0.160391304,0.098689763,0.03485583,0.029722376,0.093666196,0.155589031,0.214070037,0.267604404,0.314529716,0.352948003,0.380683664))\n# colnames(a.matrix) <- c(\"Jan-10\",\"Feb-10\",\"Mar-10\",\"Apr-10\",\"May-10\",\"Jun-10\",\"Jul-10\",\"Aug-10\",\"Sep-10\",\"Oct-10\",\"Nov-10\",\"Dec-10\",\"Jan-11\",\"Feb-11\",\"Mar-11\",\"Apr-11\",\"May-11\",\"Jun-11\",\"Jul-11\",\"Aug-11\",\"Sep-11\",\"Oct-11\",\"Nov-11\",\"Dec-11\",\"Jan-12\",\"Feb-12\",\"Mar-12\",\"Apr-12\",\"May-12\",\"Jun-12\",\"Jul-12\",\"Aug-12\",\"Sep-12\",\"Oct-12\",\"Nov-12\",\"Dec-12\",\"Jan-13\",\"Feb-13\",\"Mar-13\",\"Apr-13\",\"May-13\",\"Jun-13\",\"Jul-13\",\"Aug-13\",\"Sep-13\",\"Oct-13\",\"Nov-13\",\"Dec-13\",\"Jan-14\",\"Feb-14\",\"Mar-14\",\"Apr-14\",\"May-14\",\"Jun-14\",\"Jul-14\",\"Aug-14\",\"Sep-14\",\"Oct-14\",\"Nov-14\",\"Dec-14\",\"Jan-15\",\"Feb-15\",\"Mar-15\",\"Apr-15\",\"May-15\",\"Jun-15\",\"Jul-15\",\"Aug-15\",\"Sep-15\",\"Oct-15\",\"Nov-15\",\"Dec-15\",\"Jan-16\",\"Feb-16\",\"Mar-16\",\"Apr-16\",\"May-16\")\n# rownames(a.matrix) <- c(\"Factory 1\", \"Factory 2\", \"Factory 3\")\n# itemCols <- c(rgb(46,117,182, max=255),rgb(248,203,173, max=255),rgb(79,190,70, max=255))\n#\n# StandardChart(a.matrix,\n#           legend.show = TRUE,\n#           type = \"Stacked Column\",\n#           transparency = 0.4,\n#           series.marker.color = itemCols,\n#           x.tick.angle = -45,\n#           y.tick.format = c(\"%\",1))\n#\n# ##### 100% Stacked area chart example\n# ## Read in data\n# a.matrix <- as.matrix(read.csv(\"consumerspending.csv\", header = TRUE, row.names = 1))\n# ## Figure out colours\n# col.scheme <- make.color.gradient(a.matrix,112,48,160)\n# ## Sort alphabetically descending\n# a.matrix <- alphabetic.row.names(a.matrix)\n#\n# StandardChart(a.matrix,\n#           legend.show = TRUE,\n#           type = \"100% Stacked Column\",\n#           series.line.color = col.scheme,\n#           series.line.width = 2,\n#           y.tick.format = c(\"%\",1),\n#           legend.sort.order = \"reverse\")\n#\n# ## Excel equivalent \"Stacked AC\"\n# a.matrix <- as.matrix(read.csv(\"resources.csv\", header = TRUE, row.names = 1))\n# a.matrix <- alphabetic.row.names(a.matrix)\n#\n# StandardChart(a.matrix,\n#           legend.show = TRUE,\n#           type = \"100% Stacked Bar\",\n#           series.line.width = 2,\n#           y.tick.format = c(\"n\",1),\n#           legend.sort.order = \"reverse\")\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n# # ######################## AS LINE CHARTS\n# #\n# # ##### BASIC STYLE\n# # a.matrix <- rbind(c(0.2,0.3,0.3,0.5,0.3,0.6,0.4,0.8,0.2,0.5,0.1,0.3),c(0.3,0.5,0.1,0.3,0.1,0.2,0.1,0.4,0.1,0.2,0.1,0.4))\n# # rownames(a.matrix) <- c(\"Series1\",\"Series2\")\n# # colnames(a.matrix) <- c(\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\")\n# #\n# # myCols <- c(rgb(0,176,240, max=255), rgb(197,90,17, max=255))\n# # myLineCols <- c(rgb(31,78,121, max=255),rgb(192,0,0, max=255))\n# #\n# # StandardChart(a.matrix, type = \"Line\",\n# #           transparency = 0.4,\n# #           colors = myCols,\n# #           y.tick.format = c(\"%\",\"2\"),\n# #           series.line.width = 1,\n# #           series.line.color = myLineCols,\n# #           series.marker.show = \"none\",\n# #           y.grid.show = TRUE,\n# #           title = \"Area chart - BASIC style\",\n# #           y.bounds.manual = TRUE,\n# #           y.bounds.minimum = 0,\n# #           y.bounds.maximum = 1.01,\n# #           y.bounds.units.major = 0.1)\n# #\n# # ##### JUNK STYLE\n# # a.matrix <- rbind(c(50,70,70,100,80,90,90), c(50,50,30,40,70,70,90), c(30,30,50,70,40,50,50), c(0,10,10,30,20,30,10))\n# # colnames(a.matrix) <- c(\"D0\",\"D1\",\"D2\",\"D3\",\"D4\",\"D5\",\"D6\")\n# # rownames(a.matrix) <- c(\"pink\",\"green\",\"orange\",\"blue\")\n# # markerCols <- c(rgb(245,56,177, max=255),rgb(56,193,55, max=255),rgb(245,163,65, max=255),rgb(61,108,255, max=255))\n# #\n# # StandardChart(a.matrix,\n# #           legend.show = FALSE,\n# #           type = \"Line\",\n# #           transparency = 0.4,\n# #           colors = rgb(255, 255, 255, max=255),\n# #           plot.background.color = rgb(176, 191, 214, max = 255),\n# #           background.color = rgb(176, 191, 214, max = 255),\n# #           series.line.width = 2,\n# #           series.line.color = markerCols,\n# #           series.marker.color = markerCols,\n# #           series.marker.transparency = 0.7,\n# #           series.marker.show = c(100),\n# #           series.marker.size = 10,\n# #           series.marker.border.width = 3,\n# #           y.bounds.manual = TRUE,\n# #           y.bounds.minimum = 0,\n# #           y.bounds.maximum = 100,\n# #           y.bounds.units.major = 10,\n# #           y.line.width = 2,\n# #           y.line.color = rgb(141, 159, 183, max = 255),\n# #           y.tick.font.color = rgb(141, 159, 183, max = 255),\n# #           y.tick.font.size = 14,\n# #           y.tick.font.family = \"PT Sans Narrow, sans-serif\",\n# #           x.tick.font.color = rgb(255, 255, 255, max = 255),\n# #           x.tick.font.size = 20,\n# #           x.tick.font.family = \"PT Sans Narrow, sans-serif\")\n# #\n# # ##### Clean style\n# # a.matrix <- rbind(c(0.841470985,0.89120736,0.932039086,0.963558185,0.98544973,0.997494987,0.999573603,0.99166481,0.973847631,0.946300088,0.909297427,0.863209367,0.808496404,0.745705212,0.675463181,0.598472144,0.515501372,0.42737988,0.33498815,0.239249329,0.141120008,0.041580662,0.058374143,0.157745694,0.255541102,0.350783228,0.442520443,0.529836141,0.611857891,0.687766159,0.756802495,0.818277111,0.871575772,0.916165937,0.951602074,0.977530118,0.993691004,0.999923258,0.996164609,0.982452613,0.958924275,0.925814682,0.883454656,0.832267442,0.772764488,0.705540326,0.631266638,0.550685543,0.464602179,0.373876665,0.279415498,0.182162504,0.083089403,0.0168139,0.116549205,0.215119988,0.311541364,0.404849921,0.494113351,0.578439764,0.656986599,0.72896904,0.793667864,0.850436621,0.898708096,0.937999977,0.967919672,0.988168234,0.998543345,0.998941342,0.989358247,0.969889811,0.940730557,0.902171834,0.854598908,0.798487113,0.734397098),\n# #                   c(0.540302306,0.453596121,0.362357754,0.267498829,0.169967143,0.070737202,0.029199522,0.128844494,0.227202095,0.323289567,0.416146837,0.504846105,0.588501117,0.666276021,0.737393716,0.801143616,0.856888753,0.904072142,0.942222341,0.970958165,0.989992497,0.99913515,0.998294776,0.98747977,0.966798193,0.936456687,0.896758416,0.848100032,0.790967712,0.725932304,0.653643621,0.574823947,0.490260821,0.400799172,0.30733287,0.210795799,0.112152527,0.012388663,0.087498983,0.186512369,0.283662185,0.377977743,0.468516671,0.554374336,0.634692876,0.708669774,0.775565879,0.834712785,0.885519517,0.927478431,0.960170287,0.983268438,0.996542097,0.999858636,0.993184919,0.976587626,0.950232592,0.914383148,0.86939749,0.8157251,0.753902254,0.684546666,0.608351315,0.526077517,0.438547328,0.346635318,0.251259843,0.153373862,0.053955421,0.046002126,0.145500034,0.243544154,0.339154861,0.431376845,0.519288654,0.602011903,0.678720047),\n# #                   c(0.324921345,0.279916494,0.227856881,0.170456593,0.109251961,0.045678943,0.018870567,0.083017584,0.145378206,0.204540087,0.259017159,0.307179239,0.347172513,0.37686789,0.393889282,0.395774144,0.380296607,0.345936803,0.29241662,0.221162939,0.135533951,0.040677919,0.057009965,0.150737164,0.234264983,0.302718644,0.353065915,0.38419087,0.396616833,0.392019506,0.372694029,0.341106472,0.299598458,0.250251887,0.194878007,0.135077103,0.072318523,0.008007389,0.056474473,0.11974729,0.180414543,0.237028067,0.288027375,0.331660601,0.365915574,0.388508069,0.396981824,0.38896283,0.362573713,0.316955771,0.252782003,0.172601307,0.08086104,0.016472917,0.112658058,0.201113541,0.276317022,0.334437658,0.373578553,0.393632114,0.395860367,0.382362426,0.355578701,0.317927724,0.27160674,0.218535104,0.160391304,0.098689763,0.03485583,0.029722376,0.093666196,0.155589031,0.214070037,0.267604404,0.314529716,0.352948003,0.380683664))\n# # colnames(a.matrix) <- c(\"Jan-10\",\"Feb-10\",\"Mar-10\",\"Apr-10\",\"May-10\",\"Jun-10\",\"Jul-10\",\"Aug-10\",\"Sep-10\",\"Oct-10\",\"Nov-10\",\"Dec-10\",\"Jan-11\",\"Feb-11\",\"Mar-11\",\"Apr-11\",\"May-11\",\"Jun-11\",\"Jul-11\",\"Aug-11\",\"Sep-11\",\"Oct-11\",\"Nov-11\",\"Dec-11\",\"Jan-12\",\"Feb-12\",\"Mar-12\",\"Apr-12\",\"May-12\",\"Jun-12\",\"Jul-12\",\"Aug-12\",\"Sep-12\",\"Oct-12\",\"Nov-12\",\"Dec-12\",\"Jan-13\",\"Feb-13\",\"Mar-13\",\"Apr-13\",\"May-13\",\"Jun-13\",\"Jul-13\",\"Aug-13\",\"Sep-13\",\"Oct-13\",\"Nov-13\",\"Dec-13\",\"Jan-14\",\"Feb-14\",\"Mar-14\",\"Apr-14\",\"May-14\",\"Jun-14\",\"Jul-14\",\"Aug-14\",\"Sep-14\",\"Oct-14\",\"Nov-14\",\"Dec-14\",\"Jan-15\",\"Feb-15\",\"Mar-15\",\"Apr-15\",\"May-15\",\"Jun-15\",\"Jul-15\",\"Aug-15\",\"Sep-15\",\"Oct-15\",\"Nov-15\",\"Dec-15\",\"Jan-16\",\"Feb-16\",\"Mar-16\",\"Apr-16\",\"May-16\")\n# # rownames(a.matrix) <- c(\"Factory 1\", \"Factory 2\", \"Factory 3\")\n# # itemCols <- c(rgb(46,117,182, max=255),rgb(248,203,173, max=255),rgb(79,190,70, max=255))\n# #\n# # StandardChart(a.matrix,\n# #           legend.show = TRUE,\n# #           type = \"Line\",\n# #           transparency = 0.4,\n# #           series.line.color = itemCols,\n# #           series.line.width = 2,\n# #           x.tick.angle = -45,\n# #           y.tick.format = c(\"%\",1))\n# #\n# # ##### 100% Stacked area chart example\n# # ## Read in data\n# # a.matrix <- as.matrix(read.csv(\"consumerspending.csv\", header = TRUE, row.names = 1))\n# # ## Figure out colours\n# # col.scheme <- make.color.gradient(a.matrix,112,48,160)\n# # ## Sort alphabetically descending\n# # a.matrix <- alphabetic.row.names(a.matrix)\n# #\n# # StandardChart(a.matrix,\n# #           legend.show = TRUE,\n# #           type = \"100% Stacked Line\",\n# #           series.line.color = col.scheme,\n# #           series.line.width = 2,\n# #           y.tick.format = c(\"%\",1),\n# #           legend.sort.order = \"reverse\")\n# #\n# # ## Excel equivalent \"Stacked AC\"\n# # a.matrix <- as.matrix(read.csv(\"resources.csv\", header = TRUE, row.names = 1))\n# # a.matrix <- alphabetic.row.names(a.matrix)\n# #\n# # StandardChart(a.matrix,\n# #           legend.show = TRUE,\n# #           type = \"Line\",\n# #           series.line.width = 2,\n# #           y.tick.format = c(\"n\",1),\n# #           legend.sort.order = \"reverse\")\n# #\n# #\n# #\n# #\n# #\n# # ######################## AS COLUMN CHARTS\n# #\n# # ##### BASIC STYLE\n# # a.matrix <- rbind(c(0.2,0.3,0.3,0.5,0.3,0.6,0.4,0.8,0.2,0.5,0.1,0.3),c(0.3,0.5,0.1,0.3,0.1,0.2,0.1,0.4,0.1,0.2,0.1,0.4))\n# # rownames(a.matrix) <- c(\"Series1\",\"Series2\")\n# # colnames(a.matrix) <- c(\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\")\n# #\n# # myCols <- c(rgb(0,176,240, max=255), rgb(197,90,17, max=255))\n# # myLineCols <- c(rgb(31,78,121, max=255),rgb(192,0,0, max=255))\n# #\n# # StandardChart(a.matrix, type = \"Clustered Column\",\n# #           transparency = 0.4,\n# #           colors = myCols,\n# #           y.tick.format = c(\"%\",\"2\"),\n# #           y.grid.show = TRUE,\n# #           title = \"Area chart - BASIC style\",\n# #           y.bounds.manual = TRUE,\n# #           y.bounds.minimum = 0,\n# #           y.bounds.maximum = 1.01,\n# #           y.bounds.units.major = 0.1)\n# #\n# # ##### JUNK STYLE\n# # a.matrix <- rbind(c(50,70,70,100,80,90,90), c(50,50,30,40,70,70,90), c(30,30,50,70,40,50,50), c(0,10,10,30,20,30,10))\n# # colnames(a.matrix) <- c(\"D0\",\"D1\",\"D2\",\"D3\",\"D4\",\"D5\",\"D6\")\n# # rownames(a.matrix) <- c(\"pink\",\"green\",\"orange\",\"blue\")\n# # markerCols <- c(rgb(245,56,177, max=255),rgb(56,193,55, max=255),rgb(245,163,65, max=255),rgb(61,108,255, max=255))\n# #\n# # StandardChart(a.matrix,\n# #           legend.show = FALSE,\n# #           type = \"Clustered Bar\",\n# #           transparency = 0.4,\n# #           colors = rgb(255, 255, 255, max=255),\n# #           plot.background.color = rgb(176, 191, 214, max = 255),\n# #           background.color = rgb(176, 191, 214, max = 255),\n# #           series.marker.color = markerCols,\n# #           series.marker.border.width = 1,\n# #           series.marker.border.color = rgb(255, 255, 255, max = 255),\n# #           y.line.width = 2,\n# #           y.line.color = rgb(141, 159, 183, max = 255),\n# #           y.tick.font.color = rgb(141, 159, 183, max = 255),\n# #           y.tick.font.size = 14,\n# #           y.tick.font.family = \"PT Sans Narrow, sans-serif\",\n# #           x.tick.font.color = rgb(255, 255, 255, max = 255),\n# #           x.tick.font.size = 20,\n# #           x.tick.font.family = \"PT Sans Narrow, sans-serif\")\n# #\n# # ##### Clean style\n# # a.matrix <- rbind(c(0.841470985,0.89120736,0.932039086,0.963558185,0.98544973,0.997494987,0.999573603,0.99166481,0.973847631,0.946300088,0.909297427,0.863209367,0.808496404,0.745705212,0.675463181,0.598472144,0.515501372,0.42737988,0.33498815,0.239249329,0.141120008,0.041580662,0.058374143,0.157745694,0.255541102,0.350783228,0.442520443,0.529836141,0.611857891,0.687766159,0.756802495,0.818277111,0.871575772,0.916165937,0.951602074,0.977530118,0.993691004,0.999923258,0.996164609,0.982452613,0.958924275,0.925814682,0.883454656,0.832267442,0.772764488,0.705540326,0.631266638,0.550685543,0.464602179,0.373876665,0.279415498,0.182162504,0.083089403,0.0168139,0.116549205,0.215119988,0.311541364,0.404849921,0.494113351,0.578439764,0.656986599,0.72896904,0.793667864,0.850436621,0.898708096,0.937999977,0.967919672,0.988168234,0.998543345,0.998941342,0.989358247,0.969889811,0.940730557,0.902171834,0.854598908,0.798487113,0.734397098),\n# #                   c(0.540302306,0.453596121,0.362357754,0.267498829,0.169967143,0.070737202,0.029199522,0.128844494,0.227202095,0.323289567,0.416146837,0.504846105,0.588501117,0.666276021,0.737393716,0.801143616,0.856888753,0.904072142,0.942222341,0.970958165,0.989992497,0.99913515,0.998294776,0.98747977,0.966798193,0.936456687,0.896758416,0.848100032,0.790967712,0.725932304,0.653643621,0.574823947,0.490260821,0.400799172,0.30733287,0.210795799,0.112152527,0.012388663,0.087498983,0.186512369,0.283662185,0.377977743,0.468516671,0.554374336,0.634692876,0.708669774,0.775565879,0.834712785,0.885519517,0.927478431,0.960170287,0.983268438,0.996542097,0.999858636,0.993184919,0.976587626,0.950232592,0.914383148,0.86939749,0.8157251,0.753902254,0.684546666,0.608351315,0.526077517,0.438547328,0.346635318,0.251259843,0.153373862,0.053955421,0.046002126,0.145500034,0.243544154,0.339154861,0.431376845,0.519288654,0.602011903,0.678720047),\n# #                   c(0.324921345,0.279916494,0.227856881,0.170456593,0.109251961,0.045678943,0.018870567,0.083017584,0.145378206,0.204540087,0.259017159,0.307179239,0.347172513,0.37686789,0.393889282,0.395774144,0.380296607,0.345936803,0.29241662,0.221162939,0.135533951,0.040677919,0.057009965,0.150737164,0.234264983,0.302718644,0.353065915,0.38419087,0.396616833,0.392019506,0.372694029,0.341106472,0.299598458,0.250251887,0.194878007,0.135077103,0.072318523,0.008007389,0.056474473,0.11974729,0.180414543,0.237028067,0.288027375,0.331660601,0.365915574,0.388508069,0.396981824,0.38896283,0.362573713,0.316955771,0.252782003,0.172601307,0.08086104,0.016472917,0.112658058,0.201113541,0.276317022,0.334437658,0.373578553,0.393632114,0.395860367,0.382362426,0.355578701,0.317927724,0.27160674,0.218535104,0.160391304,0.098689763,0.03485583,0.029722376,0.093666196,0.155589031,0.214070037,0.267604404,0.314529716,0.352948003,0.380683664))\n# # colnames(a.matrix) <- c(\"Jan-10\",\"Feb-10\",\"Mar-10\",\"Apr-10\",\"May-10\",\"Jun-10\",\"Jul-10\",\"Aug-10\",\"Sep-10\",\"Oct-10\",\"Nov-10\",\"Dec-10\",\"Jan-11\",\"Feb-11\",\"Mar-11\",\"Apr-11\",\"May-11\",\"Jun-11\",\"Jul-11\",\"Aug-11\",\"Sep-11\",\"Oct-11\",\"Nov-11\",\"Dec-11\",\"Jan-12\",\"Feb-12\",\"Mar-12\",\"Apr-12\",\"May-12\",\"Jun-12\",\"Jul-12\",\"Aug-12\",\"Sep-12\",\"Oct-12\",\"Nov-12\",\"Dec-12\",\"Jan-13\",\"Feb-13\",\"Mar-13\",\"Apr-13\",\"May-13\",\"Jun-13\",\"Jul-13\",\"Aug-13\",\"Sep-13\",\"Oct-13\",\"Nov-13\",\"Dec-13\",\"Jan-14\",\"Feb-14\",\"Mar-14\",\"Apr-14\",\"May-14\",\"Jun-14\",\"Jul-14\",\"Aug-14\",\"Sep-14\",\"Oct-14\",\"Nov-14\",\"Dec-14\",\"Jan-15\",\"Feb-15\",\"Mar-15\",\"Apr-15\",\"May-15\",\"Jun-15\",\"Jul-15\",\"Aug-15\",\"Sep-15\",\"Oct-15\",\"Nov-15\",\"Dec-15\",\"Jan-16\",\"Feb-16\",\"Mar-16\",\"Apr-16\",\"May-16\")\n# # rownames(a.matrix) <- c(\"Factory 1\", \"Factory 2\", \"Factory 3\")\n# # itemCols <- c(rgb(46,117,182, max=255),rgb(248,203,173, max=255),rgb(79,190,70, max=255))\n# #\n# # StandardChart(a.matrix,\n# #           legend.show = TRUE,\n# #           type = \"Stacked Column\",\n# #           transparency = 0.4,\n# #           series.marker.color = itemCols,\n# #           x.tick.angle = -45,\n# #           y.tick.format = c(\"%\",1))\n# #\n# # ##### 100% Stacked area chart example\n# # ## Read in data\n# # a.matrix <- as.matrix(read.csv(\"consumerspending.csv\", header = TRUE, row.names = 1))\n# # ## Figure out colours\n# # col.scheme <- make.color.gradient(a.matrix,112,48,160)\n# # ## Sort alphabetically descending\n# # a.matrix <- alphabetic.row.names(a.matrix)\n# #\n# # StandardChart(a.matrix,\n# #           legend.show = TRUE,\n# #           type = \"100% Stacked Column\",\n# #           series.line.color = col.scheme,\n# #           series.line.width = 2,\n# #           y.tick.format = c(\"%\",1),\n# #           legend.sort.order = \"reverse\")\n# #\n# # ## Excel equivalent \"Stacked AC\"\n# # a.matrix <- as.matrix(read.csv(\"resources.csv\", header = TRUE, row.names = 1))\n# # a.matrix <- alphabetic.row.names(a.matrix)\n# #\n# # StandardChart(a.matrix,\n# #           legend.show = TRUE,\n# #           type = \"100% Stacked Bar\",\n# #           series.line.width = 2,\n# #           y.tick.format = c(\"n\",1),\n# #           legend.sort.order = \"reverse\")\n#\n#\n#\n#\n#\n#\n#\n#\n#\n# #\n# #\n# #\n# # ################## Additional bar and column examples based on other data types.\n# #\n# # ## Unnamed vector to matrix  - Doesn't make sense as an Area Chart...\n# # StandardChart(c(1,2,2,6,4),\n# #           row.labels = c(\"a\",\"b\",\"c\",\"d\",\"e\"),\n# #           legend.show = TRUE,\n# #           type = \"Column\")\n# #\n# # ## Named vector to matrix, unique names   - Also doesn't make sense as an Area Chart...\n# # StandardChart(c(a = 1, b = 2, c = 2, d = 6, e = 4),\n# #           legend.show = TRUE,\n# #           type = \"Column\")\n# #\n# # ## Single factor variable\n# # a <- as.factor(rep(c(1,4,12,5,3),10))\n# # StandardChart(a,\n# #           legend.show = TRUE,\n# #           type = \"Bar\")\n# #\n# # ## List of two factor variables   - Also not a sensible Area Chart...?\n# # b <- as.factor(rep(c(1,4,12,5,3),10))\n# # levels(b) <- c(\"Celery\",\"Apples\",\"Walnuts\",\"Grapes\",\"Mayonnaise\")\n# # factor.list <- list(a, b)\n# # StandardChart(factor.list,\n# #           legend.show = TRUE,\n# #           transparency = 0.4,\n# #           type = \"Stacked Column\")\n# #\n# #\n# #\n# # ################### ALL DATA CONVERSION EXAMPLES\n# #\n# # ## Unnamed vector to matrix\n# # y <- c(1,2,2,6,4)\n# # DataToMatrix(data.input = y,\n# #              row.labels = c(\"a\",\"b\",\"c\",\"d\",\"e\"))\n# #\n# # ############ ERROR - Counts number of named items, not the sums of the named items.\n# # ## Named vector to matrix, non-unique names\n# # x <- c(a = 1, b = 2, c = 2, d = 6, b = 4)\n# # DataToMatrix(data.input = x)\n# #\n# # ## Named vector to matrix, unique names\n# # z <- c(a = 1, b = 2, c = 2, d = 6, e = 4)\n# # DataToMatrix(data.input = z)\n# #\n# # ## Single factor variable\n# # a <- as.factor(rep(c(1,4,12,5,3),10))\n# # levels(a) <- c(\"Celery\",\"Apples\",\"Walnuts\",\"Grapes\",\"Mayonnaise\")\n# # DataToMatrix(data.input = a)\n# #\n# # ## List of two factor variables\n# # b <- as.factor(rep(c(1,4,12,5,3),10))\n# # levels(b) <- c(\"Celery\",\"Apples\",\"Walnuts\",\"Grapes\",\"Mayonnaise\")\n# # factor.list <- list(a, b)\n# # DataToMatrix(data.input = factor.list)\n# #\n# # ## MR set from data frame\n# # df <- as.data.frame(read.csv(\"pastaSaucesFinal.csv\", header = TRUE, row.names = 72))\n# # var.names <- c(\"buy_a\",\"buy_b\",\"buy_c\",\"buy_d\",\"buy_e\",\"buy_f\",\"buy_g\",\"buy_h\",\"buy_i\")\n# # DataToMatrix(data.input = df,\n# #              variable.names.vector = var.names)\n# #\n# # ## MR set from data frame with named rows and columns\n# # row.labels <- c(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\")\n# # column.labels <- c(\"Not selected\",\"Selected\")\n# # DataToMatrix(data.input = df,\n# #              variable.names.vector = var.names,\n# #              row.labels = row.labels,\n# #              column.labels = column.labels)\n# #\n# # ## MR set with categorical data structure (e.g. var1 = [0, 1]; var2 = [0,2] ...)\n# # var.names <- c(\"retail_a\",\t\"retail_b\", \"retail_c\", \"retail_d\", \"retail_e\", \"retail_f\", \"retail_g\")\n# # row.labels <- c(\"A shop\", \"Another shop\", \"My Store\", \"My outlet\", \"A Discount Department Store\", \"Myer\", \"Selfriges\")\n# # column.labels <- c(\"Not visited\", \"Visited\")\n# # DataToMatrix(data.input = df,\n# #              variable.names.vector = var.names,\n# #              row.labels = row.labels,\n# #              column.labels = column.labels)\n# #\n# # ## Pick One grid (no specified labelling)\n# # var.names <- c(\"attr1_a\",\"attr1_b\",\"attr1_c\")\n# # DataToMatrix(data.input = df,\n# #              variable.names.vector = var.names)\n# #\n# # ## Pick One grid (labelled)\n# # row.labels <- c(\"Attribute 1\", \"Attribute 2\", \"Attribute 3\")\n# # column.labels <- c(\"Rated 1\", \"Rated 2\", \"Rated 3\", \"Rated 4\", \"Rated 5\", \"Rated 6\", \"Rated 7\")\n# # DataToMatrix(data.input = df,\n# #              variable.names.vector = var.names,\n# #              row.labels = row.labels,\n# #              column.labels = column.labels)\n",
    "created" : 1462764258183.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3301839200",
    "id" : "9FCD64E7",
    "lastKnownWriteTime" : 1463535336,
    "last_content_update" : 1463535336414,
    "path" : "~/GitHub/flipStandardCharts/tests/testthat/test-columnchart.R",
    "project_path" : "tests/testthat/test-columnchart.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 9,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}