{
    "collab_server" : "",
    "contents" : "context(\"AsChartMatrix\")\n#  rm(list=ls())\n\ndata(\"good.examples\")\ndata(\"bad.examples\")\ndata(\"errorAsChartMatrix.examples\")\ndata(\"errorIsChartMatrix.examples\")\ncounter = 0\nexamples <- list(good = good.examples, bad = bad.examples, error = errorAsChartMatrix.examples, errorA = errorIsChartMatrix.examples)\nfor (example in examples)\n{\n    counter = counter + 1\n    for (i in 1:length(example))\n    {\n        ex = example[[i]]\n        type = names(examples)[counter]\n\n        if (type != \"error\")\n        {\n            test_that(paste(type, names(example)[i], i), {\n                my.chart.matrix <- AsChartMatrix(y = ex$Y, x = ex$X, transpose = ex$transpose)\n                expect_that(IsChartMatrix(my.chart.matrix, ex$n.row, ex$n.columns),\n                            switch(type,\n                                   \"good\" = is_true(),\n                                   \"bad\" = is_false(),\n                                   \"errorA\" = throws_error()))\n            })\n        }\n        else\n        {\n            test_that(paste(type, names(example)[i], i), {\n                expect_that(AsChartMatrix(y = ex$Y, x = ex$X, transpose = ex$transpose), throws_error())\n            })\n        }\n    }\n}\n\n\n# zx = error.examples[[9]]\n# yx <- AsChartMatrix(y = zx$Y, x = zx$X, transpose = zx$transpose)\n# IsChartMatrix(yx, 1, 5)\n\n# data(\"good.examples\")\n# data(\"bad.examples\")\n# data(\"error.examples\")\n# counter = 0\n# examples <- list(good = good.examples, bad = bad.examples, error = error.examples)\n# for (example in examples)\n# {\n#     counter = counter + 1\n#     for (i in 1:length(example))\n#     {\n#         ex = example[[i]]\n#         type = names(examples)[counter]\n#         test_that(paste(type, names(example)[i], i), {\n#             my.chart.matrix <- AsChartMatrix(y = ex$Y, x = ex$X, transpose = ex$transpose)\n#             expect_that(IsChartMatrix(my.chart.matrix, ex$n.row, ex$n.columns),\n#                 switch(type,\n#                        \"good\" = is_true(),\n#                        \"bad\" = is_false(),\n#                        \"error\" = throws_error()))\n#         })\n#     }\n# }\n#\n# zx = error.examples[[1]]\n# yx <- AsChartMatrix(y = zx$Y, x = zx$X, transpose = zx$transpose)\n# IsChartMatrix(yx, 1, 5)\n\n#\n# at(x, is_true()) expect_true(x)\n# expect_that(x, is_false()) expect_false(x)\n# expect_that(x, is_a(y)) expect_is(x, y)\n# expect_that(x, equals(y)) expect_equal(x, y)\n# expect_that(x, is_equivalent_to(y)) expect_equivalent(x, y)\n# expect_that(x, is_identical_to(y)) expect_identical(x, y)\n# expect_that(x, matches(y)) expect_matches(x, y)\n# expect_that(x, prints_text(y)) expect_output(x, y)\n# expect_that(x, shows_message(y)) expect_message(x, y)\n# expect_that(x, gives_warning(y)) expect_warning(x, y)\n# expect_that(x, throws_error(y))\n#\n# data(\"good.examples\")\n# test.AsChartMatrix(good.examples, expect = \"true\")\n# test.AsChartMatrix(bad.examples, expect = \"false\")\n# test.AsChartMatrix(error.examples, expect = \"error\")\n#\n#\n#\n#\n#\n#\n#\n# test.AsChartMatrix <- function(test.list, expect = \"true\")\n# {\n#     item.length <- length(test.list)\n#\n#     for (i in 1:item.length)\n#     {\n#         example <- test.list[[i]]\n#\n#         if (expect == \"true\")\n#         {\n#             test_that(names(test.list)[i], {\n#                 my.chart.matrix <- AsChartMatrix(y = example$Y, x = example$X, transpose = example$transpose)\n#                 expect_true(IsChartMatrix(my.chart.matrix, nrow(my.chart.matrix), ncol(my.chart.matrix)))\n#             })\n#         }\n#         else if (expect == \"false\")\n#         {\n#             test_that(names(test.list)[i], {\n#                 my.chart.matrix <- AsChartMatrix(y = example$Y, x = example$X, transpose = example$transpose)\n#                 expect_false(IsChartMatrix(my.chart.matrix, nrow(my.chart.matrix), ncol(my.chart.matrix)))\n#             })\n#         }\n#         else if (expect == \"error\")\n#         {\n#             test_that(names(test.list)[i], {\n#                 expect_error(AsChartMatrix(y = example$Y, x = example$X, transpose = example$transpose))\n#             })\n#         }\n#     }\n#\n#     return(\"All passed\")\n# }\n#\n\n",
    "created" : 1462767571605.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "16592263",
    "id" : "FCB28E15",
    "lastKnownWriteTime" : 1462515929,
    "last_content_update" : 1462515929,
    "path" : "~/GitHub/flipStandardCharts/tests/testthat/test-aschartmatrix_v2.R",
    "project_path" : "tests/testthat/test-aschartmatrix_v2.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 10,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}