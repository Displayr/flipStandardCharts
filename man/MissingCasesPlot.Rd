% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/missingcasesplot.R
\name{MissingCasesPlot}
\alias{MissingCasesPlot}
\title{MissingCasesPlot}
\usage{
MissingCasesPlot(raw.data, fill.color = "#5C9AD3",
  base.color = "#E6E6E6", base.opacity = 1,
  show.counts.missing = TRUE, show.percentages.missing = FALSE,
  subset = NULL, title = "Missing values by case", subtitle = "",
  footer = "", global.font.family = "Arial",
  global.font.color = "#2C2C2C", data.label.show = FALSE,
  data.label.position = "center",
  data.label.font.family = global.font.family,
  data.label.font.color = global.font.color, data.label.font.size = 10,
  data.label.bg.opacity = 0.5, title.font.family = global.font.family,
  title.font.color = global.font.color, title.font.size = 16,
  subtitle.font.family = global.font.family,
  subtitle.font.color = global.font.color, subtitle.font.size = 12,
  footer.font.family = global.font.family,
  footer.font.color = global.font.color, footer.font.size = 8,
  footer.wrap = TRUE, footer.wrap.nchar = 100,
  x.tick.font.family = global.font.family,
  x.tick.font.color = global.font.color, x.tick.font.size = 11,
  x.tick.label.wrap = NULL, x.tick.label.wrap.nchar = 20,
  x.tick.angle = NULL, y.tick.font.family = global.font.family,
  y.tick.font.color = global.font.color, y.tick.font.size = 10,
  tooltip.show = FALSE, hovertext.font.family = global.font.family,
  hovertext.font.color = "#FFFFFF", hovertext.font.size = 11,
  margin.top = NULL, margin.bottom = NULL, margin.left = NULL,
  margin.right = NULL, font.unit = "px")
}
\arguments{
\item{raw.data}{Matrix or data frame.}

\item{fill.color}{Color to show the missing value.}

\item{base.color}{Background color of chart.}

\item{base.opacity}{Opacity of background color.}

\item{show.counts.missing}{Include the number of cases missing in the variable label.}

\item{show.percentages.missing}{Include the percentage of cases missing in the variable label.}

\item{subset}{Logical vector indicating whether each row of the data frame should be included.
This vector should be the same length as the number of rows in \code{raw.data}. Missing data
with rows where \code{subset} is \code{false} will not be shown.}

\item{title}{Character; chart title.}

\item{subtitle}{Character}

\item{footer}{Character}

\item{global.font.family}{Character; font family for all occurrences of any
font attribute for the chart unless specified individually.}

\item{global.font.color}{Global font color as a named color in character format
(e.g. "black") or an a hex code.}

\item{data.label.show}{Logical; whether to show data labels.}

\item{data.label.position}{One of "center", "above" or "below".}

\item{data.label.font.family}{Character; font family for data label.}

\item{data.label.font.color}{Font color as a named color
in character format (e.g. "black") or an a hex code. This can be a single
color, a vector of colors (1 for each series/column), or a comma separated list
of colors}

\item{data.label.font.size}{Integer; Font size for data label.px.}

\item{data.label.bg.opacity}{Numeric between 0 (tranparent) to 1 (opaque), specifying the opacity of the data label background (grey).}

\item{title.font.family}{Character; title font family. Can be "Arial Black",
"Arial", "Comic Sans MS", "Courier New", "Georgia", "Impact",
"Lucida Console", "Lucida Sans Unicode", "Marlett", "Symbol", "Tahoma",
"Times New Roman", "Trebuchet MS", "Verdana", "Webdings"}

\item{title.font.color}{Title font color as a named color in character
format (e.g. "black") or a hex code.}

\item{title.font.size}{Integer; Title font size; default = 10.}

\item{subtitle.font.family}{Character; subtitle font family}

\item{subtitle.font.color}{subtitle font color as a named color in
character format (e.g. "black") or an a hex code.}

\item{subtitle.font.size}{Integer; subtitle font size}

\item{footer.font.family}{Character; footer font family}

\item{footer.font.color}{footer font color as a named color in
character format (e.g. "black") or an a hex code.}

\item{footer.font.size}{Integer; footer font size}

\item{footer.wrap}{Logical; whether the footer text should be wrapped.}

\item{footer.wrap.nchar}{Number of characters (approximately) in each
line of the footer when \code{footer.wrap} \code{TRUE}.}

\item{x.tick.font.family}{Character; x-axis tick label font family}

\item{x.tick.font.color}{X-axis tick label font color as a named color in
character format (e.g. "black") or an a hex code.}

\item{x.tick.font.size}{Integer; x-axis tick label font size}

\item{x.tick.label.wrap}{Logical; whether to wrap long labels on the x-axis.}

\item{x.tick.label.wrap.nchar}{Number of characters wide the x-axis labels should be before wrapping.}

\item{x.tick.angle}{x-axis tick label angle in degrees.
90 = vertical; 0 = horizontal}

\item{y.tick.font.family}{Character; y-axis tick label font family}

\item{y.tick.font.color}{y-axis tick label font color as a named color
in character format (e.g. "black") or an a hex code.}

\item{y.tick.font.size}{Integer; y-axis tick label font size}

\item{tooltip.show}{Logical, indicating whether or not to show a tooltip on hover. The default is off, because
turning on tooltips with large data sets can make the chart slow to render.}

\item{hovertext.font.family}{Font family of hover text.}

\item{hovertext.font.color}{Color of hovertext as a string or hex code.}

\item{hovertext.font.size}{Font size of hover text.}

\item{margin.top}{Margin between plot area and the top of the graphic in pixels}

\item{margin.bottom}{Margin between plot area and the bottom of the graphic in pixels}

\item{margin.left}{Margin between plot area and the left of the graphic in pixels}

\item{margin.right}{Margin between plot area and the right of the graphic in pixels}

\item{font.unit}{One of "px" of "pt". By default all font sizes are specified in terms of
pixels ("px"). But changing this to "pt" will mean that the font sizes will be in terms
points ("pt"), which will be consistent with font sizes in text boxes.}
}
\description{
Show which cases in a data frame are missing
}
\examples{
z <- structure(c(1L, 2L, 3L, 4L, 5L, 2L, 3L, 4L, 5L, 6L),  .Dim = c(5L, 2L),
      .Dimnames = list(c("T", "U", "V", "W", "X"), c("A", "B")))
Column(z, type="Stacked Column")
}
