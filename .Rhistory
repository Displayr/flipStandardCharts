"Lewers Research",
"Lightbox",
"Lightspeed Research",
"Lincoln Strategy Group",
"Lincom Global Services",
"Lion (Insights in BSW)",
"Little Triggers Pty Ltd",
"Lonergan Research",
"Louise Woods",
"Luma",
"Macromill, inc.",
"Magnolia Innovation",
"Mamamia Women's Network",
"Markelytics",
"Market Logic Asia Pty Ltd",
"Market Measures",
"Marketsmith",
"Mars Research",
"Martin Research Consulting",
"McCann UK",
"McDonald's Australia Limited",
"MCM Entertainment Group",
"McNair Ingenuity",
"Measuring Success",
"MediaCom",
"Mediaplus Gruppe f√ºr innovative Media",
"Mercury Research",
"MESH",
"MetLife Australia",
"Metrix Consulting",
"MEV Corp",
"Micromex",
"Mighty River Power",
"MillerCoors",
"Millward Brown - Australia",
"MindMover",
"Ministry of Industry, Trade & Tourism - Fiji",
"Mint Research",
"MODO Group",
"Moksie Enterprise Pty Ltd",
"Move, Inc.",
"mrds",
"MSI International",
"MSL Group",
"MTM London",
"MWResearch GmbH",
"Myanmar Survey Research",
"NAB",
"Naime Pty Ltd",
"National Geographic Society",
"Nature Pty Ltd",
"Nature Pty Ltd (on behalf of Medibank Private)",
"Navigate Research",
"Neiman Marcus",
"Network Ten",
"Newgate Research",
"News Limited",
"NHS Choices",
"Nicholas Wright",
"Nine Network Australia",
"NResearch",
"NRMA",
"NSW Department of Planning and Environment",
"Nunwood Asia Pacific",
"OBrands",
"OCBC Bank",
"OmnicomMediaGroup",
"OmniPoll Pty Ltd",
"OMR Globus",
"Omron Healthcare Singapore Pte Ltd",
"oOh! Media",
"Open Mind Strategy",
"OpinionPath LLC",
"Opinions Market Research Ltd",
"Opinium Research",
"ORC International",
"Pacific Brands",
"Patrick Meza",
"Patterson Research Group",
"Peerless Insights",
"Penton",
"Pernod Ricard Australia (Pernod Ricard Winemakers Pty Ltd)",
"Phoenix Marketing International",
"Piazza Research",
"Play",
"POD Market Research",
"polity pty ltd",
"Pollytix Strategic Research Gmbh",
"Probe Research",
"Proof Research",
"Prospection",
"PT. Cimigo",
"Public Place",
"PulteGroup",
"pureprofile",
"PwC - Australia",
"PwC - US",
"Qantas Airways",
"Qantas Loyalty",
"QBE",
"QOR",
"Qriously Ltd.",
"Quantum Market Research",
"Ragdoll Research and Planning",
"Rainmakers CSI Consultancy",
"REA Group",
"Redhanded Creative Group",
"Relish Research",
"Repucom - Australia",
"Repucom - Netherlands",
"Repucom - UK",
"Repucom - US",
"Research Connections",
"Research First",
"Research in Finance",
"Research Ink Pty Ltd",
"Research Now - Australia",
"Research Remedy",
"Research Solutions",
"Review Partners",
"RF|Binder",
"RFi Australia",
"RMI fullservice marktonderzoek",
"RSG Inc",
"Ruby Cha Cha",
"SABMiller",
"SageSpring Partners",
"Saleslink Group",
"Sample Co Ltd",
"Samsung Electronics (UK) Ltd",
"Sargeant & Collins Pty Ltd",
"Scriptability",
"SEEK",
"Selleys",
"Sensis",
"Sensory Solutions",
"Shift Learning",
"Shine Feedback Ltd",
"Six Flags",
"SKY Network television",
"Snware Research Services Pvt Ltd",
"SoftwareONE (on behalf of Bayer Australia)",
"SoftwareONE (on behalf of Standard Chartered Bank, SCB)",
"Solutions Marketing & Consulting",
"Source Media",
"Southeastern Grocers",
"So What Research",
"Sparkler",
"Spectrum Brands, Inc.",
"Sportsbet",
"Square Holes",
"Stancombe Research & Planning Pty Ltd",
"Starburst Insights",
"State of NY Metropolitan Transportation Authority",
"St Ives Group",
"Stokes Mischewski Pty Ltd",
"Stollznow Research",
"Stone-Olafson",
"Strategy Analytics - US (MA & CA Office)",
"String Research Insights Consulting",
"Student Edge",
"Sun Products Corporation",
"SurveyHelp Pty Ltd",
"Survey Sampling International - Australia",
"Susan Bell Research",
"Sydney Living Museums",
"Sydney Trains",
"Synergy",
"Tabcorp",
"Taverner Research",
"TEG Rewards",
"T Garage",
"The Acid Test",
"The Buzzz Ltd",
"The Clever Stuff",
"The College Board",
"The Good Guys",
"The Insight Room",
"The Institute of Internal Auditors",
"The Leading Edge",
"The Market Intelligence Co.",
"The Nielsen Company (Philippines) (on behalf of Monde Nissin Corporation)",
"The Nielsen Company (Philippines) (on behalf of PMI Philippines)",
"The Nielsen Company (Singapore) Principal Pte Ltd",
"The Paradigm Shift Research Consultancy Pty. Ltd.",
"The Pineapple Lounge",
"The Research Agency",
"The University of Sydney",
"The Warehouse Limited",
"Thinkfield",
"THINK Global Research",
"Three-Group",
"TKP (The Klein Partnership)",
"TMS Research (Pty) Ltd",
"TNS New Zealand",
"Toluna - Australia",
"Toluna Hong Kong Ltd.",
"Toluna - US",
"Tourism NT",
"Trajectory Partnership",
"Transport for NSW",
"Treasury Wine Estates",
"Trinity McQueen",
"Truth Consulting UK",
"Truth-Serum",
"Turquoise Thinking",
"UMR Australia",
"UMR Research Ltd (NZ)",
"University of Technology, School of Management",
"URBIS",
"Val Morgan Cinema Network",
"Vawser and Associates",
"VDC Research",
"Vision Critical",
"V/Line Passenger",
"Vodafone - Australia",
"Vodafone NZ Limited (Paid by TNS)",
"Wallis Consulting Group",
"Western Research Institute",
"What They Think Research",
"Whereto Research",
"William Hill",
"Wine Intelligence",
"Wine Intelligence (France)",
"Woolworths Limited",
"Yahoo!7",
"YouGov Polimetrix",
"Zeitgeist Research")
rhtmlDonut::Donut(values = values,
values.display = "original",
labels = labels,
prefix = "$",
values.thres = .3)#, groups = regions , groups.color = qColors)
library(flipStandardCharts)
?suppress
?supress
?suppresswarnings
?suppressWarnings
library(flipStandardCharts)
?xtabs
?aggregate
library(flipStandardCharts)
library(flipStandardCharts)
library(flipStandardCharts)
?importFrom
??importFrom
library(flipStandardCharts)
library(flipStandardCharts)
library(flipStandardCharts)
hotdogs <- as.matrix(rbind("1st" = c(25, 50, 50.5, 44.5, 53.5, 49, 54, 66, 59, 68, 54),
"2nd" = c(24, 31, 26, 30.5, 38, 37, 52, 63, 59, 64.5, 43),
"3rd" = c(22, 23.5, 25.5, 29.5, 32, 32, 37, 49, 42, 55, 37)))
colnames(hotdogs) <- c("`00", "`01", "`02", "`03", "`04", "`05", "`06", "`07", "`08", "`09", "`10")
hotcols <- c(grDevices::rgb(7, 135, 65, 255, maxColorValue = 255),
grDevices::rgb(56, 184, 72, 255, maxColorValue = 255),
grDevices::rgb(162, 213, 101, 255, maxColorValue = 255))
Chart(type = "100% Stacked Bar",
title = "Hot Dog Competition",
title.font.color = rgb(66, 66, 66, maxColorValue = 255),
y = hotdogs,
transpose = TRUE,
x.bounds.minimum = 0,
x.bounds.maximum = 200,
x.bounds.units.major = 50,
series.marker.color = hotcols,
series.marker.border.width = 0,
y.line.color = "white",
x.line.color = "white",
x.grid.width = 0,
x.title = "Hot dogs and buns")
guns <- as.matrix(rbind(Pistols = c(0.26, 0.24, 0.25, 0.21, 0.22, 0.25, 0.24, 0.25, 0.28, 0.31, 0.32, 0.34, 0.41, 0.4),
Revolvers = c(0.09, 0.08, 0.08, 0.11, 0.1, 0.09, 0.09, 0.08, 0.1, 0.1, 0.1, 0.1, 0.1, 0.09),
Rifles = c(0.36, 0.38, 0.41, 0.43, 0.45, 0.43, 0.43, 0.44, 0.41, 0.41, 0.41, 0.4, 0.34, 0.35),
Shotguns = c(0.28, 0.27, 0.23, 0.23, 0.22, 0.22, 0.24, 0.22, 0.2, 0.16, 0.15, 0.14, 0.14, 0.13),
"All others" = c(0.01, 0.03, 0.03, 0.02, 0.01, 0.01, 0, 0.01, 0.01, 0.02, 0.02, 0.02, 0.01, 0.03)))
colnames(guns) <- c(1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009)
gun.colors <- c(grDevices::rgb(0, 112, 192, 255, maxColorValue = 255), # blue.
grDevices::rgb(237, 125, 49, 255, maxColorValue = 255), # orange
grDevices::rgb(102, 255, 255, 255, maxColorValue = 255), # bright turquoise
grDevices::rgb(128, 128, 0, 255, maxColorValue = 255), # green
grDevices::rgb(244, 177, 131, 255, maxColorValue = 255)) # beige
text.colors <- c(grDevices::rgb(255, 255, 255, 255, maxColorValue = 255),
grDevices::rgb(0, 0, 0, 255, maxColorValue = 255),
grDevices::rgb(0, 0, 0, 255, maxColorValue = 255),
grDevices::rgb(255, 255, 255, 255, maxColorValue = 255),
grDevices::rgb(0, 0, 0, 255, maxColorValue = 255))
Chart(type = "100% Stacked Bar",
title = "U.S. Gun manufacture by type",
title.font.color = rgb(66, 66, 66, maxColorValue = 255),
y = guns,
transpose = TRUE,
x.bounds.minimum = 0,
x.bounds.maximum = 1.01,
x.bounds.units.major = .1,
x.tick.format.manual = "%",
series.marker.color = gun.colors,
bar.gap = 0,
legend.font.color = rgb(66, 66, 66, maxColorValue = 255),
x.tick.font.color = rgb(66, 66, 66, maxColorValue = 255),
y.tick.font.color = rgb(66, 66, 66, maxColorValue = 255),
x.zero.line.color = rgb(192, 192, 192, maxColorValue = 255),
y.line.color = "white",
x.line.color = "white",
bar.data.label.offset = -0.3,
bar.data.label.decimals = 2,
bar.data.label.color = text.colors,
series.marker.border.width = 0,
bar.data.label.as.percent = TRUE)
y.data
Chart(y = y.data, x = x.data)
Chart(y = y.data, x = x.data, type = "100% Stacked Bar")
AsChartMatrix(y.data, x.data)
Chart(y = y.data, x = x.data, type = "Bar")
Chart(y = y.data, x = x.data, type = "100% Stacked Bar")
yy <- sample(1:100, 1000, replace = TRUE)
yy
xx <- sample(LETTERS[1:10], 1000, replace = TRUE)
AsChartMatrix(yy, xx)
my <- AsChartMatrix(yy, xx)
yy
yy <- sample(1:100, 1000, replace = TRUE)
xx <- sample(LETTERS[1:10], 1000, replace = TRUE)
mx <- AsChartMatrix(yy, xx)
my
mx
m <- rbind(my,mx)
m
Chart(m, type = "100% Stacked Bar")
Chart(m, type = "100% Stacked Bar", x.tick.format = "%")
rownames(m) <- c("r1","r2")
Chart(m, type = "100% Stacked Bar", x.tick.format = "%")
Chart(m, type = "100% Stacked Bar", x.tick.format = "%", x.tick.frequency = 5)
Chart(m, type = "100% Stacked Bar", x.tick.format = "%", x.tick.frequency = 0.5)
Chart(m, type = "100% Stacked Bar", x.tick.format = "%", x.tick.frequency = 0.2)
Chart(m, type = "100% Stacked Bar")
Chart(m, type = "100% Stacked Bar")
Chart(m, type = "100% Stacked Bar")
Chart(m, type = "100% Stacked Bar")
library(flipStandardCharts)
gender <- c(2,1,2,2,2,2,2,2,1,2,1,1,1,1,2,2,2,1,2,2,1,2,2,1,1,2,2,2,1,1,1,1,1,2,2,1,1,2,2,2,1,1,1,1,1,1,1,1,2,1,2,1,2,2,2,1,2,1,2,1,2,2,1,2,2,2,1,2,1,1,1,2,1,1,2,1,2,2,1,2,2,2,2,2,2,1,2,1,1,1,2,2,1,2,1,2,2,2,1,1,1,1,2,1,2,2,2,1,1,1,2,1,2,2,1,2,2,2,1,1,1,1,1,1,2,1,2,2,1,2,1,2,2,1,2,1,1,1,1,1,2,2,2,1,1,2,1,2,1,1,2,1,1,2,1,1,2,2,1,2,1,1,1,2,2,2,2,1,1,2,1,2,1,2,2,2,2,2,2,2,1,1,2,1,2,1,1,2,1,1,2,1,2,2,1,1,2,1,2,1,1,1,1,1,1,1,1,2,2,1,1,2,2,1,1,1,1,2,2,2,2,1,1,1,1,1,1,1,2,2,2,2,2,1,2,2,1,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,1,2,2,1,1,2,1,2,2,2,1,2,2,1,2,2,1,1,1,1,1,1,1,2,1,2,2,1,1,1,2,1,2,2,2,2,1,1,1,2,1,2,1,2,2,2,1,2,2,2,1,2,1,1,1,2,1,2,2,2,1,1,2,2,2,1,1,1,2,2,1,1,1,2,2)
age <- c(3,7,3,3,9,9,8,5,10,7,7,9,9,4,10,3,4,8,5,2,8,7,9,8,4,3,5,6,3,9,8,9,4,2,9,4,9,7,2,6,9,7,9,6,7,3,5,6,6,7,2,9,5,3,6,4,9,4,10,2,5,6,2,7,2,4,10,5,3,5,5,2,4,6,7,8,6,9,9,10,8,4,5,2,3,2,8,9,4,2,2,10,7,4,2,8,9,9,5,9,2,2,7,5,2,4,2,2,4,10,8,7,5,6,6,5,2,6,9,8,8,5,3,6,3,5,4,10,3,2,2,10,4,2,8,6,9,8,9,9,4,9,2,2,4,10,6,2,6,2,2,10,5,7,5,2,8,6,2,2,4,3,3,3,3,4,4,7,6,5,8,9,8,8,8,9,6,5,3,3,6,2,5,9,6,5,6,3,3,3,9,3,9,3,2,2,7,4,6,9,2,10,3,8,9,4,7,8,4,9,9,9,2,3,6,8,10,7,3,3,4,5,3,10,10,6,6,10,2,10,2,8,6,9,2,9,9,8,9,5,9,3,9,2,5,3,10,6,7,8,9,5,2,3,6,8,6,5,6,8,9,5,2,9,3,5,8,10,3,7,7,8,6,9,7,7,5,8,7,8,9,2,3,10,7,8,4,10,9,10,3,4,9,4,4,9,9,8,6,5,7,9,5,6,5,3,8,6,7,5,8,2,3,9,5,8,8,8,5,3,4,4,8,4,2,4,8)
AsChartMatrix(gender, age)
AsChartMatrix(age, gender)
gender <- ("Female","Male","Female","Female","Female","Female","Female","Female","Male","Female","Male","Male","Male","Male","Female","Female","Female","Male","Female","Female","Male","Female","Female","Male","Male","Female","Female","Female","Male","Male","Male","Male","Male","Female","Female","Male","Male","Female","Female","Female","Male","Male","Male","Male","Male","Male","Male","Male","Female","Male","Female","Male","Female","Female","Female","Male","Female","Male","Female","Male","Female","Female","Male","Female","Female","Female","Male","Female","Male","Male","Male","Female","Male","Male","Female","Male","Female","Female","Male","Female","Female","Female","Female","Female","Female","Male","Female","Male","Male","Male","Female","Female","Male","Female","Male","Female","Female","Female","Male","Male","Male","Male","Female","Male","Female","Female","Female","Male","Male","Male","Female","Male","Female","Female","Male","Female","Female","Female","Male","Male","Male","Male","Male","Male","Female","Male","Female","Female","Male","Female","Male","Female","Female","Male","Female","Male","Male","Male","Male","Male","Female","Female","Female","Male","Male","Female","Male","Female","Male","Male","Female","Male","Male","Female","Male","Male","Female","Female","Male","Female","Male","Male","Male","Female","Female","Female","Female","Male","Male","Female","Male","Female","Male","Female","Female","Female","Female","Female","Female","Female","Male","Male","Female","Male","Female","Male","Male","Female","Male","Male","Female","Male","Female","Female","Male","Male","Female","Male","Female","Male","Male","Male","Male","Male","Male","Male","Male","Female","Female","Male","Male","Female","Female","Male","Male","Male","Male","Female","Female","Female","Female","Male","Male","Male","Male","Male","Male","Male","Female","Female","Female","Female","Female","Male","Female","Female","Male","Female","Female","Female","Female","Female","Female","Female","Female","Female","Male","Male","Female","Female","Female","Female","Male","Female","Female","Male","Male","Female","Male","Female","Female","Female","Male","Female","Female","Male","Female","Female","Male","Male","Male","Male","Male","Male","Male","Female","Male","Female","Female","Male","Male","Male","Female","Male","Female","Female","Female","Female","Male","Male","Male","Female","Male","Female","Male","Female","Female","Female","Male","Female","Female","Female","Male","Female","Male","Male","Male","Female","Male","Female","Female","Female","Male","Male","Female","Female","Female","Male","Male","Male","Female","Female","Male","Male","Male","Female","Female")
gender <- c("Female","Male","Female","Female","Female","Female","Female","Female","Male","Female","Male","Male","Male","Male","Female","Female","Female","Male","Female","Female","Male","Female","Female","Male","Male","Female","Female","Female","Male","Male","Male","Male","Male","Female","Female","Male","Male","Female","Female","Female","Male","Male","Male","Male","Male","Male","Male","Male","Female","Male","Female","Male","Female","Female","Female","Male","Female","Male","Female","Male","Female","Female","Male","Female","Female","Female","Male","Female","Male","Male","Male","Female","Male","Male","Female","Male","Female","Female","Male","Female","Female","Female","Female","Female","Female","Male","Female","Male","Male","Male","Female","Female","Male","Female","Male","Female","Female","Female","Male","Male","Male","Male","Female","Male","Female","Female","Female","Male","Male","Male","Female","Male","Female","Female","Male","Female","Female","Female","Male","Male","Male","Male","Male","Male","Female","Male","Female","Female","Male","Female","Male","Female","Female","Male","Female","Male","Male","Male","Male","Male","Female","Female","Female","Male","Male","Female","Male","Female","Male","Male","Female","Male","Male","Female","Male","Male","Female","Female","Male","Female","Male","Male","Male","Female","Female","Female","Female","Male","Male","Female","Male","Female","Male","Female","Female","Female","Female","Female","Female","Female","Male","Male","Female","Male","Female","Male","Male","Female","Male","Male","Female","Male","Female","Female","Male","Male","Female","Male","Female","Male","Male","Male","Male","Male","Male","Male","Male","Female","Female","Male","Male","Female","Female","Male","Male","Male","Male","Female","Female","Female","Female","Male","Male","Male","Male","Male","Male","Male","Female","Female","Female","Female","Female","Male","Female","Female","Male","Female","Female","Female","Female","Female","Female","Female","Female","Female","Male","Male","Female","Female","Female","Female","Male","Female","Female","Male","Male","Female","Male","Female","Female","Female","Male","Female","Female","Male","Female","Female","Male","Male","Male","Male","Male","Male","Male","Female","Male","Female","Female","Male","Male","Male","Female","Male","Female","Female","Female","Female","Male","Male","Male","Female","Male","Female","Male","Female","Female","Female","Male","Female","Female","Female","Male","Female","Male","Male","Male","Female","Male","Female","Female","Female","Male","Male","Female","Female","Female","Male","Male","Male","Female","Female","Male","Male","Male","Female","Female")
age <- c("25 to 29","45 to 49","25 to 29","25 to 29","55 to 64","55 to 64","50 to 54","35 to 39","65 or more","45 to 49","45 to 49","55 to 64","55 to 64","30 to 34","65 or more","25 to 29","30 to 34","50 to 54","35 to 39","18 to 24","50 to 54","45 to 49","55 to 64","50 to 54","30 to 34","25 to 29","35 to 39","40 to 44","25 to 29","55 to 64","50 to 54","55 to 64","30 to 34","18 to 24","55 to 64","30 to 34","55 to 64","45 to 49","18 to 24","40 to 44","55 to 64","45 to 49","55 to 64","40 to 44","45 to 49","25 to 29","35 to 39","40 to 44","40 to 44","45 to 49","18 to 24","55 to 64","35 to 39","25 to 29","40 to 44","30 to 34","55 to 64","30 to 34","65 or more","18 to 24","35 to 39","40 to 44","18 to 24","45 to 49","18 to 24","30 to 34","65 or more","35 to 39","25 to 29","35 to 39","35 to 39","18 to 24","30 to 34","40 to 44","45 to 49","50 to 54","40 to 44","55 to 64","55 to 64","65 or more","50 to 54","30 to 34","35 to 39","18 to 24","25 to 29","18 to 24","50 to 54","55 to 64","30 to 34","18 to 24","18 to 24","65 or more","45 to 49","30 to 34","18 to 24","50 to 54","55 to 64","55 to 64","35 to 39","55 to 64","18 to 24","18 to 24","45 to 49","35 to 39","18 to 24","30 to 34","18 to 24","18 to 24","30 to 34","65 or more","50 to 54","45 to 49","35 to 39","40 to 44","40 to 44","35 to 39","18 to 24","40 to 44","55 to 64","50 to 54","50 to 54","35 to 39","25 to 29","40 to 44","25 to 29","35 to 39","30 to 34","65 or more","25 to 29","18 to 24","18 to 24","65 or more","30 to 34","18 to 24","50 to 54","40 to 44","55 to 64","50 to 54","55 to 64","55 to 64","30 to 34","55 to 64","18 to 24","18 to 24","30 to 34","65 or more","40 to 44","18 to 24","40 to 44","18 to 24","18 to 24","65 or more","35 to 39","45 to 49","35 to 39","18 to 24","50 to 54","40 to 44","18 to 24","18 to 24","30 to 34","25 to 29","25 to 29","25 to 29","25 to 29","30 to 34","30 to 34","45 to 49","40 to 44","35 to 39","50 to 54","55 to 64","50 to 54","50 to 54","50 to 54","55 to 64","40 to 44","35 to 39","25 to 29","25 to 29","40 to 44","18 to 24","35 to 39","55 to 64","40 to 44","35 to 39","40 to 44","25 to 29","25 to 29","25 to 29","55 to 64","25 to 29","55 to 64","25 to 29","18 to 24","18 to 24","45 to 49","30 to 34","40 to 44","55 to 64","18 to 24","65 or more","25 to 29","50 to 54","55 to 64","30 to 34","45 to 49","50 to 54","30 to 34","55 to 64","55 to 64","55 to 64","18 to 24","25 to 29","40 to 44","50 to 54","65 or more","45 to 49","25 to 29","25 to 29","30 to 34","35 to 39","25 to 29","65 or more","65 or more","40 to 44","40 to 44","65 or more","18 to 24","65 or more","18 to 24","50 to 54","40 to 44","55 to 64","18 to 24","55 to 64","55 to 64","50 to 54","55 to 64","35 to 39","55 to 64","25 to 29","55 to 64","18 to 24","35 to 39","25 to 29","65 or more","40 to 44","45 to 49","50 to 54","55 to 64","35 to 39","18 to 24","25 to 29","40 to 44","50 to 54","40 to 44","35 to 39","40 to 44","50 to 54","55 to 64","35 to 39","18 to 24","55 to 64","25 to 29","35 to 39","50 to 54","65 or more","25 to 29","45 to 49","45 to 49","50 to 54","40 to 44","55 to 64","45 to 49","45 to 49","35 to 39","50 to 54","45 to 49","50 to 54","55 to 64","18 to 24","25 to 29","65 or more","45 to 49","50 to 54","30 to 34","65 or more","55 to 64","65 or more","25 to 29","30 to 34","55 to 64","30 to 34","30 to 34","55 to 64","55 to 64","50 to 54","40 to 44","35 to 39","45 to 49","55 to 64","35 to 39","40 to 44","35 to 39","25 to 29","50 to 54","40 to 44","45 to 49","35 to 39","50 to 54","18 to 24","25 to 29","55 to 64","35 to 39","50 to 54","50 to 54","50 to 54","35 to 39","25 to 29","30 to 34","30 to 34","50 to 54","30 to 34","18 to 24","30 to 34","50 to 54")
AsChartMatrix(age, gender)
Chart(y = age, x = gender, type = "Pie")
chart.matrix <- AsChartMatrix(age, gender)
chart.matrix
nrow(chart.matrix)
chart.matrix2 <- as.data.frame(chart.matrix[ ,1:ncol(chart.matrix)])
chart.matrix2
stack(chart.matrix2)
cbind(suppressWarnings(stack(df.chart.matrix)), labels = rep(rownames(chart.matrix), ncol(chart.matrix)))
cbind(suppressWarnings(stack(chart.matrix2)), labels = rep(rownames(chart.matrix), ncol(chart.matrix)))
as.data.frame(AsChartMatrix(y.data, x.data)[ , 1:ncol(AsChartMatrix(y.data, x.data))])
library(flipStandardCharts)
Chart(gender, age, type = "Pie")
Chart(gender, age, type = "Pie", transpose = TRUE)
Chart(y.data, y.dat, type = "Pie", transpose = TRUE)
Chart(y.data, y.data, type = "Pie", transpose = TRUE)
basic.style.colors <- c(grDevices::rgb(227, 211, 124, maxColorValue = 255),
grDevices::rgb(244, 159, 154, maxColorValue = 255),
grDevices::rgb(226, 125, 195, maxColorValue = 255),
grDevices::rgb(189, 127, 238, maxColorValue = 255),
grDevices::rgb(153, 164, 253, maxColorValue = 255),
grDevices::rgb(138, 216, 228, maxColorValue = 255),
grDevices::rgb(154, 250, 179, maxColorValue = 255),
grDevices::rgb( 99,  99,  99, maxColorValue = 255),
grDevices::rgb( 20, 225, 190, maxColorValue = 255))
data1 <- c(100, 200, 180, 50, 320, 90, 30)
names(data1) <- c("JavaScript", "CSS", "HTML", "PHP", "MySQL", "Apache", "Linux")
data1 <- as.matrix(data1)
colnames(data1) <- "Language"
Chart(y = data1,
type = "Pie",
pie.segment.colors = basic.style.colors,
pie.values.order = "initial",
pie.values.display.format = "original")
context("pieChart")
for (i in 1:length(good.examples))
{
print(Chart(y = good.examples[[i]]$Y, x = good.examples[[i]]$X, type = "Pie", transpose = good.examples[[i]]$transpose, title = names(good.examples)[i], aggregate.period = good.examples[[i]]$aggregate.period, hover.include.source.value = TRUE))
# cat(paste("Press [enter] to continue (test ", i, "/", length(good.examples), ").", sep = ""))
# line <- readline()
}
Chart(y.data, x.data, type = "Pie", transpose = TRUE)
Chart(gender, age, type = "Pie")
Chart(gender, age, type = "Pie")
library(flipStandardCharts)
library(flipStandardCharts)
Chart(gender, age, type = "Pie")
Chart(gender, age, type = "Pie")
for (i in 1:length(good.examples))
{
print(Chart(y = good.examples[[i]]$Y, x = good.examples[[i]]$X, type = "Pie", transpose = good.examples[[i]]$transpose, title = names(good.examples)[i], aggregate.period = good.examples[[i]]$aggregate.period, hover.include.source.value = TRUE))
# cat(paste("Press [enter] to continue (test ", i, "/", length(good.examples), ").", sep = ""))
# line <- readline()
}
Chart(gender, age, type = "Pie")
Chart(y.data, x.data, type = "Pie")
Chart(y.data, x.data, type = "Pie", transpose = TRUE)
Chart(x.data, y.data, type = "Pie")
Chart(y = y.data, x = x.data, type = "Pie")
Chart(y = y.data, x = x.data, type = "Pie", transpose = TRUE)
Chart(y = x.data, x = y.data, type = "Pie", transpose = TRUE)
Chart(y = x.data, x = y.data, type = "Pie", transpose = FALSE)
Chart(y = x.data, type = "Pie", transpose = FALSE)
Chart(y = y.data, type = "Pie", transpose = FALSE)
y.data
AsChartMatrix(y.data)
Chart(y = gender, x = age, type = "Pie")
Chart(y = age, x = gender, type = "Pie")
Chart(y = gender, x = age, type = "Pie")
x.dtaa
x.data
y.data
names(y.data) <- x.data
y.data
Chart(y = y.data, type = "Pie")
Donuts(values = y.data, labels = names(y.data))
rhtmlDonut::Donut(values = y.data, labels = names(y.data))
Donuts(values = y.data, labels = names(y.data))
Donut(values = y.data, labels = names(y.data))*
Donut(values = y.data, labels = names(y.data))
Chart(y = age, type = "Pie")
table(age)
Chart(y = table(age), type = "Pie")
Chart(y = age, x = gender, type = "Pie")
Chart(y = gender, x = age, type = "Pie")
Chart(y = gender, type = "Pie")
Chart(y = gender, type = "Pie", transpose = FALSE)
AsChartMatrix(gender)
table(gender)
Chart(y = table(gender), type = "Pie")
AsChartMatrix(y = age, x = gender)
Chart(y = age, x = gender, type = "Pie")
Chart(y = y.data, x = x.data, type = "Pie")
library(flipStandardCharts)
Chart(y = y.data, x = x.data, type = "Pie")
names(chart.matrix)
Chart(y = y.data, x = x.data, type = "Pie")
library(flipStandardCharts)
library(flipStandardCharts)
Chart(y = y.data, x = x.data, type = "Pie")
library(flipStandardCharts)
Chart(y = y.data, x = x.data, type = "Pie")
library(flipStandardCharts)
Chart(y = y.data, x = x.data, type = "Pie")
library(flipStandardCharts)
Chart(y = y.data, x = x.data, type = "Pie")
library(flipStandardCharts)
Chart(y = y.data, x = x.data, type = "Pie")
Chart(y = age, x = gender, type = "Pie")
Chart(y = gender, x = age, type = "Pie")
library(flipStandardCharts)
Chart(y = age, x = gender, type = "Pie")
Chart(y.data, type = "Pie")
Chart(y = y.data, x = x.data, type = "Pie")
Chart(y = y.data, x = x.data, type = "Pie")
library(flipStandardCharts)
Chart(y = y.data, x = x.data, type = "Pie")
Chart(y = age, x = gender, type = "Pie")
Chart(y = age, x = gender, type = "Pie")
Chart(y = y.data, x = x.data, type = "Pie")
Chart(y = y.data, x = x.data, type = "Pie")
Chart(y = age, x = gender, type = "Pie")
for (i in 1:length(good.examples))
{
print(Chart(y = good.examples[[i]]$Y, x = good.examples[[i]]$X, type = "Pie", transpose = good.examples[[i]]$transpose, title = names(good.examples)[i], aggregate.period = good.examples[[i]]$aggregate.period, hover.include.source.value = TRUE))
# cat(paste("Press [enter] to continue (test ", i, "/", length(good.examples), ").", sep = ""))
# line <- readline()
}
library(flipStandardCharts)
for (i in 1:length(good.examples))
{
print(Chart(y = good.examples[[i]]$Y, x = good.examples[[i]]$X, type = "Pie", transpose = good.examples[[i]]$transpose, title = names(good.examples)[i], aggregate.period = good.examples[[i]]$aggregate.period, hover.include.source.value = TRUE))
# cat(paste("Press [enter] to continue (test ", i, "/", length(good.examples), ").", sep = ""))
# line <- readline()
}
va3
var3
x.data
table(var3, x.data)
table(var3, x.data, row = FALSE)
make.table <- function(x, y, label = "Series", row = TRUE)
{
output <- table(x,y)
if (row)
rownames(output) <- paste("Series", 1:length(x))
else
colnames(output) <- paste("Series", 1:length(y))
output
}
make.table(var3, x.data, row = FALSE)
Chart(y = make.table(var3, x.data, row = FALSE), type = "Pie")
Chart(y = make.table(var3, x.data, row = FALSE), type = "Pie", transpose = FALSE)
Chart(y = make.table(var3, x.data, row = FALSE), type = "Pie", transpose = TRUE)
library(flipStandardCharts)
for (i in 1:length(good.examples))
{
print(Chart(y = good.examples[[i]]$Y, x = good.examples[[i]]$X, type = "Pie", transpose = good.examples[[i]]$transpose, title = names(good.examples)[i], aggregate.period = good.examples[[i]]$aggregate.period, hover.include.source.value = TRUE))
# cat(paste("Press [enter] to continue (test ", i, "/", length(good.examples), ").", sep = ""))
# line <- readline()
}
Chart(y = y.data, type = "Pie")
Chart(y = age, x = gender, type = "Pie")
library(flipStandardCharts)
Chart(y = age, x = gender, type = "Pie")
library(flipStandardCharts)
Chart(y = age, x = gender, type = "Pie")
