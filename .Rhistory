grDevices::rgb(13, 168, 170, 255, max = 255), # Bananas, teal.
grDevices::rgb(110, 18, 90, 255, max = 255), # Lemons, dark purple
grDevices::rgb(21, 113, 189, 255, max = 255), # Limes, blue
grDevices::rgb(97, 111, 2, 255, max = 255), # Oranges, dark green
grDevices::rgb(8, 68, 111, 255, max = 255), # Pears, dark blue
grDevices::rgb(175, 21, 1, 255, max = 255), # Strawberries, dark red
grDevices::rgb(158, 72, 14, 255, max = 255), # Gooseberries
grDevices::rgb(99, 99, 99, 255, max = 255), # Cloudberries
grDevices::rgb(153, 115, 0, 255, max = 255), # Kiwi fruit
grDevices::rgb(38, 68, 120, 255, max = 255), # Raspberries
grDevices::rgb(67, 104, 43, 255, max = 255), # Blackberries
grDevices::rgb(124, 175, 221, 255, max = 255), # Currants
grDevices::rgb(241, 151, 90, 255, max = 255), # Rhubarb
grDevices::rgb(183, 183, 183, 255, max = 255), # Peach
grDevices::rgb(255, 205, 51, 255, max = 255), # Mango
grDevices::rgb(105, 142, 208, 255, max = 255), # Papaya
grDevices::rgb(140, 193, 104, 255, max = 255), # Goat
grDevices::rgb(50, 125, 194, 255, max = 255), # Blueberries
grDevices::rgb(210, 96, 18, 255, max = 255)) # Lingonberries
p2 <- plot_ly()
p2 <- config(displayModeBar = FALSE)
for (i in 1:nrow(data))
{
p2 <- add_trace(p2,
y = junk.data[i, ],
x = colnames(junk.data),
text = as.character(as.vector(data.text[i, ])),
textposition = "top middle",
textfont = list(
color = toRGB(rgb(150, 150, 150, max = 200), alpha = 1)
),
evaluate = TRUE,
name = rownames(junk.data)[i],
mode = "markers+lines+text",
line = list(
color = toRGB(junk.colors[i]),
width = 3
),
marker = list(
size = 10,
color = toRGB(junk.colors[i]),
line = list(
color = "black",
width = 1
)
)
)
}
p2 <- layout(
title = "Monthly Sales",
paper_bgcolor = toRGB(rgb(222, 233, 254, max = 255), alpha = 1),
plot_bgcolor = toRGB(rgb(222, 233, 254, max = 255), alpha = 1),
yaxis = list(
title = "",
showgrid = FALSE,
ticks = "none",
tickmode = "array",
tickvals = c(0, 5, 10, 15, 20, 25, 30, 35, 40, 45),
ticktext = c("0","5","10","15","20","25","30","35","40","45"),
range = list(0,45),
tickfont = list(
size = 10
),
zeroline = FALSE
),
xaxis = list(
title = "",
showgrid = FALSE,
ticks = "none",
tickfont = list(
size = 10
)
),
margin = list(
b = 80,
r = 80
)
)
p2
rm(list=ls())
library(flipStandardCharts)
make.table <- function(x, y, label = "Series", row = TRUE)
{
output <- table(x,y)
if (row)
rownames(output) <- paste("Series", 1:length(x))
else
colnames(output) <- paste("Series", 1:length(y))
output
}
x.data = c("A","B","C","D","E")
y.data = c(1, 2, 3, 4, 5)
var1 <- c(1, 2, 3, 4, 5)
var2 <- c(5, 4, 3, 2, 1)
var3 <- c(3, 3, 3, 3, 3)
var4 <- c(3, 4, 5, 2, 1)
var5 <- c(5, 4, 2, 3, 1)
alpha.five <- LETTERS[1:5]
logic.vector <- c(TRUE, FALSE, TRUE, TRUE, FALSE)
logic.vector.named <- c(A = TRUE, B = FALSE, C = TRUE, D = TRUE, E = FALSE)
named.vector.a <- c("A" = 1, "B" = 2, "C" = 3)
named.vector.b <- c("D" = 3, "E" = 2, "F" = 1)
factor.a <- factor(x.data)
factor.b <- factor(y.data)
x.dates <- c(1440236400000,1450236400000,1460236400000,1470236400000,1480236400000)
x.dates <- as.POSIXct(x.dates/1000, origin = "1970-01-01")
z <- matrix(1:5, ncol = 1, dimnames = list(x = LETTERS[1:5], series = "Series 1"))
good.examples <- list("A named vector becomes a ChartMatrix" = list(Y = c("A" = 1, "B" = 2, "C" = 3, "D" = 4, "E" = 5), X = NULL, transpose = FALSE, n.row = 1, n.columns = 5),
"A single column table becomes a chart matrix" = list(X = NULL, Y = make.table(x.data, var3), transpose = TRUE, n.row = 5, n.columns = 1),
"A numeric matrix with one column becomes a chart matrix" = list(X = NULL, Y = z, transpose = TRUE, n.row = 5, n.columns = 1),
"A table with one row becomes a chart matrix" = list(X = NULL, Y = make.table(var3, x.data, row = FALSE), transpose = TRUE, n.row = 1, n.columns = 5),
"One numeric or integer vector and one character vector become a chart matrix" = list(X = x.data, Y = y.data, transpose = FALSE, n.row = 1, n.columns = 5),
"One numeric or integer vector and one factor vector become a chart matrix" = list(Y = y.data, X = factor(x.data), transpose = FALSE, n.row = 1, n.columns = 5),
"One numeric or integer vector and one ordered factor vector become a chart matrix" = list(Y = y.data, X = as.ordered(x.data), transpose = FALSE, n.row = 1, n.columns = 5),
"One or more numeric or integer vector(s) in a list and one character vector become a chart matrix" = list(Y = list(A = var1, B = var1, C = var1, D = var1, E = var1), X = alpha.five, transpose = FALSE, n.row = 5, n.columns = 5),
"One or more numeric or integer vector(s) in a data frame and one character vector become a chart matrix" = list(Y = cbind(var1, var1, var1, var1, var1), X = alpha.five, transpose = FALSE, n.row = 5, n.columns = 5),
"One or more factors with the same levels in a data frame become a chart matrix" = list(X = factor.a, Y = factor.a, transpose = FALSE, n.row = 5, n.columns = 5),
"One numeric or integer variable and one date variable become a chart matrix" = list(Y = var1, X = x.dates, transpose = TRUE, n.row = 1, n.columns = 5))
bad.examples <- list("Y cannot take an unnamed numeric vector without an X input" = list(X = NULL, Y = y.data, transpose = FALSE, n.row = 1, n.columns = 5),
"Y cannot take an unnamed logic vector regardless of X-value" = list(X = NULL, Y = logic.vector, transpose = FALSE, n.row = 1, n.columns = 5),
"Y cannot take a list of logic vectors (unnamed)" = list(X = NULL, Y = list(logic.vector, logic.vector, logic.vector), transpose = FALSE, n.row = 1, n.columns = 3),
"Y cannot take a list of logic vectors (named)" = list(X = NULL, Y = list(logic.vector.named, logic.vector.named, logic.vector.named), transpose = FALSE, n.row = 1, n.columns = 3),
"Y cannot take a list of differently named vectors" = list(X = NULL, Y = list(named.vector.a, named.vector.b), transpose = FALSE, n.row = 1, n.columns = 2),
"Y cannot take a list of character and integer vectors" = list(X = NULL, Y = list(var1, x.data), transpose = FALSE, n.row = 1, n.columns = 2),
"Y cannot take a data frame of mixed character and integer vectors" = list(X = NULL, Y = cbind(var1, x.data), transpose = FALSE, n.row = 2, n.columns = 5),
"Y cannot take a list of multiple factors" = list(X = NULL, Y = list(factor.a, factor.b), transpose = FALSE, n.row = 1, n.columns = 2),
"Y cannot take a list of mixed integer vectors and factors" = list(X = NULL, Y = list(factor.a, y.data), transpose = FALSE, n.row = 1, n.columns = 2),
"Y cannot take a list of mixed character vectors and factors" = list(X = NULL, Y = list(factor.a, x.data), transpose = FALSE, n.row = 1, n.columns = 2),
"Y cannot take a character matrix" = list(X = NULL, Y = matrix(LETTERS[1:3]), transpose = FALSE, n.row = 1, n.columns = 3),
"Y cannot take a logic matrix" = list(X = NULL, Y = matrix(rep(c(TRUE,FALSE),3)), transpose = FALSE, n.row = 1, n.columns = 6),
"Y cannot take a character vector" = list(X = NULL, Y = LETTERS[1:5], transpose = FALSE, n.row = 1, n.columns = 5),
"Y cannot take a list of multiple character vectors" = list(X = NULL, Y = list(LETTERS[1:5], LETTERS[6:10], LETTERS[11:15]), transpose = FALSE, n.row = 1, n.columns = 3))
errorAsChartMatrix.examples <- list("Y cannot take a data frame of logic vectors (unnamed)" = list(X = NULL, Y = data.frame(cbind(logic.vector, logic.vector, logic.vector))),
"Y cannot take a data frame of multiple character vectors" = list(X = NULL, Y = data.frame(cbind(LETTERS[1:5], LETTERS[6:10], LETTERS[11:15]))),
"Y cannot take a data frame of mixed integer vectors and factors" = list(X = NULL, Y = data.frame(cbind(factor.a, x.data))),
"Y cannot take a data frame of mixed integer vectors and factors" = list(X = NULL, Y = data.frame(cbind(factor.a, y.data))),
"Y cannot take a data frame of multiple factors" = list(X = NULL, Y = data.frame(factor.a, factor.b)),
"Y cannot take a data frame of differently named vectors" = list(X = NULL, Y = data.frame(cbind(named.vector.a, named.vector.b))),
"Y cannot take a data frame of logic vectors (named)" = list(X = NULL, Y = data.frame(cbind(logic.vector.named, logic.vector.named, logic.vector.named))),
"X cannot take a logic vector" = list(Y = var1, X = logic.vector, n.row = 1, n.columns = 5),
"X cannot take a data frame" = list(Y = var1, X = data.frame(cbind(var1, var2, var3))),
"X cannot take a list" = list(Y = var1, X = list(var1, var2, var3)))
errorIsChartMatrix.examples <- list("Y cannot take a named logic vector" = list(X = NULL, Y = logic.vector.named, transpose = FALSE, n.row = 1, n.columns = 5))
qColors <- c(grDevices::rgb(91, 155, 213, 255, maxColorValue = 255), # blue
grDevices::rgb(237, 125, 49, 255, maxColorValue = 255), # orange
grDevices::rgb(165, 165, 165, 255, maxColorValue = 255), # grey
grDevices::rgb(30, 192, 0, 255, maxColorValue = 255), # yellow
grDevices::rgb(68, 114, 196, 255, maxColorValue = 255), # darker blue
grDevices::rgb(112, 173, 71, 255, maxColorValue = 255), # green
grDevices::rgb(37, 94, 145, 255, maxColorValue = 255), # even darker blue
grDevices::rgb(158, 72, 14, 255, maxColorValue = 255), # blood
grDevices::rgb(99, 99, 99, 255, maxColorValue = 255), # dark grey
grDevices::rgb(153, 115, 0, 255, maxColorValue = 255), # brown
grDevices::rgb(38, 68, 120, 255, maxColorValue = 255), # very dark blue
grDevices::rgb(67, 104, 43, 255, maxColorValue = 255), # darker green
grDevices::rgb(255, 255, 255, 255, maxColorValue = 255), # black
grDevices::rgb(255, 35, 35, 255, maxColorValue = 255)) # red
plotlySymbols <- plotlySymbols <- c(0,100,200,300,1,101,201,301,2,102,202,302,3,103,203,303,4,104,204,304,5,105,205,305,6,106,206,306,7,107,207,307,8,108,208,308,9,109,209,309,10,110,210,310,11,111,211,311,12,112,212,312,13,113,213,313,14,114,214,314,15,115,215,315,16,116,216,316,17,117,217,317,18,118,218,318,19,119,219,319,20,120,220,320,21,121,221,321,22,122,222,322,23,123,223,323,24,124,224,324,25,125,26,126,27,127,28,128,29,129,30,130,31,131,32,132,33,133,34,134,35,135,36,136,37,137,38,138,39,139,40,140,41,141,42,142,43,143,44,144)
available.fonts <- c("Arial Black", "Arial", "Comic Sans MS", "Courier New", "Georgia", "Impact", "Lucida Console", "Lucida Sans Unicode", "Marlett", "Symbol", "Tahoma", "Times New Roman", "Trebuchet MS", "Verdana", "Webdings")
devtools::use_data(qColors, plotlySymbols, available.fonts, x.data, y.data, var1, var2, var3, var4, var5, alpha.five, logic.vector, logic.vector.named, named.vector.a, named.vector.b, factor.a, factor.b, x.dates, z, good.examples, bad.examples, errorAsChartMatrix.examples, errorIsChartMatrix.examples, internal = FALSE, overwrite = TRUE)
rm(list=ls())
library(flipStandardCharts)
library(flipStandardCharts)
library(flipStandardCharts)
library(flipStandardCharts)
AreaChart(z)
AreaChart(z, y.tick.decimals = 3)
AreaChart(z, y.tick.decimals = 0)
AreaChart(z, y.tick.decimals = 2)
AreaChart(z, y.tick.format.manual = "%")
for (i in 1:length(good.examples))
{
print(AreaChart(y = good.examples[[i]]$Y, x = good.examples[[i]]$X, type = "Area", transpose = good.examples[[i]]$transpose, title = names(good.examples)[i]))
cat(paste("Press [enter] to continue (test ", i, "/", length(good.examples), ").", sep = ""))
line <- readline()
}
##### BASIC STYLE
a.matrix <- rbind(c(0.2,0.3,0.3,0.5,0.3,0.6,0.4,0.8,0.2,0.5,0.1,0.3),c(0.3,0.5,0.1,0.3,0.1,0.2,0.1,0.4,0.1,0.2,0.1,0.4))
rownames(a.matrix) <- c("Series1","Series2")
colnames(a.matrix) <- c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec")
myCols <- c(rgb(0,176,240, max=255), rgb(197,90,17, max=255))
myLineCols <- c(rgb(31,78,121, max=255),rgb(192,0,0, max=255))
AreaChart(a.matrix, type = "Area",
transparency = 0.4,
colors = myCols,
y.tick.format = c("%","2"),
series.line.width = 1,
series.line.color = myLineCols,
series.marker.show = "none",
title = "Area chart - BASIC style",
y.bounds.minimum = 0,
y.bounds.maximum = 1.01,
y.bounds.units.major = 0.1)
##### JUNK STYLE
a.matrix <- rbind(c(50,70,70,100,80,90,90), c(50,50,30,40,70,70,90), c(30,30,50,70,40,50,50), c(0,10,10,30,20,30,10))
colnames(a.matrix) <- c("D0","D1","D2","D3","D4","D5","D6")
rownames(a.matrix) <- c("pink","green","orange","blue")
markerCols <- c(rgb(245,56,177, max=255),rgb(56,193,55, max=255),rgb(245,163,65, max=255),rgb(61,108,255, max=255))
AreaChart(a.matrix,
legend.show = FALSE,
type = "Area",
transparency = 0.4,
colors = rgb(255, 255, 255, max=255),
plot.fill.color = rgb(176, 191, 214, max = 255),
chart.fill.color = rgb(176, 191, 214, max = 255),
series.line.width = 2,
series.line.color = rgb(255, 255, 255, max = 255),
series.marker.color = markerCols,
series.marker.transparency = 0.7,
series.marker.show = c(100),
series.marker.size = 10,
series.marker.border.width = 3,
y.bounds.minimum = 0,
y.bounds.maximum = 100,
y.bounds.units.major = 10,
y.line.width = 2,
y.line.color = rgb(141, 159, 183, max = 255),
y.grid.width = 0,
y.tick.font.color = rgb(141, 159, 183, max = 255),
y.tick.font.size = 14,
y.tick.font.family = "PT Sans Narrow, sans-serif",
x.tick.font.color = rgb(255, 255, 255, max = 255),
x.tick.font.size = 20,
x.tick.font.family = "PT Sans Narrow, sans-serif")
AreaChart(a.matrix,
type = "Area")
##### Clean style
a.matrix <- rbind(c(0.841470985,0.89120736,0.932039086,0.963558185,0.98544973,0.997494987,0.999573603,0.99166481,0.973847631,0.946300088,0.909297427,0.863209367,0.808496404,0.745705212,0.675463181,0.598472144,0.515501372,0.42737988,0.33498815,0.239249329,0.141120008,0.041580662,0.058374143,0.157745694,0.255541102,0.350783228,0.442520443,0.529836141,0.611857891,0.687766159,0.756802495,0.818277111,0.871575772,0.916165937,0.951602074,0.977530118,0.993691004,0.999923258,0.996164609,0.982452613,0.958924275,0.925814682,0.883454656,0.832267442,0.772764488,0.705540326,0.631266638,0.550685543,0.464602179,0.373876665,0.279415498,0.182162504,0.083089403,0.0168139,0.116549205,0.215119988,0.311541364,0.404849921,0.494113351,0.578439764,0.656986599,0.72896904,0.793667864,0.850436621,0.898708096,0.937999977,0.967919672,0.988168234,0.998543345,0.998941342,0.989358247,0.969889811,0.940730557,0.902171834,0.854598908,0.798487113,0.734397098),
c(0.540302306,0.453596121,0.362357754,0.267498829,0.169967143,0.070737202,0.029199522,0.128844494,0.227202095,0.323289567,0.416146837,0.504846105,0.588501117,0.666276021,0.737393716,0.801143616,0.856888753,0.904072142,0.942222341,0.970958165,0.989992497,0.99913515,0.998294776,0.98747977,0.966798193,0.936456687,0.896758416,0.848100032,0.790967712,0.725932304,0.653643621,0.574823947,0.490260821,0.400799172,0.30733287,0.210795799,0.112152527,0.012388663,0.087498983,0.186512369,0.283662185,0.377977743,0.468516671,0.554374336,0.634692876,0.708669774,0.775565879,0.834712785,0.885519517,0.927478431,0.960170287,0.983268438,0.996542097,0.999858636,0.993184919,0.976587626,0.950232592,0.914383148,0.86939749,0.8157251,0.753902254,0.684546666,0.608351315,0.526077517,0.438547328,0.346635318,0.251259843,0.153373862,0.053955421,0.046002126,0.145500034,0.243544154,0.339154861,0.431376845,0.519288654,0.602011903,0.678720047),
c(0.324921345,0.279916494,0.227856881,0.170456593,0.109251961,0.045678943,0.018870567,0.083017584,0.145378206,0.204540087,0.259017159,0.307179239,0.347172513,0.37686789,0.393889282,0.395774144,0.380296607,0.345936803,0.29241662,0.221162939,0.135533951,0.040677919,0.057009965,0.150737164,0.234264983,0.302718644,0.353065915,0.38419087,0.396616833,0.392019506,0.372694029,0.341106472,0.299598458,0.250251887,0.194878007,0.135077103,0.072318523,0.008007389,0.056474473,0.11974729,0.180414543,0.237028067,0.288027375,0.331660601,0.365915574,0.388508069,0.396981824,0.38896283,0.362573713,0.316955771,0.252782003,0.172601307,0.08086104,0.016472917,0.112658058,0.201113541,0.276317022,0.334437658,0.373578553,0.393632114,0.395860367,0.382362426,0.355578701,0.317927724,0.27160674,0.218535104,0.160391304,0.098689763,0.03485583,0.029722376,0.093666196,0.155589031,0.214070037,0.267604404,0.314529716,0.352948003,0.380683664))
colnames(a.matrix) <- c("Jan-10","Feb-10","Mar-10","Apr-10","May-10","Jun-10","Jul-10","Aug-10","Sep-10","Oct-10","Nov-10","Dec-10","Jan-11","Feb-11","Mar-11","Apr-11","May-11","Jun-11","Jul-11","Aug-11","Sep-11","Oct-11","Nov-11","Dec-11","Jan-12","Feb-12","Mar-12","Apr-12","May-12","Jun-12","Jul-12","Aug-12","Sep-12","Oct-12","Nov-12","Dec-12","Jan-13","Feb-13","Mar-13","Apr-13","May-13","Jun-13","Jul-13","Aug-13","Sep-13","Oct-13","Nov-13","Dec-13","Jan-14","Feb-14","Mar-14","Apr-14","May-14","Jun-14","Jul-14","Aug-14","Sep-14","Oct-14","Nov-14","Dec-14","Jan-15","Feb-15","Mar-15","Apr-15","May-15","Jun-15","Jul-15","Aug-15","Sep-15","Oct-15","Nov-15","Dec-15","Jan-16","Feb-16","Mar-16","Apr-16","May-16")
rownames(a.matrix) <- c("Factory A", "Factory B", "Factory C")
itemCols <- c(rgb(46,117,182, max=255),rgb(248,203,173, max=255),rgb(79,190,70, max=255))
AreaChart(a.matrix,
legend.show = TRUE,
type = "Area",
transparency = 0.4,
colors = itemCols,
series.line.width = 0,
x.tick.angle = -45,
y.tick.format = c("%",1),
y.hover.format = c("%", 3),
hover.mode = "x")
AreaChart(a.matrix,
type = "Area")
##### 100% Stacked area chart example
## Read in data
a.matrix <- as.matrix(read.csv("C:/R/consumerspending.csv", header = TRUE, row.names = 1))
## Figure out colours
col.scheme <- MakeColorGradient(a.matrix,112,48,160)
## Sort alphabetically descending
a.matrix <- AlphabeticRowNames(a.matrix)
AreaChart(a.matrix,
legend.show = TRUE,
type = "100% Stacked Area",
colors = col.scheme,
y.tick.format = c("%",1),
legend.sort.order = "reverse",
y.position = "right",
y.hover.format = c("%",3))
AreaChart(a.matrix,
type = "100% Stacked Area")
## Excel equivalent "Stacked AC"
a.matrix <- as.matrix(read.csv("C:/R/resources.csv", header = TRUE, row.names = 1))
AreaChart(a.matrix,
legend.show = TRUE,
type = "Stacked Area",
y.tick.format = c("n",1),
legend.sort.order = "reverse",
hover.mode = "x",
y.hover.format = c("n",2))
AreaChart(a.matrix,
type = "Stacked Area")
##### BASIC STYLE
a.matrix <- rbind(c(0.2,0.3,0.3,0.5,0.3,0.6,0.4,0.8,0.2,0.5,0.1,0.3),c(0.3,0.5,0.1,0.3,0.1,0.2,0.1,0.4,0.1,0.2,0.1,0.4))
rownames(a.matrix) <- c("Series1","Series2")
colnames(a.matrix) <- c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec")
myCols <- c(rgb(0,176,240, max=255), rgb(197,90,17, max=255))
myLineCols <- c(rgb(31,78,121, max=255),rgb(192,0,0, max=255))
AreaChart(a.matrix, type = "Area",
transparency = 0.4,
transpose = TRUE,
colors = myCols,
y.tick.format = c("%","2"),
series.line.width = 1,
series.line.color = myLineCols,
series.marker.show = "none",
title = "Area chart - BASIC style",
y.bounds.minimum = 0,
y.bounds.maximum = 1.01,
y.bounds.units.major = 0.1)
a.matrix <- rbind(c(50,70,70,100,80,90,90), c(50,50,30,40,70,70,90), c(30,30,50,70,40,50,50), c(0,10,10,30,20,30,10))
colnames(a.matrix) <- c("D0","D1","D2","D3","D4","D5","D6")
rownames(a.matrix) <- c("pink","green","orange","blue")
markerCols <- c(rgb(245,56,177, max=255),rgb(56,193,55, max=255),rgb(245,163,65, max=255),rgb(61,108,255, max=255))
AreaChart(a.matrix,
legend.show = FALSE,
type = "Area",
transparency = 0.4,
transpose = TRUE,
colors = rgb(255, 255, 255, max=255),
plot.fill.color = rgb(176, 191, 214, max = 255),
chart.fill.color = rgb(176, 191, 214, max = 255),
series.line.width = 2,
series.line.color = rgb(255, 255, 255, max = 255),
series.marker.color = markerCols,
series.marker.transparency = 0.7,
series.marker.show = c(100),
series.marker.size = 10,
series.marker.border.width = 3,
y.bounds.minimum = 0,
y.bounds.maximum = 100,
y.bounds.units.major = 10,
y.line.width = 2,
y.line.color = rgb(141, 159, 183, max = 255),
y.grid.width = 0,
y.tick.font.color = rgb(141, 159, 183, max = 255),
y.tick.font.size = 14,
y.tick.font.family = "PT Sans Narrow, sans-serif",
x.tick.font.color = rgb(255, 255, 255, max = 255),
x.tick.font.size = 20,
x.tick.font.family = "PT Sans Narrow, sans-serif")
a.matrix <- rbind(c(0.841470985,0.89120736,0.932039086,0.963558185,0.98544973,0.997494987,0.999573603,0.99166481,0.973847631,0.946300088,0.909297427,0.863209367,0.808496404,0.745705212,0.675463181,0.598472144,0.515501372,0.42737988,0.33498815,0.239249329,0.141120008,0.041580662,0.058374143,0.157745694,0.255541102,0.350783228,0.442520443,0.529836141,0.611857891,0.687766159,0.756802495,0.818277111,0.871575772,0.916165937,0.951602074,0.977530118,0.993691004,0.999923258,0.996164609,0.982452613,0.958924275,0.925814682,0.883454656,0.832267442,0.772764488,0.705540326,0.631266638,0.550685543,0.464602179,0.373876665,0.279415498,0.182162504,0.083089403,0.0168139,0.116549205,0.215119988,0.311541364,0.404849921,0.494113351,0.578439764,0.656986599,0.72896904,0.793667864,0.850436621,0.898708096,0.937999977,0.967919672,0.988168234,0.998543345,0.998941342,0.989358247,0.969889811,0.940730557,0.902171834,0.854598908,0.798487113,0.734397098),
c(0.540302306,0.453596121,0.362357754,0.267498829,0.169967143,0.070737202,0.029199522,0.128844494,0.227202095,0.323289567,0.416146837,0.504846105,0.588501117,0.666276021,0.737393716,0.801143616,0.856888753,0.904072142,0.942222341,0.970958165,0.989992497,0.99913515,0.998294776,0.98747977,0.966798193,0.936456687,0.896758416,0.848100032,0.790967712,0.725932304,0.653643621,0.574823947,0.490260821,0.400799172,0.30733287,0.210795799,0.112152527,0.012388663,0.087498983,0.186512369,0.283662185,0.377977743,0.468516671,0.554374336,0.634692876,0.708669774,0.775565879,0.834712785,0.885519517,0.927478431,0.960170287,0.983268438,0.996542097,0.999858636,0.993184919,0.976587626,0.950232592,0.914383148,0.86939749,0.8157251,0.753902254,0.684546666,0.608351315,0.526077517,0.438547328,0.346635318,0.251259843,0.153373862,0.053955421,0.046002126,0.145500034,0.243544154,0.339154861,0.431376845,0.519288654,0.602011903,0.678720047),
c(0.324921345,0.279916494,0.227856881,0.170456593,0.109251961,0.045678943,0.018870567,0.083017584,0.145378206,0.204540087,0.259017159,0.307179239,0.347172513,0.37686789,0.393889282,0.395774144,0.380296607,0.345936803,0.29241662,0.221162939,0.135533951,0.040677919,0.057009965,0.150737164,0.234264983,0.302718644,0.353065915,0.38419087,0.396616833,0.392019506,0.372694029,0.341106472,0.299598458,0.250251887,0.194878007,0.135077103,0.072318523,0.008007389,0.056474473,0.11974729,0.180414543,0.237028067,0.288027375,0.331660601,0.365915574,0.388508069,0.396981824,0.38896283,0.362573713,0.316955771,0.252782003,0.172601307,0.08086104,0.016472917,0.112658058,0.201113541,0.276317022,0.334437658,0.373578553,0.393632114,0.395860367,0.382362426,0.355578701,0.317927724,0.27160674,0.218535104,0.160391304,0.098689763,0.03485583,0.029722376,0.093666196,0.155589031,0.214070037,0.267604404,0.314529716,0.352948003,0.380683664))
colnames(a.matrix) <- c("Jan-10","Feb-10","Mar-10","Apr-10","May-10","Jun-10","Jul-10","Aug-10","Sep-10","Oct-10","Nov-10","Dec-10","Jan-11","Feb-11","Mar-11","Apr-11","May-11","Jun-11","Jul-11","Aug-11","Sep-11","Oct-11","Nov-11","Dec-11","Jan-12","Feb-12","Mar-12","Apr-12","May-12","Jun-12","Jul-12","Aug-12","Sep-12","Oct-12","Nov-12","Dec-12","Jan-13","Feb-13","Mar-13","Apr-13","May-13","Jun-13","Jul-13","Aug-13","Sep-13","Oct-13","Nov-13","Dec-13","Jan-14","Feb-14","Mar-14","Apr-14","May-14","Jun-14","Jul-14","Aug-14","Sep-14","Oct-14","Nov-14","Dec-14","Jan-15","Feb-15","Mar-15","Apr-15","May-15","Jun-15","Jul-15","Aug-15","Sep-15","Oct-15","Nov-15","Dec-15","Jan-16","Feb-16","Mar-16","Apr-16","May-16")
rownames(a.matrix) <- c("Factory A", "Factory B", "Factory C")
itemCols <- c(rgb(46,117,182, max=255),rgb(248,203,173, max=255),rgb(79,190,70, max=255))
AreaChart(a.matrix,
legend.show = TRUE,
type = "Area",
transparency = 0.4,
transpose = TRUE,
colors = itemCols,
series.line.width = 0,
x.tick.angle = -45,
y.tick.format = c("%",1),
y.hover.format = c("%", 3),
hover.mode = "x")
AreaChart(a.matrix,
legend.show = TRUE,
type = "Area",
transparency = 0.4,
transpose = TRUE,
colors = itemCols,
series.line.width = 0,
x.tick.angle = -45,
y.tick.format.manual = "%",
y.hover.format.manual = "%",
hover.mode = "x")
AreaChart(a.matrix,
legend.show = TRUE,
type = "Area",
transparency = 0.4,
transpose = TRUE,
colors = itemCols,
series.line.width = 0,
x.tick.angle = -45,
y.tick.format.manual = "%",
y.hovertext.manual = "%",
hover.mode = "x")
a.matrix <- as.matrix(read.csv("C:/R/consumerspending.csv", header = TRUE, row.names = 1))
## Figure out colours
col.scheme <- MakeColorGradient(a.matrix,112,48,160)
## Sort alphabetically descending
a.matrix <- AlphabeticRowNames(a.matrix)
AreaChart(a.matrix,
legend.show = TRUE,
type = "100% Stacked Area",
colors = col.scheme,
y.tick.format = c("%",1),
legend.sort.order = "reverse",
y.position = "right",
y.hover.format = c("%",3))
a.matrix <- as.matrix(read.csv("C:/R/consumerspending.csv", header = TRUE, row.names = 1))
## Figure out colours
col.scheme <- MakeColorGradient(a.matrix,112,48,160)
## Sort alphabetically descending
a.matrix <- AlphabeticRowNames(a.matrix)
AreaChart(a.matrix,
legend.show = TRUE,
type = "100% Stacked Area",
colors = col.scheme,
y.tick.format = c("%",1),
legend.sort.order = "reverse",
y.position = "right",
y.hovertext.manual = "%")
a.matrix <- as.matrix(read.csv("C:/R/consumerspending.csv", header = TRUE, row.names = 1))
## Figure out colours
col.scheme <- MakeColorGradient(a.matrix,112,48,160)
## Sort alphabetically descending
a.matrix <- AlphabeticRowNames(a.matrix)
AreaChart(a.matrix,
legend.show = TRUE,
type = "100% Stacked Area",
colors = col.scheme,
transpose = TRUE,
y.tick.format = c("%",1),
legend.sort.order = "reverse",
y.position = "right",
y.hovertext.manual = "%")
AreaChart(a.matrix,
type = "100% Stacked Area")
AreaChart(a.matrix,
legend.show = TRUE,
type = "100% Stacked Area",
colors = col.scheme,
transpose = TRUE,
transparency = 1,
y.tick.format = c("%",1),
legend.sort.order = "reverse",
y.position = "right",
y.hovertext.manual = "%")
a.matrix <- as.matrix(read.csv("C:/R/resources.csv", header = TRUE, row.names = 1))
AreaChart(a.matrix,
legend.show = TRUE,
type = "Stacked Area",
y.tick.format = c("n",1),
legend.sort.order = "reverse",
hover.mode = "x",
y.hover.format = c("n",2))
a.matrix <- as.matrix(read.csv("C:/R/resources.csv", header = TRUE, row.names = 1))
AreaChart(a.matrix,
legend.show = TRUE,
type = "Stacked Area",
y.tick.format = c("n",1),
legend.sort.order = "reverse",
hover.mode = "x",
y.hovertext.manual = ".2f")
a.matrix <- as.matrix(read.csv("C:/R/resources.csv", header = TRUE, row.names = 1))
AreaChart(a.matrix,
legend.show = TRUE,
type = "Stacked Area",
transpose = TRUE,
y.tick.format = c("n",1),
legend.sort.order = "reverse",
hover.mode = "x",
y.hovertext.manual = ".2f")
AreaChart(a.matrix,
legend.show = TRUE,
type = "Stacked Area",
transpose = TRUE,
y.tick.format = c("n",1),
legend.sort.order = "reverse",
hover.mode = "x",
y.hovertext.manual = ".3f")
AreaChart(a.matrix,
legend.show = TRUE,
type = "Stacked Area",
transpose = TRUE,
y.tick.format = c("n",1),
legend.sort.order = "reverse",
hover.mode = "x",
y.hovertext.decimals = 2)
library(flipStandardCharts)
a.matrix <- as.matrix(read.csv("C:/R/resources.csv", header = TRUE, row.names = 1))
AreaChart(a.matrix,
legend.show = TRUE,
type = "Stacked Area",
transpose = TRUE,
y.tick.format = c("n",1),
legend.sort.order = "reverse",
hover.mode = "x",
y.hovertext.decimals = 2)
AreaChart(a.matrix,
type = "Stacked Area")
a.matrix <- as.matrix(read.csv("C:/R/resources.csv", header = TRUE, row.names = 1))
AreaChart(a.matrix,
legend.show = TRUE,
type = "Stacked Area",
transpose = TRUE,
y.tick.format = c("n",1),
legend.sort.order = "reverse",
hover.mode = "x",
y.hovertext.decimals = 2)
AreaChart(a.matrix,
legend.show = TRUE,
type = "Stacked Area",
transpose = TRUE,
y.tick.format = c("n",1),
legend.sort.order = "reverse",
hover.mode = "x",
y.tick.format.decimals = 2)
AreaChart(a.matrix,
legend.show = TRUE,
type = "Stacked Area",
transpose = TRUE,
y.tick.format = c("n",1),
legend.sort.order = "reverse",
hover.mode = "x",
y.tick.decimals = 2)
AreaChart(a.matrix,
legend.show = TRUE,
type = "Stacked Area",
transpose = TRUE,
legend.sort.order = "reverse",
hover.mode = "x",
y.tick.decimals = 2)
AreaChart(a.matrix,
legend.show = TRUE,
type = "Stacked Area",
transpose = TRUE,
legend.sort.order = "reverse",
hover.mode = "x",
y.tick.decimals = 1)
AreaChart(a.matrix,
legend.show = TRUE,
type = "Stacked Area",
transpose = TRUE,
legend.sort.order = "reverse",
hover.mode = "x",
y.tick.decimals = 6)
