7.2289156626506, 7.2289156626506, 9.63855421686747, 9.63855421686747,
8.43373493975904, 10.8433734939759, 9.63855421686747, 12.0481927710843,
12.0481927710843, 8.43373493975904, 10.8433734939759, 14.4578313253012,
10.8433734939759, 13.2530120481928, 18.0722891566265, 15.6626506024096,
6.02409638554217, 7.2289156626506, 7.2289156626506, 9.33333333333333,
3.11111111111111, 10.6666666666667, 9.77777777777778, 1.33333333333333,
11.1111111111111, 5.77777777777778, 2.66666666666667, 6.66666666666667,
11.5555555555556, 3.55555555555556, 12.8888888888889, 7.55555555555556,
3.55555555555556, 10.6666666666667, 8.44444444444444, 3.11111111111111,
9.33333333333333, 9.33333333333333, 4, 12.8888888888889, 14.2222222222222,
5.77777777777778, 17.3333333333333, 5.77777777777778, 2.66666666666667,
8.44444444444444), .Dim = c(27L, 3L), statistic = "Column %", .Dimnames = list(
c("Colas (e.g., Coca Cola, Pepsi Max)?", "Sparkling mineral water",
"Coffee", "Colas (e.g., Coca Cola, Pepsi Max)?", "Sparkling mineral water",
"Coffee", "Colas (e.g., Coca Cola, Pepsi Max)?", "Sparkling mineral water",
"Coffee", "Colas (e.g., Coca Cola, Pepsi Max)?", "Sparkling mineral water",
"Coffee", "Colas (e.g., Coca Cola, Pepsi Max)?", "Sparkling mineral water",
"Coffee", "Colas (e.g., Coca Cola, Pepsi Max)?", "Sparkling mineral water",
"Coffee", "Colas (e.g., Coca Cola, Pepsi Max)?", "Sparkling mineral water",
"Coffee", "Colas (e.g., Coca Cola, Pepsi Max)?", "Sparkling mineral water",
"Coffee", "Colas (e.g., Coca Cola, Pepsi Max)?", "Sparkling mineral water",
"Coffee"), c("Colas (e.g., Coca Cola, Pepsi Max)?", "Sparkling mineral water",
"Coffee")), name = "BANNER by Q4. Drink categorical", questions = c("BANNER",
"Q4. Drink categorical")), transpose = FALSE, type = "Labeled Bubbleplot", subtitle.text = FALSE),
"ex23 - LScatter - Span in banner, two columns" = list(y = structure(c(13.0769230769231, 11.5384615384615, 10, 9.23076923076923,
11.5384615384615, 9.23076923076923, 11.5384615384615, 17.6923076923077,
6.15384615384615, 14.7058823529412, 14.7058823529412, 8.82352941176471,
13.9705882352941, 8.08823529411765, 9.55882352941176, 11.0294117647059,
13.2352941176471, 5.88235294117647, 10.6382978723404, 4.25531914893617,
12.7659574468085, 6.38297872340426, 12.7659574468085, 17.0212765957447,
10.6382978723404, 19.1489361702128, 6.38297872340426, 8.33333333333333,
5.55555555555556, 13.8888888888889, 13.8888888888889, 8.33333333333333,
5.55555555555556, 19.4444444444444, 16.6666666666667, 8.33333333333333,
10.8333333333333, 10, 7.5, 9.16666666666667, 10.8333333333333,
9.16666666666667, 13.3333333333333, 20, 9.16666666666667, 10.4761904761905,
12.3809523809524, 5.71428571428571, 17.1428571428571, 10.4761904761905,
9.52380952380952, 12.3809523809524, 14.2857142857143, 7.61904761904762
), .Dim = c(9L, 6L), statistic = "Column %", .Dimnames = list(
c("18 to 24", "25 to 29", "30 to 34", "35 to 39", "40 to 44",
"45 to 49", "50 to 54", "55 to 64", "65 or more"), c("Male",
"Female", "Male", "Female", "Male", "Female")), name = "Q3. Age by BANNER2", questions = c("Q3. Age",
"BANNER2")), transpose = FALSE, type = "Labeled Scatterplot", subtitle.text = NULL),
"ex24 - LScatter - Span in banner, three columns" = list(y = structure(c(13.0769230769231, 11.5384615384615, 10, 9.23076923076923,
11.5384615384615, 9.23076923076923, 11.5384615384615, 17.6923076923077,
6.15384615384615, 10.6382978723404, 4.25531914893617, 12.7659574468085,
6.38297872340426, 12.7659574468085, 17.0212765957447, 10.6382978723404,
19.1489361702128, 6.38297872340426, 10.8333333333333, 10, 7.5,
9.16666666666667, 10.8333333333333, 9.16666666666667, 13.3333333333333,
20, 9.16666666666667, 14.7058823529412, 14.7058823529412, 8.82352941176471,
13.9705882352941, 8.08823529411765, 9.55882352941176, 11.0294117647059,
13.2352941176471, 5.88235294117647, 8.33333333333333, 5.55555555555556,
13.8888888888889, 13.8888888888889, 8.33333333333333, 5.55555555555556,
19.4444444444444, 16.6666666666667, 8.33333333333333, 10.4761904761905,
12.3809523809524, 5.71428571428571, 17.1428571428571, 10.4761904761905,
9.52380952380952, 12.3809523809524, 14.2857142857143, 7.61904761904762
), .Dim = c(9L, 6L), statistic = "Column %", .Dimnames = list(
c("18 to 24", "25 to 29", "30 to 34", "35 to 39", "40 to 44",
"45 to 49", "50 to 54", "55 to 64", "65 or more"), c("Colas (e.g., Coca Cola, Pepsi Max)?",
"Sparkling mineral water", "Coffee", "Colas (e.g., Coca Cola, Pepsi Max)?",
"Sparkling mineral water", "Coffee")), name = "Span in Banner", questions = c("Q3. Age",
"BANNER1")), transpose = FALSE, type = "Labeled Bubbleplot", subtitle.text = NULL),
"ex25 - LScatter - Crossed grid / Array " = list(y = structure(c(2.5, 65.625, 18.125, 8.75, 67.5, 10, 8.125, 100,
1.875, 55.625, 50.625, 3.75, 53.125, 33.125, 21.875, 100, 7.5,
22.5, 12.5, 11.25, 40.625, 8.75, 33.125, 100, 65, 23.75, 3.125,
35.625, 9.375, 8.75, 8.75, 100, 17.5, 7.5, 52.5, 18.125, 13.75,
53.125, 16.25, 100, 22.5, 3.75, 31.25, 18.75, 3.125, 42.5, 17.5,
100, 8.125, 25.625, 12.5, 14.375, 30, 8.75, 32.5, 100, 90, 13.125,
3.75, 54.375, 3.125, 4.375, 4.375, 100, 1.25, 75, 61.25, 0, 73.75,
41.875, 7.5, 100, 96.25, 91.875, 88.75, 81.25, 95, 87.5, 58.125,
100, 10.1796407185629, 49.7005988023952, 26.3473053892216, 8.38323353293413,
53.8922155688623, 10.1796407185629, 11.377245508982, 100, 1.79640718562874,
61.6766467065868, 59.2814371257485, 0.598802395209581, 62.2754491017964,
28.7425149700599, 13.1736526946108, 100, 10.7784431137725, 23.3532934131737,
13.1736526946108, 8.38323353293413, 46.1077844311377, 5.98802395209581,
26.9461077844311, 100, 65.2694610778443, 19.7604790419162, 5.98802395209581,
40.1197604790419, 8.98203592814371, 4.19161676646707, 8.38323353293413,
100, 27.5449101796407, 10.7784431137725, 51.497005988024, 13.1736526946108,
18.562874251497, 47.9041916167665, 7.78443113772455, 100, 29.940119760479,
5.38922155688623, 31.7365269461078, 16.7664670658683, 4.79041916167665,
46.7065868263473, 14.3712574850299, 100, 10.1796407185629, 21.5568862275449,
5.98802395209581, 14.3712574850299, 29.3413173652695, 4.19161676646707,
44.9101796407186, 100, 94.6107784431138, 16.1676646706587, 2.39520958083832,
53.2934131736527, 3.59281437125748, 3.59281437125748, 1.19760479041916,
100, 0, 77.8443113772455, 67.6646706586826, 0, 79.0419161676647,
39.5209580838323, 3.59281437125748, 100, 100, 92.814371257485,
92.814371257485, 76.6467065868264, 95.2095808383233, 86.2275449101796,
56.8862275449102, 100), .Dim = c(8L, 10L, 2L), statistic = "Column %", .Dimnames = list(
c("Coke", "Diet Coke", "Coke Zero", "Pepsi", "Diet Pepsi",
"Pepsi Max", "None of these", "NET"), c("Feminine", "Health-conscious",
"Innocent", "Older", "Open to new experiences", "Rebellious",
"Sleepy", "Traditional", "Weight-conscious", "NET"), c("Male",
"Female")), name = "Q5.  Brand associations by Q2. Gender", questions = c("Q5.  Brand associations",
"Q2. Gender")), transpose = FALSE, type = "Labeled Scatterplot", subtitle.text = NULL),
"ex26 - LScatter - R-created table Bubble" = list(y = structure(c(1, 2, 3, 4, 5, 0, 0, 0, 1, 0, 2, 2, 2, 2, 2), .Dim = c(5L,
3L), .Dimnames = list(c("1", "2", "3", "4", "5"), c("1", "2",
""))), transpose = FALSE, type = "Labeled Bubbleplot", subtitle.text = NULL),
"ex27 - LScatter - R-created table Scatter" = list(y = structure(c(1, 2, 3, 4, 5, 0, 0, 0, 1, 0), .Dim = c(5L, 2L), .Dimnames = list(
c("1", "2", "3", "4", "5"), c("1", "2"))),
transpose = FALSE, type = "Labeled Scatterplot", subtitle.text = NULL),
"ex28 - LScatter - R-created labelled matrix, two cols" = list(y = structure(c(1, 2, 3, 4, 5, 2, 3, 4, 5, 6), .Dim = c(5L, 2L), .Dimnames = list(
c("A", "B", "C", "D", "E"), c("A", "B"))), transpose = FALSE, type = "Labeled Scatterplot", subtitle.text = NULL),
"ex29 - Data - Accept single column matrix with no col label" = list(y = structure(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 100), .Dim = c(10L, 1L
), .Dimnames = list(c("2001", "2002", "2003", "2004", "2005",
"2006", "2007", "2008", "2009", "Total"), "Dog"), name = "Data single col matrix no label"), transpose = FALSE, type = "Area", subtitle.text = NULL),
"ex30 - Data - Accept single column vector with rownames in attribute 'name'" = list(y = structure(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 100), .Dim = c(10L, 1L
), .Names = c("2001", "2002", "2003", "2004", "2005", "2006",
"2007", "2008", "2009", "Total"), name = "Data single col names in attributes"), transpose = FALSE, type = "Area", subtitle.text = NULL),
"ex31 - Data with NaN's" = list(y = structure(c(1, 2, 3, 4, 5, 6, 7, NaN, 9, 10, 2, 3, NaN, 5, 6,
7, 8, NaN, 10, 11), .Dim = c(10L, 2L), .Dimnames = list(c("A",
"B", "C", "D", "E", "F", "G", "H", "I", "J"), c("A", "B"))), transpose = TRUE, type = "Line", subtitle.text = NULL),
"ex32 - Data frame passed to Scatter Plot" = list(y = structure(list(A = c(1, 2, 3, 4, 5, 6, 7, NaN, 9, 10), B = c(2,
3, NaN, 5, 6, 7, 8, NaN, 10, 11)), .Names = c("A", "B"), row.names = c("A",
"B", "C", "D", "E", "F", "G", "H", "I", "J"), class = "data.frame"), transpose = FALSE, type = "Labeled Scatterplot", subtitle.text = NULL))
## With the introduction of flipData::GetTidyTwoDimensionalArray unnamed matrices et c. get labelled in that function and so the below cases are not
## errors any more.
# "1 Cannot take unnamed matrix" = list(y = structure(c(0, 22, 18, 15, 16, 19, 13, 18, 27, 12, 0, 22, 21, 18, 20, 16, 14, 22, 24, 10),
#                                                                   .Dim = c(10L, 2L), statistic = "n", name = "Y.Pick.One.by.X.Pick.One.Area.Chart", questions =
#                                                                    c("Q3. Age", "Q2. Gender")), transpose = TRUE, type = "Area"),
# "5 Cannot take unnamed matrix" = list(y = structure(c(0, 22, 18, 15, 16, 19, 13, 18, 27, 12, 0, 22, 21, 18, 20, 16, 14, 22, 24, 10),
#                                                                   .Dim = c(10L, 2L), statistic = "n", name = "Y.Pick.One.by.X.Pick.One.Area.Chart", questions =
#                                                                    c("Q3. Age", "Q2. Gender")), transpose = TRUE, type = "Line"),
qTab.bad.examples <- list("2 Cannot take a numeric vector" = list(y = sample(1:10, 10), transpose = FALSE, type = "Area"),
"3 Cannot take a character vector" = list(y = sample(LETTERS[1:10], 10), transpose = FALSE, type = "Area"),
"4 Cannot take a character matrix" = list(y = character.matrix, transpose = FALSE, type = "Area"),
"6 Cannot take a numeric vector" = list(y = sample(1:10, 10), transpose = FALSE, type = "Line"),
"7 Cannot take a character vector" = list(y = sample(LETTERS[1:10], 10), transpose = FALSE, type = "Line"),
"8 Cannot take a character matrix" = list(y = character.matrix, transpose = FALSE, type = "Line"),
"9 - ex26 - LScatter - Data Frame input" = list(y = structure(list(x = c(2.5, 1.875, 7.5, 65, 17.5, 22.5, 8.125,
90, 1.25, 96.25, 65.625, 55.625, 22.5, 23.75, 7.5, 3.75, 25.625,
13.125, 75, 91.875, 18.125, 50.625, 12.5, 3.125, 52.5, 31.25,
12.5, 3.75, 61.25, 88.75, 8.75, 3.75, 11.25, 35.625, 18.125,
18.75, 14.375, 54.375, 0, 81.25, 67.5, 53.125, 40.625, 9.375,
13.75, 3.125, 30, 3.125, 73.75, 95, 10, 33.125, 8.75, 8.75, 53.125,
42.5, 8.75, 4.375, 41.875, 87.5, 8.125, 21.875, 33.125, 8.75,
16.25, 17.5, 32.5, 4.375, 7.5, 58.125, 100, 100, 100, 100, 100,
100, 100, 100, 100, 100), y = c(10.1796407185629, 1.79640718562874,
10.7784431137725, 65.2694610778443, 27.5449101796407, 29.940119760479,
10.1796407185629, 94.6107784431138, 0, 100, 49.7005988023952,
61.6766467065868, 23.3532934131737, 19.7604790419162, 10.7784431137725,
5.38922155688623, 21.5568862275449, 16.1676646706587, 77.8443113772455,
92.814371257485, 26.3473053892216, 59.2814371257485, 13.1736526946108,
5.98802395209581, 51.497005988024, 31.7365269461078, 5.98802395209581,
2.39520958083832, 67.6646706586826, 92.814371257485, 8.38323353293413,
0.598802395209581, 8.38323353293413, 40.1197604790419, 13.1736526946108,
16.7664670658683, 14.3712574850299, 53.2934131736527, 0, 76.6467065868264,
53.8922155688623, 62.2754491017964, 46.1077844311377, 8.98203592814371,
18.562874251497, 4.79041916167665, 29.3413173652695, 3.59281437125748,
79.0419161676647, 95.2095808383233, 10.1796407185629, 28.7425149700599,
5.98802395209581, 4.19161676646707, 47.9041916167665, 46.7065868263473,
4.19161676646707, 3.59281437125748, 39.5209580838323, 86.2275449101796,
11.377245508982, 13.1736526946108, 26.9461077844311, 8.38323353293413,
7.78443113772455, 14.3712574850299, 44.9101796407186, 1.19760479041916,
3.59281437125748, 56.8862275449102, 100, 100, 100, 100, 100,
100, 100, 100, 100, 100), label = structure(c(1L,
2L, 3L, 5L, 6L, 7L, 8L, 9L, 10L, 4L, 1L, 2L, 3L, 5L, 6L, 7L,
8L, 9L, 10L, 4L, 1L, 2L, 3L, 5L, 6L, 7L, 8L, 9L, 10L, 4L, 1L,
2L, 3L, 5L, 6L, 7L, 8L, 9L, 10L, 4L, 1L, 2L, 3L, 5L, 6L, 7L,
8L, 9L, 10L, 4L, 1L, 2L, 3L, 5L, 6L, 7L, 8L, 9L, 10L, 4L, 1L,
2L, 3L, 5L, 6L, 7L, 8L, 9L, 10L, 4L, 1L, 2L, 3L, 5L, 6L, 7L,
8L, 9L, 10L, 4L), .Label = c("Feminine", "Health-conscious",
"Innocent", "NET", "Older", "Open to new experiences", "Rebellious",
"Sleepy", "Traditional", "Weight-conscious"), class = "factor"),
group = structure(c(1L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 3L, 3L, 3L, 3L, 3L, 3L,
3L, 3L, 3L, 3L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 7L,
7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 4L, 4L, 4L, 4L, 4L, 4L,
4L, 4L, 4L, 4L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 6L,
6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 5L, 5L, 5L, 5L, 5L, 5L,
5L, 5L, 5L, 5L), .Label = c("Coke", "Coke Zero", "Diet Coke",
"Diet Pepsi", "NET", "None of these", "Pepsi", "Pepsi Max"
), class = "factor")), .Names = c("x", "y", "label",
"group"
), row.names = c(NA, -80L), class = "data.frame"),
transpose = FALSE, type = "Labeled Scatterplot", subtitle.text = NULL))
### To create diffs between Plotly chart objects we need to store the approved examples.
### Run the below code whenever a change has been made that you're happy with and you've experienced a diff.
######  For each plotly plot, there are two lists created:
library(plotly)
replace_zero_length <- function(x) {
lapply(x, function(x) {
if (is.list(x)){
replace_null(x)
} else{
if(length(x) == 0) "" else(x)
}
})
}
replace_null <- function(x) {
lapply(x, function(x) {
if (is.list(x)){
replace_null(x)
} else{
if(is.null(x)) "" else(x)
}
})
}
for (i in 1:length(qTab.examples))
{
print(names(qTab.examples[i]))
example.number <- i
if (qTab.examples[[i]]$type == "Labeled Scatterplot" || qTab.examples[[i]]$type == "Labeled Bubbleplot")
{
assign(paste("ex", i, ".1", sep = ""), as.list(unlist(Chart(y = qTab.examples[[i]]$y, type = qTab.examples[[i]]$type))))
assign(paste("ex", i, ".2", sep = ""), as.list(c(blank = "empty")))
}
else if (qTab.examples[[i]]$type == "Pie" || qTab.examples[[i]]$type == "Donut")
{
assign(paste("ex", i, ".1", sep = ""), as.list(unlist(Chart(y = qTab.examples[[example.number]]$y, type = qTab.examples[[example.number]]$type, transpose = qTab.examples[[example.number]]$transpose, title = attr(qTab.examples[[example.number]]$y, "name")))[[1]]))
assign(paste("ex", i, ".2", sep = ""), as.list(unlist(Chart(y = qTab.examples[[example.number]]$y, type = qTab.examples[[example.number]]$type, transpose = qTab.examples[[example.number]]$transpose, title = attr(qTab.examples[[example.number]]$y, "name")))[[2]]))
} else {
assign(paste("ex", i, ".1", sep = ""), as.list(plotly_build(Chart(y = qTab.examples[[example.number]]$y, type = qTab.examples[[example.number]]$type, transpose = qTab.examples[[example.number]]$transpose, title = attr(qTab.examples[[example.number]]$y, "name")))[[1]]))
print("success 1")
assign(paste("ex", i, ".2", sep = ""), as.list(plotly_build(Chart(y = qTab.examples[[example.number]]$y, type = qTab.examples[[example.number]]$type, transpose = qTab.examples[[example.number]]$transpose, title = attr(qTab.examples[[example.number]]$y, "name")))[[2]]))
print("success 2")
}
}
ex1.1 <- replace_zero_length(ex1.1)
ex2.1 <- replace_zero_length(ex2.1)
ex3.1 <- replace_zero_length(ex3.1)
ex4.1 <- replace_zero_length(ex4.1)
ex5.1 <- replace_zero_length(ex5.1)
ex6.1 <- replace_zero_length(ex6.1)
ex7.1 <- replace_zero_length(ex7.1)
ex8.1 <- replace_zero_length(ex8.1)
ex9.1 <- replace_zero_length(ex9.1)
ex10.1 <- replace_zero_length(ex10.1)
ex11.1 <- replace_zero_length(ex11.1)
ex12.1 <- replace_zero_length(ex12.1)
ex13.1 <- replace_zero_length(ex13.1)
ex14.1 <- replace_zero_length(ex14.1)
ex15.1 <- replace_zero_length(ex15.1)
ex16.1 <- replace_zero_length(ex16.1)
ex17.1 <- replace_zero_length(ex17.1)
ex18.1 <- replace_zero_length(ex18.1)
ex19.1 <- replace_zero_length(ex19.1)
ex20.1 <- replace_zero_length(ex20.1)
ex21.1 <- replace_zero_length(ex21.1)
ex22.1 <- replace_zero_length(ex22.1)
ex23.1 <- replace_zero_length(ex23.1)
ex24.1 <- replace_zero_length(ex24.1)
ex25.1 <- replace_zero_length(ex25.1)
ex26.1 <- replace_zero_length(ex26.1)
ex27.1 <- replace_zero_length(ex27.1)
ex28.1 <- replace_zero_length(ex28.1)
ex29.1 <- replace_zero_length(ex29.1)
ex30.1 <- replace_zero_length(ex30.1)
ex31.1 <- replace_zero_length(ex31.1)
ex32.1 <- replace_zero_length(ex32.1)
ex1.2 <- replace_zero_length(ex1.2)
ex2.2 <- replace_zero_length(ex2.2)
ex3.2 <- replace_zero_length(ex3.2)
ex4.2 <- replace_zero_length(ex4.2)
ex5.2 <- replace_zero_length(ex5.2)
ex6.2 <- replace_zero_length(ex6.2)
ex7.2 <- replace_zero_length(ex7.2)
ex8.2 <- replace_zero_length(ex8.2)
ex9.2 <- replace_zero_length(ex9.2)
ex10.2 <- replace_zero_length(ex10.2)
ex11.2 <- replace_zero_length(ex11.2)
ex12.2 <- replace_zero_length(ex12.2)
ex13.2 <- replace_zero_length(ex13.2)
ex14.2 <- replace_zero_length(ex14.2)
ex15.2 <- replace_zero_length(ex15.2)
ex16.2 <- replace_zero_length(ex16.2)
ex17.2 <- replace_zero_length(ex17.2)
ex18.2 <- replace_zero_length(ex18.2)
ex19.2 <- replace_zero_length(ex19.2)
ex20.2 <- replace_zero_length(ex20.2)
ex21.2 <- replace_zero_length(ex21.2)
ex22.2 <- replace_zero_length(ex22.2)
ex23.2 <- replace_zero_length(ex23.2)
ex24.2 <- replace_zero_length(ex24.2)
ex25.2 <- replace_zero_length(ex25.2)
ex26.2 <- replace_zero_length(ex26.2)
ex27.2 <- replace_zero_length(ex27.2)
ex28.2 <- replace_zero_length(ex28.2)
ex29.2 <- replace_zero_length(ex29.2)
ex30.2 <- replace_zero_length(ex30.2)
ex31.2 <- replace_zero_length(ex31.2)
ex32.2 <- replace_zero_length(ex32.2)
ex1.1 <- replace_null(ex1.1)
ex2.1 <- replace_null(ex2.1)
ex3.1 <- replace_null(ex3.1)
ex4.1 <- replace_null(ex4.1)
ex5.1 <- replace_null(ex5.1)
ex6.1 <- replace_null(ex6.1)
ex7.1 <- replace_null(ex7.1)
ex8.1 <- replace_null(ex8.1)
ex9.1 <- replace_null(ex9.1)
ex10.1 <- replace_null(ex10.1)
ex11.1 <- replace_null(ex11.1)
ex12.1 <- replace_null(ex12.1)
ex13.1 <- replace_null(ex13.1)
ex14.1 <- replace_null(ex14.1)
ex15.1 <- replace_null(ex15.1)
ex16.1 <- replace_null(ex16.1)
ex17.1 <- replace_null(ex17.1)
ex18.1 <- replace_null(ex18.1)
ex19.1 <- replace_null(ex19.1)
ex20.1 <- replace_null(ex20.1)
ex21.1 <- replace_null(ex21.1)
ex22.1 <- replace_null(ex22.1)
ex23.1 <- replace_null(ex23.1)
ex24.1 <- replace_null(ex24.1)
ex25.1 <- replace_null(ex25.1)
ex26.1 <- replace_null(ex26.1)
ex27.1 <- replace_null(ex27.1)
ex28.1 <- replace_null(ex28.1)
ex29.1 <- replace_null(ex29.1)
ex30.1 <- replace_null(ex30.1)
ex31.1 <- replace_null(ex31.1)
ex32.1 <- replace_null(ex32.1)
ex1.2 <- replace_null(ex1.2)
ex2.2 <- replace_null(ex2.2)
ex3.2 <- replace_null(ex3.2)
ex4.2 <- replace_null(ex4.2)
ex5.2 <- replace_null(ex5.2)
ex6.2 <- replace_null(ex6.2)
ex7.2 <- replace_null(ex7.2)
ex8.2 <- replace_null(ex8.2)
ex9.2 <- replace_null(ex9.2)
ex10.2 <- replace_null(ex10.2)
ex11.2 <- replace_null(ex11.2)
ex12.2 <- replace_null(ex12.2)
ex13.2 <- replace_null(ex13.2)
ex14.2 <- replace_null(ex14.2)
ex15.2 <- replace_null(ex15.2)
ex16.2 <- replace_null(ex16.2)
ex17.2 <- replace_null(ex17.2)
ex18.2 <- replace_null(ex18.2)
ex19.2 <- replace_null(ex19.2)
ex20.2 <- replace_null(ex20.2)
ex21.2 <- replace_null(ex21.2)
ex22.2 <- replace_null(ex22.2)
ex23.2 <- replace_null(ex23.2)
ex24.2 <- replace_null(ex24.2)
ex25.2 <- replace_null(ex25.2)
ex26.2 <- replace_null(ex26.2)
ex27.2 <- replace_null(ex27.2)
ex28.2 <- replace_null(ex28.2)
ex29.2 <- replace_null(ex29.2)
ex30.2 <- replace_null(ex30.2)
ex31.2 <- replace_null(ex31.2)
ex32.2 <- replace_null(ex32.2)
##### End of repeated code for diffs setting
qColors <- c(grDevices::rgb(91, 155, 213, 255, maxColorValue = 255), # blue
grDevices::rgb(237, 125, 49, 255, maxColorValue = 255), # orange
grDevices::rgb(165, 165, 165, 255, maxColorValue = 255), # grey
grDevices::rgb(30, 192, 0, 255, maxColorValue = 255), # yellow
grDevices::rgb(68, 114, 196, 255, maxColorValue = 255), # darker blue
grDevices::rgb(112, 173, 71, 255, maxColorValue = 255), # green
grDevices::rgb(37, 94, 145, 255, maxColorValue = 255), # even darker blue
grDevices::rgb(158, 72, 14, 255, maxColorValue = 255), # blood
grDevices::rgb(99, 99, 99, 255, maxColorValue = 255), # dark grey
grDevices::rgb(153, 115, 0, 255, maxColorValue = 255), # brown
grDevices::rgb(38, 68, 120, 255, maxColorValue = 255), # very dark blue
grDevices::rgb(67, 104, 43, 255, maxColorValue = 255), # darker green
grDevices::rgb(0, 0, 0, 255, maxColorValue = 255), # black
grDevices::rgb(255, 35, 35, 255, maxColorValue = 255)) # red
plotlySymbols <- plotlySymbols <- c(0,100,200,300,1,101,201,301,2,102,202,302,3,103,203,303,4,104,204,304,5,105,205,305,6,106,206,306,7,107,207,307,8,108,208,308,9,109,209,309,10,110,210,310,11,111,211,311,12,112,212,312,13,113,213,313,14,114,214,314,15,115,215,315,16,116,216,316,17,117,217,317,18,118,218,318,19,119,219,319,20,120,220,320,21,121,221,321,22,122,222,322,23,123,223,323,24,124,224,324,25,125,26,126,27,127,28,128,29,129,30,130,31,131,32,132,33,133,34,134,35,135,36,136,37,137,38,138,39,139,40,140,41,141,42,142,43,143,44,144)
available.fonts <- c("Arial Black", "Arial", "Comic Sans MS", "Courier New", "Georgia", "Impact", "Lucida Console", "Lucida Sans Unicode", "Marlett", "Symbol", "Tahoma", "Times New Roman", "Trebuchet MS", "Verdana", "Webdings")
devtools::use_data(qTab.examples, qTab.bad.examples, character.matrix, qColors, plotlySymbols, available.fonts, x.data, y.data, var1, var2, var3, var4, var5, alpha.five, logic.vector, logic.vector.named, named.vector.a, named.vector.b, factor.a, factor.b, x.dates, z, good.examples, bad.examples, errorAsChartMatrix.examples, errorIsChartMatrix.examples,
ex1.1, ex2.1, ex3.1, ex4.1, ex5.1, ex6.1, ex7.1, ex8.1, ex9.1, ex10.1, ex11.1, ex12.1, ex13.1, ex14.1, ex15.1, ex16.1, ex17.1, ex18.1, ex19.1, ex20.1, ex21.1, ex22.1, ex23.1, ex24.1, ex25.1, ex26.1, ex27.1, ex28.1, ex29.1, ex30.1, ex31.1, ex32.1,
ex1.2, ex2.2, ex3.2, ex4.2, ex5.2, ex6.2, ex7.2, ex8.2, ex9.2, ex10.2, ex11.2, ex12.2, ex13.2, ex14.2, ex15.2, ex16.2, ex17.2, ex18.2, ex19.2, ex20.2, ex21.2, ex22.2, ex23.2, ex24.2, ex25.2, ex26.2, ex27.2, ex28.2, ex29.2, ex30.2, ex31.2, ex32.2,
internal = FALSE, overwrite = TRUE)
devtools::use_data(qColors, plotlySymbols, available.fonts, internal = TRUE, overwrite = TRUE)
library(plotly)
library(flipChartBasics)
library(testthat)
for (i in 1:length(qTab.examples))
{
image.test <- FALSE
## Run image and chart output
print(Chart(y = qTab.examples[[i]]$y, type = qTab.examples[[i]]$type, transpose = qTab.examples[[i]]$transpose, title = attr(qTab.examples[[i]]$y, "name"), y.title = qTab.examples[[i]]$y.title))
if (qTab.examples[[i]]$type == "Labeled Scatterplot" || qTab.examples[[i]]$type == "Labeled Bubbleplot")
{
test.1 <- as.list(unlist(Chart(y = qTab.examples[[i]]$y, type = qTab.examples[[i]]$type)))
# test.2 <- as.list(c(blank = "empty"))
}
else if (qTab.examples[[i]]$type == "Pie" || qTab.examples[[i]]$type == "Donut")
{
test.1 <- as.list(unlist(Chart(y = qTab.examples[[i]]$y, type = qTab.examples[[i]]$type, transpose = qTab.examples[[i]]$transpose, title = attr(qTab.examples[[i]]$y, "name")))[[1]])
# test.2 <- as.list(unlist(Chart(y = qTab.examples[[i]]$y, type = qTab.examples[[i]]$type, transpose = qTab.examples[[i]]$transpose, title = attr(qTab.examples[[i]]$y, "name"), subtitle.text = qTab.examples[[i]]$subtitle.text))[[2]])
} else {
test.1 <- as.list(plotly_build(Chart(y = qTab.examples[[i]]$y, type = qTab.examples[[i]]$type, transpose = qTab.examples[[i]]$transpose, title = attr(qTab.examples[[i]]$y, "name")))[[1]])
# test.2 <- as.list(plotly_build(Chart(y = qTab.examples[[i]]$y, type = qTab.examples[[i]]$type, transpose = qTab.examples[[i]]$transpose, title = attr(qTab.examples[[i]]$y, "name"), subtitle.text = qTab.examples[[i]]$subtitle.text))[[2]])
}
approved.1 <- get(paste("ex", i, ".1", sep=""))
# approved.2 <- get(paste("ex", i, ".2", sep=""))
for (a in 1:length(test.1))
{
if(length(test.1[[a]]) > 0)
{
for (b in 1:length(test.1[[a]]))
{
if (length(test.1[[a]][[b]]) > 0)
{
for (c in 1:length(test.1[[a]][[b]]))
{
if (length(test.1[[a]][[b]][[c]]) > 0)
{
for (d in 1:length(test.1[[a]][[b]][[c]]))
{
if (length(test.1[[a]][[b]][[c]][[d]]) > 0)
{
for (e in 1:length(test.1[[a]][[b]][[c]][[d]]))
{
if (is.null(test.1[[a]][[b]][[c]][[d]][[e]]) || is.na(test.1[[a]][[b]][[c]][[d]][[e]]) || length(test.1[[a]][[b]][[c]][[d]][[e]]) == 0)
test.1[[a]][[b]][[c]][[d]][[e]] <- ""
if (is.null(approved.1[[a]][[b]][[c]][[d]][[e]]) || is.na(approved.1[[a]][[b]][[c]][[d]][[e]]) || length(approved.1[[a]][[b]][[c]][[d]][[e]]) == 0)
approved.1[[a]][[b]][[c]][[d]][[e]] <- ""
test_that(paste(names(qTab.examples[i]), " - in test (", a, " ", b, " ", c, " ", d," ", e, "): ", test.1[[a]][[b]][[c]][[d]][[e]], " / in approved: ", approved.1[[a]][[b]][[c]][[d]][[e]], sep = ""), {expect_that(unlist(test.1[[a]][[b]][[c]][[d]][[e]]) == unlist(approved.1[[a]][[b]][[c]][[d]][[e]]), is_true())})
}
} else {
if (is.null(test.1[[a]][[b]][[c]][[d]]) || is.na(test.1[[a]][[b]][[c]][[d]]) || length(test.1[[a]][[b]][[c]][[d]]) == 0)
test.1[[a]][[b]][[c]][[d]] <- ""
if (is.null(approved.1[[a]][[b]][[c]][[d]]) || is.na(approved.1[[a]][[b]][[c]][[d]]) || length(approved.1[[a]][[b]][[c]][[d]]) == 0)
approved.1[[a]][[b]][[c]][[d]] <- ""
test_that(paste(names(qTab.examples[i]), " - in test (", a, " ", b, " ", c, " ", d,"): ", test.1[[a]][[b]][[c]][[d]], " / in approved: ", approved.1[[a]][[b]][[c]][[d]], sep = ""), {expect_that(unlist(test.1[[a]][[b]][[c]][[d]]) == unlist(approved.1[[a]][[b]][[c]][[d]]), is_true())})
}
}
} else {
if (is.null(test.1[[a]][[b]][[c]]) || is.na(test.1[[a]][[b]][[c]]) || length(test.1[[a]][[b]][[c]]) == 0)
test.1[[a]][[b]][[c]] <- ""
if (is.null(approved.1[[a]][[b]][[c]]) || is.na(approved.1[[a]][[b]][[c]]) || length(approved.1[[a]][[b]][[c]]) == 0)
approved.1[[a]][[b]][[c]] <- ""
test_that(paste(names(qTab.examples[i]), " - in test (", a, " ", b, " ", c, "): ", test.1[[a]][[b]][[c]], " / in approved: ", approved.1[[a]][[b]][[c]], sep = ""), {expect_that(unlist(test.1[[a]][[b]][[c]]) == unlist(approved.1[[a]][[b]][[c]]), is_true())})
}
}
} else {
if (is.null(test.1[[a]][[b]]) || is.na(test.1[[a]][[b]]) || length(test.1[[a]][[b]]) == 0)
test.1[[a]][[b]] <- ""
if (is.null(approved.1[[a]][[b]]) || is.na(approved.1[[a]][[b]]) || length(approved.1[[a]][[b]]) == 0)
approved.1[[a]][[b]] <- ""
test_that(paste(names(qTab.examples[i]), " - in test (", a, " ", b, "): ", test.1[[a]][[b]], " / in approved: ", approved.1[[a]][[b]], sep = ""), {expect_that(unlist(test.1[[a]][[b]]) == unlist(approved.1[[a]][[b]]), is_true())})
}
}
} else {
if (is.null(test.1[[a]]) || is.na(test.1[[a]]) || length(test.1[[a]]) == 0)
test.2[[a]] <- ""
if (is.null(approved.1[[a]]) || is.na(approved.1[[a]]) || length(approved.1[[a]]) == 0)
approved.1[[a]] <- ""
test_that(paste(names(qTab.examples[i]), " - in test (", a, "): ", test.1[[a]], " / in approved: ", approved.1[[a]], sep = ""), {expect_that(unlist(test.1[[a]]) == unlist(approved.1[[a]]), is_true())})
}
}
}
Chart(y = df, type = "Line")
Chart(y = df, type = "Line", transpose = TRUE)
Chart(y = df, type = "Line", transpose = TRUE, x.show.missing.data.markers = FALSE)
Chart(y = df, type = "Line", transpose = TRUE)
Chart(y = table(var1 ~ var2), type = "Line", transpose = TRUE)
Chart(y = table(var1 , var2), type = "Line", transpose = TRUE)
Chart(y = table(var1 , var2), type = "Line")
?rev
x
devtools::load_all(".")
library(testthat)
two.cols <- structure(c(10.625, 3.125, 8.125, 9.375, 1.25, 7.5, 8.125, 3.75,
5.625, 7.5, 1.875, 6.875, 9.375, 3.75, 8.125, 7.5, 5, 6.875,
9.375, 3.125, 10, 14.375, 5.625, 15, 5, 1.875, 6.875, 11.9760479041916,
1.79640718562874, 6.58682634730539, 11.9760479041916, 1.19760479041916,
7.78443113772455, 7.18562874251497, 2.9940119760479, 3.59281437125748,
11.377245508982, 2.9940119760479, 10.7784431137725, 6.58682634730539,
1.79640718562874, 6.58682634730539, 7.78443113772455, 1.19760479041916,
5.98802395209581, 8.98203592814371, 4.19161676646707, 7.78443113772455,
10.7784431137725, 3.59281437125748, 8.98203592814371, 4.79041916167665,
1.79640718562874, 4.79041916167665), .Dim = c(27L, 2L), statistic = "Column %", .Dimnames = list(
paste0(rep(c("a", "b", "c"), 9), rep(1:9, each = 3)),
c("Male", "Female")), name = "Span in Stub", questions = c("BANNER", "Q2. Gender"))
three.cols <- structure(c(13.9097744360902, 3.00751879699248, 7.89473684210526,
13.1578947368421, 1.50375939849624, 8.27067669172932, 9.3984962406015,
3.7593984962406, 4.88721804511278, 11.6541353383459, 2.25563909774436,
9.77443609022556, 9.77443609022556, 2.63157894736842, 6.39097744360902,
9.3984962406015, 3.7593984962406, 7.14285714285714, 11.2781954887218,
3.38345864661654, 7.89473684210526, 15.4135338345865, 4.13533834586466,
12.0300751879699, 6.01503759398496, 1.8796992481203, 4.88721804511278,
9.63855421686747, 9.63855421686747, 8.43373493975904, 4.81927710843374,
4.81927710843374, 3.6144578313253, 12.0481927710843, 13.2530120481928,
7.2289156626506, 7.2289156626506, 9.63855421686747, 9.63855421686747,
8.43373493975904, 10.8433734939759, 9.63855421686747, 12.0481927710843,
12.0481927710843, 8.43373493975904, 10.8433734939759, 14.4578313253012,
10.8433734939759, 13.2530120481928, 18.0722891566265, 15.6626506024096,
6.02409638554217, 7.2289156626506, 7.2289156626506, 9.33333333333333,
3.11111111111111, 10.6666666666667, 9.77777777777778, 1.33333333333333,
11.1111111111111, 5.77777777777778, 2.66666666666667, 6.66666666666667,
11.5555555555556, 3.55555555555556, 12.8888888888889, 7.55555555555556,
3.55555555555556, 10.6666666666667, 8.44444444444444, 3.11111111111111,
9.33333333333333, 9.33333333333333, 4, 12.8888888888889, 14.2222222222222,
5.77777777777778, 17.3333333333333, 5.77777777777778, 2.66666666666667,
8.44444444444444), .Dim = c(27L, 3L), statistic = "Column %", .Dimnames = list(
paste0(rep(c("a", "b", "c"), 9), rep(1:9, each = 3)), c("Colas (e.g., Coca Cola, Pepsi Max)?", "Sparkling mineral water",
"Coffee")), name = "BANNER by Q4. Drink categorical", questions = c("BANNER", "Q4. Drink categorical"))
test_that("Labeled Scatterplot transposed",
expect_error(print(Chart(y = two.cols,
type = "Labeled Scatterplot",
transpose = TRUE,
title = "Labeled Scatterplot")), NA))
test_that("Labeled Scatterplot transposed",
expect_error(print(Chart(y = two.cols,
type = "Labeled Scatterplot",
transpose = TRUE,
title = "Labeled Scatterplot", grid = FALSE)), NA))
test_that("Labeled Scatterplot transposed",
expect_error(print(Chart(y = two.cols,
type = "Labeled Scatterplot",
transpose = TRUE,
title = "Labeled Scatterplot", x.grid.width = 0, y.grid.width = 0)), NA))
Z
Z <- NULL
Z < 0
any(Z < 0)
library(flipStandardCharts)
